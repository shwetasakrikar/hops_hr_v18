#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratorBase.MVC.Views.ImportConfiguration
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using GeneratorBase.MVC;
    
    #line 2 "..\..\Views\ImportConfiguration\Edit.cshtml"
    using PagedList;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ImportConfiguration/Edit.cshtml")]
    public partial class Edit : GeneratorBase.MVC.CustomWebViewPage<GeneratorBase.MVC.Models.ImportConfiguration>
    {
        
        #line 6 "..\..\Views\ImportConfiguration\Edit.cshtml"
            
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("ImportConfiguration", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }

        #line default
        #line hidden
        
        public Edit()
        {
        }
        public override void Execute()
        {
            
            #line 3 "..\..\Views\ImportConfiguration\Edit.cshtml"
  
    ViewBag.Title = "Edit Import Configuration";

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("<div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"col-lg-12\"");

WriteLiteral(">\r\n        <h1");

WriteLiteral(" class=\"page-title\"");

WriteLiteral(">\r\n            <i");

WriteLiteral(" class=\"glyphicon glyphicon-edit text-primary\"");

WriteLiteral("></i> Import Configuration  <i");

WriteLiteral(" class=\"glyphicon glyphicon-chevron-right small\"");

WriteLiteral("></i> <span>Edit</span>\r\n        </h1>\r\n        <label");

WriteLiteral(" id=\"ErrMsg\"");

WriteLiteral(" class=\"text-primary small pull-right\"");

WriteLiteral(" style=\"color:red; vertical-align:middle; font-weight:100;\"");

WriteLiteral("></label>\r\n        <h2");

WriteLiteral(" class=\"text-primary\"");

WriteLiteral(">");

            
            #line 21 "..\..\Views\ImportConfiguration\Edit.cshtml"
                            Write(Html.DisplayFor(model => model.DisplayValue));

            
            #line default
            #line hidden
WriteLiteral("</h2>\r\n    </div>\r\n    <!-- /.col-lg-12 -->\r\n</div>\r\n<div");

WriteLiteral(" class=\"tabbable responsive\"");

WriteLiteral(">\r\n    <ul");

WriteLiteral(" class=\"nav nav-tabs\"");

WriteLiteral(">\r\n        <li");

WriteLiteral(" class=\"active\"");

WriteLiteral("><a");

WriteLiteral(" href=\"#Details\"");

WriteLiteral(" data-toggle=\"tab\"");

WriteLiteral(">Details</a></li>\r\n    </ul>\r\n    <div");

WriteLiteral(" class=\"tab-content\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"tab-pane fade in active\"");

WriteLiteral(" id=\"Details\"");

WriteLiteral(">\r\n");

            
            #line 31 "..\..\Views\ImportConfiguration\Edit.cshtml"
            
            
            #line default
            #line hidden
            
            #line 31 "..\..\Views\ImportConfiguration\Edit.cshtml"
             using (Html.BeginForm("Edit", "ImportConfiguration", new { UrlReferrer = Convert.ToString(ViewData["ImportConfigurationParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                Html.ValidationSummary(true);
                Html.EnableClientValidation();
                
            
            #line default
            #line hidden
            
            #line 35 "..\..\Views\ImportConfiguration\Edit.cshtml"
           Write(Html.HiddenFor(model => model.Id));

            
            #line default
            #line hidden
            
            #line 35 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                  
                
            
            #line default
            #line hidden
            
            #line 36 "..\..\Views\ImportConfiguration\Edit.cshtml"
           Write(Html.HiddenFor(model => model.ConcurrencyKey));

            
            #line default
            #line hidden
            
            #line 36 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                              

            
            #line default
            #line hidden
WriteLiteral("                <div");

WriteLiteral(" class=\"col-md-12 col-sm-12 col-xs-12\"");

WriteLiteral(" style=\"padding:0px; margin:0px;\"");

WriteLiteral(">\r\n                    <div");

WriteLiteral(" class=\"panel panel-default AppForm\"");

WriteLiteral(">\r\n                        <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n                                <div");

WriteLiteral(" class=\"col-md-12 col-sm-12 col-xs-12\"");

WriteLiteral(">\r\n                                    <div");

WriteLiteral(" class=\"panel panel-default\"");

WriteLiteral(">\r\n                                        <div");

WriteLiteral(" class=\"panel-heading clearfix\"");

WriteLiteral(">\r\n                                            <i");

WriteLiteral(" class=\"icon-calendar\"");

WriteLiteral("></i>\r\n                                            <h3");

WriteLiteral(" class=\"panel-title\"");

WriteLiteral(">General</h3>\r\n                                        </div>\r\n                  " +
"                      <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n");

            
            #line 48 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            
            
            #line default
            #line hidden
            
            #line 48 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "TableColumn"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <div");

WriteLiteral(" class=\'form-group\'");

WriteLiteral(">\r\n                                                        <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 52 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                              Write(Html.LabelFor(model => model.TableColumn));

            
            #line default
            #line hidden
WriteLiteral("   </label>\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                            ");

            
            #line 54 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.TextBoxFor(model => model.TableColumn, getHtmlAttributes("TableColumn")));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("                                                            ");

            
            #line 55 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.ValidationMessageFor(model => model.TableColumn));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                        </div>\r\n               " +
"                                     </div>\r\n                                   " +
"             </div>\r\n");

            
            #line 59 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }
                                            else
                                            { 
            
            #line default
            #line hidden
            
            #line 61 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                         Write(Html.HiddenFor(model => model.TableColumn, new { @class = "form-control" }));

            
            #line default
            #line hidden
            
            #line 61 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                          }

            
            #line default
            #line hidden
WriteLiteral("                                            ");

            
            #line 62 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "SheetColumn"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <div");

WriteLiteral(" class=\'form-group\'");

WriteLiteral(">\r\n                                                        <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 66 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                              Write(Html.LabelFor(model => model.SheetColumn));

            
            #line default
            #line hidden
WriteLiteral("   </label>\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                            ");

            
            #line 68 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.TextBoxFor(model => model.SheetColumn, getHtmlAttributes("SheetColumn")));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("                                                            ");

            
            #line 69 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.ValidationMessageFor(model => model.SheetColumn));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                        </div>\r\n               " +
"                                     </div>\r\n                                   " +
"             </div>\r\n");

            
            #line 73 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }
                                            else
                                            { 
            
            #line default
            #line hidden
            
            #line 75 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                         Write(Html.HiddenFor(model => model.SheetColumn, new { @class = "form-control" }));

            
            #line default
            #line hidden
            
            #line 75 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                          }

            
            #line default
            #line hidden
WriteLiteral("                                            ");

            
            #line 76 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "UniqueColumn"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <div");

WriteLiteral(" class=\'form-group\'");

WriteLiteral(">\r\n                                                        <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 80 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                              Write(Html.LabelFor(model => model.UniqueColumn));

            
            #line default
            #line hidden
WriteLiteral("   </label>\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                            ");

            
            #line 82 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.TextBoxFor(model => model.UniqueColumn, getHtmlAttributes("UniqueColumn")));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("                                                            ");

            
            #line 83 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.ValidationMessageFor(model => model.UniqueColumn));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                        </div>\r\n               " +
"                                     </div>\r\n                                   " +
"             </div>\r\n");

            
            #line 87 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }
                                            else
                                            { 
            
            #line default
            #line hidden
            
            #line 89 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                         Write(Html.HiddenFor(model => model.UniqueColumn, new { @class = "form-control" }));

            
            #line default
            #line hidden
            
            #line 89 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                           }

            
            #line default
            #line hidden
WriteLiteral("                                            ");

            
            #line 90 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "LastUpdate"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 93 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                          Write(Html.LabelFor(model => model.LastUpdate, new { @class = "lblFix" }));

            
            #line default
            #line hidden
WriteLiteral(" </label>\r\n                                                    <div");

WriteLiteral(" class=\"form-group\"");

WriteLiteral(">\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n                                                            <div");

WriteLiteral(" class=\"col-sm-6 col-md-6 col-xs-12\"");

WriteLiteral(" id=\"datetimepickerLastUpdate\"");

WriteLiteral(" style=\"padding-left:0px; padding-right:5px\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                                ");

            
            #line 97 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                           Write(Html.TextBoxFor(model => model.LastUpdate, "{0:MM/dd/yyyy hh:mm tt}", new { @class = "form-control", @readonly = "readonly" }));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                            </div>\r\n           " +
"                                                 <div");

WriteLiteral(" class=\"col-sm-6 col-md-6 col-xs-12\"");

WriteLiteral(" style=\"padding-left:0px; padding-right:0px\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                                ");

            
            #line 100 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                           Write(Html.TextBoxFor(model => model.LastUpdateUser, new { @class = "form-control", @readonly = "readonly" }));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                            </div>\r\n           " +
"                                             </div>\r\n                           " +
"                         </div>\r\n                                               " +
" </div>\r\n");

            
            #line 105 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }

            
            #line default
            #line hidden
WriteLiteral("                                            ");

            
            #line 106 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "Name"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <div");

WriteLiteral(" class=\'form-group\'");

WriteLiteral(">\r\n                                                        <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 110 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                              Write(Html.LabelFor(model => model.Name));

            
            #line default
            #line hidden
WriteLiteral("   </label>\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                            ");

            
            #line 112 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.TextBoxFor(model => model.Name, getHtmlAttributes("Name")));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("                                                            ");

            
            #line 113 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.ValidationMessageFor(model => model.Name));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                        </div>\r\n               " +
"                                     </div>\r\n                                   " +
"             </div>\r\n");

            
            #line 117 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }
                                            else
                                            { 
            
            #line default
            #line hidden
            
            #line 119 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                         Write(Html.HiddenFor(model => model.Name, new { @class = "form-control" }));

            
            #line default
            #line hidden
            
            #line 119 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                   }

            
            #line default
            #line hidden
WriteLiteral("                                            ");

            
            #line 120 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "MappingName"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <div");

WriteLiteral(" class=\'form-group\'");

WriteLiteral(">\r\n                                                        <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 124 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                              Write(Html.LabelFor(model => model.MappingName));

            
            #line default
            #line hidden
WriteLiteral("   </label>\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                            ");

            
            #line 126 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.TextBoxFor(model => model.MappingName, getHtmlAttributes("MappingName")));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("                                                            ");

            
            #line 127 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.ValidationMessageFor(model => model.MappingName));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                        </div>\r\n               " +
"                                     </div>\r\n                                   " +
"             </div>\r\n");

            
            #line 131 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }
                                            else
                                            { 
            
            #line default
            #line hidden
            
            #line 133 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                         Write(Html.HiddenFor(model => model.MappingName, new { @class = "form-control" }));

            
            #line default
            #line hidden
            
            #line 133 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                          }

            
            #line default
            #line hidden
WriteLiteral("                                            ");

            
            #line 134 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                             if (User.CanView("ImportConfiguration", "IsDefaultMapping"))
                                            {

            
            #line default
            #line hidden
WriteLiteral("                                                <div");

WriteLiteral(" class=\'col-sm-6 col-md-6 col-xs-12\'");

WriteLiteral(">\r\n                                                    <div");

WriteLiteral(" class=\'form-group\'");

WriteLiteral(">\r\n                                                        <label");

WriteLiteral(" class=\"col-sm-5 col-md-5 col-xs-12\"");

WriteLiteral(">");

            
            #line 138 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                              Write(Html.LabelFor(model => model.IsDefaultMapping));

            
            #line default
            #line hidden
WriteLiteral("   </label>\r\n                                                        <div");

WriteLiteral(" class=\"input-group col-sm-7 col-md-7 col-xs-12\"");

WriteLiteral(">\r\n");

WriteLiteral("                                                            ");

            
            #line 140 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.CheckBoxFor(model => model.IsDefaultMapping));

            
            #line default
            #line hidden
WriteLiteral("\r\n");

WriteLiteral("                                                            ");

            
            #line 141 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                       Write(Html.ValidationMessageFor(model => model.IsDefaultMapping));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                                        </div>\r\n               " +
"                                     </div>\r\n                                   " +
"             </div>\r\n");

            
            #line 145 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                            }
                                            else
                                            { 
            
            #line default
            #line hidden
            
            #line 147 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                         Write(Html.HiddenFor(model => model.IsDefaultMapping, new { @class = "form-control" }));

            
            #line default
            #line hidden
            
            #line 147 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                               }

            
            #line default
            #line hidden
WriteLiteral("                                        </div>\r\n                                 " +
"   </div>\r\n                                </div>\r\n                            <" +
"/div>\r\n                        </div>\r\n                    </div>\r\n             " +
"   </div>\r\n");

            
            #line 155 "..\..\Views\ImportConfiguration\Edit.cshtml"
                
            
            #line default
            #line hidden
            
            #line 155 "..\..\Views\ImportConfiguration\Edit.cshtml"
           Write(Html.AntiForgeryToken());

            
            #line default
            #line hidden
            
            #line 155 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                        ;
                
            
            #line default
            #line hidden
            
            #line 156 "..\..\Views\ImportConfiguration\Edit.cshtml"
           Write(Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["ImportConfigurationParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" }));

            
            #line default
            #line hidden
            
            #line 156 "..\..\Views\ImportConfiguration\Edit.cshtml"
                                                                                                                                                                              

            
            #line default
            #line hidden
WriteLiteral("                <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"Save\"");

WriteLiteral(" class=\"btn btn-primary btn-sm\"");

WriteLiteral(" />\r\n");

WriteLiteral("                <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"Save & Continue\"");

WriteLiteral(" class=\"btn btn-primary btn-sm\"");

WriteLiteral(" />\r\n");

WriteLiteral("                <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"hdncommand\"");

WriteLiteral(" value=\"\"");

WriteLiteral(" />\r\n");

            
            #line 160 "..\..\Views\ImportConfiguration\Edit.cshtml"
            }

            
            #line default
            #line hidden
WriteLiteral(@"        </div>
    </div> <!-- /tab-content --><br />
    <br />
</div>
<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
<script>
    $(""input[type='submit']"").click(function () {
        var $this = $(this);
        $('input:hidden[name=""hdncommand""]').val($this.val());
    });
</script>
");

            
            #line 190 "..\..\Views\ImportConfiguration\Edit.cshtml"
  
    var busineesrule = User.businessrules.Where(p => p.EntityName == "ImportConfiguration").ToList();
    if ((busineesrule != null && busineesrule.Count > 0))
    {

            
            #line default
            #line hidden
WriteLiteral("        <script>\r\n            $(document).ready(function () {\r\n                $." +
"ajax({\r\n                    async: false,\r\n                    type: \"GET\",\r\n   " +
"                 url: \"");

            
            #line 199 "..\..\Views\ImportConfiguration\Edit.cshtml"
                     Write(Url.Action("GetLockBusinessRules", "ImportConfiguration"));

            
            #line default
            #line hidden
WriteLiteral(@""",
                    data: $(""form"").serialize(),
                    success: function (data) {
                        if (data.length > 0) {
                            $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger(""chosen:updated"");
                            document.getElementById('ErrMsg').innerHTML = data + "" Rules applied"";
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                $.ajax({
                    async: false,
                    type: ""GET"",
                    url: """);

            
            #line 213 "..\..\Views\ImportConfiguration\Edit.cshtml"
                     Write(Url.Action("GetReadOnlyProperties", "ImportConfiguration"));

            
            #line default
            #line hidden
WriteLiteral(@""",
                    data: $(""form"").serialize(),
                    success: function (data) {
                        for (var key in data) {
                            $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger(""chosen:updated"");
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            });
        </script>
");

WriteLiteral("        <script>\r\n            $(\"form\").submit(function () {\r\n                var" +
" flag = true;\r\n                $.ajax({\r\n                    async: false,\r\n    " +
"                type: \"GET\",\r\n                    url: \"");

            
            #line 231 "..\..\Views\ImportConfiguration\Edit.cshtml"
                     Write(Url.Action("GetMandatoryProperties", "ImportConfiguration"));

            
            #line default
            #line hidden
WriteLiteral(@""",
                    data: $(this).serialize(),
                    success: function (data) {
                        document.getElementById('ErrMsg').innerHTML = """";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0) {
                                $('#' + key).attr('required', 'required');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + "" is Mandatory.<br/>"";
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                if (flag)
                    $(""form"").find(':input').removeAttr('disabled');
                return flag;
            });
        </script>
");

            
            #line 251 "..\..\Views\ImportConfiguration\Edit.cshtml"
    }

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n\r\n");

        }
    }
}
#pragma warning restore 1591
