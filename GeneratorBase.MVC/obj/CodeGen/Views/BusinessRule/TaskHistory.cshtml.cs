#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratorBase.MVC.Views.BusinessRule
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using GeneratorBase.MVC;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/BusinessRule/TaskHistory.cshtml")]
    public partial class TaskHistory : GeneratorBase.MVC.CustomWebViewPage<List<GeneratorBase.MVC.Models.ScheduledTaskHistory>>
    {
        
        #line 59 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = ViewBag.CurrentSort,
                    isAsc = ViewBag.IsAsc,
                    currentFilter = ViewBag.CurrentFilter,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    HostingEntityName = @Convert.ToString(ViewData["HostingEntityName"]),
                    IsDisable = @Convert.ToString(ViewData["IsDisable"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    HostingEntityID = ViewData["HostingEntityID"],
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    associatedbusinessruletype = Request.QueryString["associatedbusinessruletype"],
                    DateCreated1From = Request.QueryString["DateCreated1From"],
                    DateCreated1To = Request.QueryString["DateCreated1To"],
                    search = Request.QueryString["search"],
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                    page = ViewBag.Pages,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),

                    HostingEntityName = @Convert.ToString(ViewData["HostingEntityName"]),
                    IsDisable = @Convert.ToString(ViewData["IsDisable"]),
                    HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    associatedbusinessruletype = Request.QueryString["associatedbusinessruletype"],
                    DateCreated1From = Request.QueryString["DateCreated1From"],
                    DateCreated1To = Request.QueryString["DateCreated1To"],
                    search = Request.QueryString["search"],
                };
            }
        }
    
        #line default
        #line hidden
        
        public TaskHistory()
        {
        }
        public override void Execute()
        {
            
            #line 2 "..\..\Views\BusinessRule\TaskHistory.cshtml"
  
    Layout = null;

            
            #line default
            #line hidden
WriteLiteral("\r\n<div");

WriteLiteral(" id=\"TaskHistory\"");

WriteLiteral(@">
    <style>
        .table-responsive > .fixed-column {
            position: absolute;
            display: block;
            width: auto;
            border: 0px solid transparent;
            border-top: 1px solid #c3ddec;
        }

        .fixed-column th {
            background: #fff;
        }

        .fixed-column td {
            background: #fff;
        }
    </style>
    <script>
        function DoubleClickBusinessRule(RecordID) {
            var url = """);

            
            #line 25 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                  Write(Url.Action("Details", "BusinessRule", new { id = "_Id" }, null));

            
            #line default
            #line hidden
WriteLiteral("\".replace(\"_Id\", RecordID);\r\n            window.location.replace(url);\r\n        }" +
"\r\n        $(document).ready(function () {\r\n            $(\".pagination a\").click(" +
"function (e) {\r\n                PaginationClick(e, \'BusinessRule\', \'");

            
            #line 30 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                               Write(User.JavaScriptEncodedName);

            
            #line default
            #line hidden
WriteLiteral("\')\r\n            })\r\n            if (\"");

            
            #line 32 "..\..\Views\BusinessRule\TaskHistory.cshtml"
            Write(HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper());

            
            #line default
            #line hidden
WriteLiteral(@""" == ""FSEARCH"") {
                $(""#fsearchBusinessRule"").addClass('in');
            }
            $(""#SearchStringT_Employee"").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $(""#T_EmployeeSearch"").bind(""click"", (function () {
                    }));
                    $('#T_EmployeeSearch').trigger(""click"");
                    return false;
                }
            })
            $(""#SearchStringBusinessRule"").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $(""#BusinessRuleSearch"").bind(""click"", (function () {
                    }));
                    $('#BusinessRuleSearch').trigger(""click"");
                    return false;
                }
            })

            $(""#btnShowHideBusinessRule"").mouseup(function () {
                if (document.getElementById('ColumnShowHideBusinessRule').className == 'collapse') {
                    $('#lblBusinessRule').css('display', 'none');
                }
            })
        });
    </script>
");

            
            #line 59 "..\..\Views\BusinessRule\TaskHistory.cshtml"
    
            
            #line default
            #line hidden
WriteLiteral("    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(@">
        $(document).ready(function () {
            $("".tip-top"").tooltip({
                placement: 'top'
            });
            $("".tip-right"").tooltip({
                placement: 'right'
            });
            $("".tip-bottom"").tooltip({
                placement: 'bottom'
            });
            $("".tip-left"").tooltip({
                placement: 'left'
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('input[type=""checkbox""]').click(function () {
                var index = $(this).attr('name').substr(3);
                index--;
                $('table tr').each(function () {
                    $('td:eq(' + index + ')', this).toggle();
                });
                $('th.' + $(this).attr('name')).toggle();
            });
        });
        $(document).ready(function () {
            var usrName = """);

            
            #line 137 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                      Write(HttpContext.Current.User.Identity.Name);

            
            #line default
            #line hidden
WriteLiteral(@""";
            var myCookie = usrName + ""BusinessRule"";
            if ($.cookie(myCookie) != null) {
                var column = $.cookie(myCookie).split(',');
                for (var i = 0; i < column.length; i++) {
                    if (column[i] == ""col1"")
                        continue;
                    $('input[name=' + column[i] + ']').attr('checked', false);
                    var index = column[i].substr(3)
                    index--;
                    $('table tr').each(function () {
                        $('td:eq(' + index + ')', this).toggle();
                    });
                    $('th.' + column[i]).toggle();
                }
            }
        });
        function SaveCookiesBusinessRule() {
            var usrName = """);

            
            #line 155 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                      Write(HttpContext.Current.User.Identity.Name);

            
            #line default
            #line hidden
WriteLiteral(@""";
            var myCookie = usrName + ""BusinessRule"";
            if ($.cookie(myCookie) != null) {
                $.removeCookie(myCookie);
            }
            var selected = [];
            $('#ColumnShowHideBusinessRule input[type=checkbox]').each(function () {
                if ($(this).prop('checked') == false) {
                    selected.push($(this).attr('name'));
                }
            });
            if (selected != """") {
                $.cookie(myCookie, selected);
                $('#lblBusinessRule').css('display', 'block');
            }
        }
    </script>
    <div");

WriteLiteral(" class=\"row\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"col-md-12 col-sm-12 col-sx-12\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"panel panel-default\"");

WriteLiteral(">\r\n\r\n                <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(" style=\"margin:0px; padding:8px;\"");

WriteLiteral(">\r\n\r\n\r\n\r\n                    <div");

WriteLiteral(" id=\"Des_Table\"");

WriteLiteral(" class=\"table-responsive\"");

WriteLiteral(" style=\"overflow-x:auto;\"");

WriteLiteral(">\r\n                        <table");

WriteLiteral(" class=\"table table-striped table-bordered table-hover table-condensed\"");

WriteLiteral(">\r\n                            <thead>\r\n                                <tr>\r\n   " +
"                                 <th");

WriteLiteral(" class=\"col1\"");

WriteLiteral(">TaskId</th>\r\n\r\n                                    <th");

WriteLiteral(" class=\"col2\"");

WriteLiteral(">\r\n                                        Business Rule\r\n                       " +
"             </th>\r\n");

            
            #line 189 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                    
            
            #line default
            #line hidden
            
            #line 189 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                     if (User.CanView("BusinessRule", "RuleName"))
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <th");

WriteLiteral(" class=\"col3\"");

WriteLiteral(">\r\n                                            Status\r\n                          " +
"              </th>\r\n");

            
            #line 194 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                    ");

            
            #line 195 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                     if (User.CanView("BusinessRule", "EntityName"))
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <th");

WriteLiteral(" class=\"col4\"");

WriteLiteral(">\r\n                                            RunTime\r\n                         " +
"               </th>\r\n");

            
            #line 200 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n                                </tr>\r\n");

            
            #line 204 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                
            
            #line default
            #line hidden
            
            #line 204 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                 foreach (var item in Model)
                                {

            
            #line default
            #line hidden
WriteLiteral("                                    <tr>\r\n                                       " +
" <td>\r\n");

WriteLiteral("                                            ");

            
            #line 208 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                       Write(Html.DisplayFor(modelItem => item.Id));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                        </td>\r\n                                " +
"        <td>\r\n");

WriteLiteral("                                            ");

            
            #line 211 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                       Write(Html.DisplayFor(modelItem => item.DisplayValue));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                        </td>\r\n                                " +
"        <td>\r\n");

WriteLiteral("                                            ");

            
            #line 214 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                       Write(Html.DisplayFor(modelItem => item.Status));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                        </td>\r\n                                " +
"        <td");

WriteAttribute("id", Tuple.Create(" id=", 9436), Tuple.Create("", 9485)
            
            #line 216 "..\..\Views\BusinessRule\TaskHistory.cshtml"
, Tuple.Create(Tuple.Create("", 9440), Tuple.Create<System.Object, System.Int32>(Html.Raw("'timeRunDateTime" + item.Id + "'")
            
            #line default
            #line hidden
, 9440), false)
);

WriteLiteral(">\r\n                                            ");

WriteLiteral("\r\n                                        </td>\r\n");

WriteLiteral("                                        ");

            
            #line 219 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                   Write(Html.Raw("<script> $(function () {$('timeRunDateTime" + item.Id + "').datetimepickerIndex({divid:'timeRunDateTime" + item.Id + "',format: 'MM/DD/YYYY hh:mm',val:'" + Html.DisplayFor(modelItem => item.RunDateTime) + "'})});</script>"));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                    </tr>\r\n");

            
            #line 221 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                }

            
            #line default
            #line hidden
WriteLiteral("                        </table>\r\n                    </div>\r\n\r\n\r\n\r\n             " +
"   </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div");

WriteLiteral(" class=\"modal fade\"");

WriteLiteral(" id=\"quickaddBusinessRule\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-labelledby=\"quickaddBusinessRuleLabel\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"modal-dialog\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-header\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"close\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">&times;</button>\r\n                <h4");

WriteLiteral(" class=\"modal-title\"");

WriteLiteral(" id=\"quickaddBusinessRuleLabel\"");

WriteLiteral("> Create Business Rule</h4>\r\n            </div>\r\n            <div");

WriteLiteral(" id=\"dvQAddquickaddBusinessRule\"");

WriteLiteral(" class=\"modal-body\"");

WriteLiteral(" data-url=\"");

            
            #line 240 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                                                         Write(Url.Action("CreateQuick", "BusinessRule",new {UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }));

            
            #line default
            #line hidden
WriteLiteral("\"");

WriteLiteral(">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div");

WriteLiteral(" class=\"modal fade\"");

WriteLiteral(" id=\"quickaddTimeRule\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-labelledby=\"quickaddTimeRuleLabel\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"modal-dialog\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-header\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"close\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">&times;</button>\r\n                <h4");

WriteLiteral(" class=\"modal-title\"");

WriteLiteral(" id=\"quickaddTimeRuleLabel\"");

WriteLiteral("> Create Time Based Alert</h4>\r\n            </div>\r\n            <div");

WriteLiteral(" id=\"dvQAddquickaddTimeRule\"");

WriteLiteral(" class=\"modal-body\"");

WriteLiteral(" data-url=\"");

            
            #line 252 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                                                     Write(Url.Action("CreateQuickTimeRule", "BusinessRule",new {UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }));

            
            #line default
            #line hidden
WriteLiteral("\"");

WriteLiteral(">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div");

WriteLiteral(" class=\"modal fade\"");

WriteLiteral(" id=\"setFSearchBusinessRule\"");

WriteLiteral(" tabindex=\"-1\"");

WriteLiteral(" role=\"dialog\"");

WriteLiteral(" aria-labelledby=\"setFSearchBusinessRuleLabel\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"modal-dialog\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(" id=\"shortdetails\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"modal-header\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" id=\"closeshortdetails\"");

WriteLiteral(" type=\"button\"");

WriteLiteral(" class=\"close hidden\"");

WriteLiteral(" data-dismiss=\"modal\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(">&times;</button>\r\n                <b><p");

WriteLiteral(" class=\"modal-title\"");

WriteLiteral(" id=\"setFSearchBusinessRuleLabel\"");

WriteLiteral("></p></b>\r\n            </div>\r\n            <div");

WriteLiteral(" id=\"dvsetFSearchBusinessRule\"");

WriteLiteral(" class=\"modal-body\"");

WriteLiteral(" data-url=\"");

            
            #line 264 "..\..\Views\BusinessRule\TaskHistory.cshtml"
                                                                       Write(Url.Action("SetFSearch", "BusinessRule",new {searchString = ViewBag.CurrentFilter, UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }));

            
            #line default
            #line hidden
WriteLiteral("\"");

WriteLiteral(">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");

        }
    }
}
#pragma warning restore 1591
