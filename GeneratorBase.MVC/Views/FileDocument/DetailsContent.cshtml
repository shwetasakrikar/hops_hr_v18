@model GeneratorBase.MVC.Models.FileDocument
@using PagedList;
@{
    ViewBag.Title = "View Document";
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "FileDocument");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Document";
}
<script>
    $(document).ready(function () {
			 if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			 }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsHiddenRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsSetValueUIRule);
    }
}
<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title">
            <i class="glyphicon glyphicon-hand-down text-primary"></i> @EntityDisplayName  <i class="glyphicon glyphicon-chevron-right small"></i> <span>View</span>
        </h1>
        <h2 class="text-primary"><span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
			<div class="btn-group pull-right fixactionbut">
            <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default pull-right">
                Action
                <span class="caret">    </span>
            </button>
			<ul class="dropdown-menu pull-left">               
				<li>
                    @if ( User.CanEdit("FileDocument"))
                    {
                        <a href="@Url.Action("Edit","FileDocument", new { id = Model.Id,  UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if ( User.CanDelete("FileDocument"))
                    {
                        <a href="@Url.Action("Delete", "FileDocument", new { id = Model.Id, UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu pull-left">
	<a tabindex="-1" href="#" style="margin-bottom:10px;">Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "T_Licenses", new {sourceEntity="FileDocument",id=Model.Id}, null)">Licenses</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_ServiceRecord", new {sourceEntity="FileDocument",id=Model.Id}, null)">Service Record</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Comment", new {sourceEntity="FileDocument",id=Model.Id}, null)">Comment</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_DrugAlcoholTest", new {sourceEntity="FileDocument",id=Model.Id}, null)">Drug & Alcohol Test</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_UnitX", new {sourceEntity="FileDocument",id=Model.Id}, null)">UnitX</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_JobAssignment", new {sourceEntity="FileDocument",id=Model.Id}, null)">Job Assignment</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_LeaveProfile", new {sourceEntity="FileDocument",id=Model.Id}, null)">Leave</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_EmployeeInjury", new {sourceEntity="FileDocument",id=Model.Id}, null)">Employee Injury</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_BackgroundCheck", new {sourceEntity="FileDocument",id=Model.Id}, null)">Background Check</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Education", new {sourceEntity="FileDocument",id=Model.Id}, null)">Education</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Accommodation", new {sourceEntity="FileDocument",id=Model.Id}, null)">Accommodation</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_PayDetails", new {sourceEntity="FileDocument",id=Model.Id}, null)">Pay Details </a>
</li>
</ul>
</li>
			</ul>
</div>
		</h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
<div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab">Details</a></li>
    </ul>
	    <div class="tab-content">
		   <div class="tab-pane fade in active" id="Details">
				 <div class="panel panel-default AppForm">
					<div class="panel-body">
                                  
			<div class="row">
				<div class="col-sm-12 col-md-12 col-xs-12">
			<div class="row">
@if(User.CanView("FileDocument","DocumentName"))
{
<div class='col-sm-6 col-md-6 col-xs-12' id="dvDocumentName">
	<div class='form-group' title="">
		<label class="col-sm-5 col-md-5 col-xs-12">@Html.DisplayNameFor(model => model.DocumentName) </label>
		<div class="input-group col-sm-7 col-md-7 col-xs-12">
		
				
				<p class="viewlabel">@Model.DocumentName</p>
					
					</div>
	</div>
</div>
}
@if(User.CanView("FileDocument","Description"))
{
<div class='col-sm-6 col-md-6 col-xs-12' id="dvDescription">
	<div class='form-group' title="">
		<label class="col-sm-5 col-md-5 col-xs-12">@Html.DisplayNameFor(model => model.Description) </label>
		<div class="input-group col-sm-7 col-md-7 col-xs-12">
		
				
				<p class="viewlabel">@Model.Description</p>
					
					</div>
	</div>
</div>
}
@if(User.CanView("FileDocument","AttachDocument") && User.CanView("Document"))
{
<div class='col-sm-6 col-md-6 col-xs-12' id="dvAttachDocument">
	<div class='form-group' title="">
		<label class="col-sm-5 col-md-5 col-xs-12">@Html.DisplayNameFor(model => model.AttachDocument)</label>
		<div class="input-group col-sm-7 col-md-7 col-xs-12">
		<p class="text-primary">
		@if(!string.IsNullOrEmpty(Model.AttachDocument))
		{
				 @Html.ActionLink(Model.AttachDocument, "Download", new { filename = Model.AttachDocument }) 
			 
				}else{<label>NA</label>}
		</p>
		</div>
	</div>
</div>
}
@if(User.CanView("FileDocument","DateCreated"))
{
<div class='col-sm-6 col-md-6 col-xs-12' id="dvDateCreated">
	<div class='form-group' title="">
		<label class="col-sm-5 col-md-5 col-xs-12">@Html.DisplayNameFor(model => model.DateCreated) </label>
		<div class="input-group col-sm-7 col-md-7 col-xs-12">
		
				
				<p class="viewlabel" id="timeDateCreated">@String.Format("{0:MM/dd/yyyy hh:mm tt}", Model.DateCreated)</p>
		@Html.Raw("<script> $(function () {$('timeDateCreated').datetimepickerIndex({divid:'timeDateCreated',format: 'MM/DD/YYYY hh:mm',val:'" + @Html.DisplayFor(model => model.DateCreated) + "'})});</script>")        
				
					</div>
	</div>
</div>
}
@if(User.CanView("FileDocument","DateLastUpdated"))
{
<div class='col-sm-6 col-md-6 col-xs-12' id="dvDateLastUpdated">
	<div class='form-group' title="">
		<label class="col-sm-5 col-md-5 col-xs-12">@Html.DisplayNameFor(model => model.DateLastUpdated) </label>
		<div class="input-group col-sm-7 col-md-7 col-xs-12">
		
				
				<p class="viewlabel" id="timeDateLastUpdated">@String.Format("{0:MM/dd/yyyy hh:mm tt}", Model.DateLastUpdated)</p>
		@Html.Raw("<script> $(function () {$('timeDateLastUpdated').datetimepickerIndex({divid:'timeDateLastUpdated',format: 'MM/DD/YYYY hh:mm',val:'" + @Html.DisplayFor(model => model.DateLastUpdated) + "'})});</script>")        
				
					</div>
	</div>
</div>
}
@if(User.CanView("FileDocument","T_EmployeeDocumentsID"))
{
<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeDocuments">
	<div class='form-group' >
		<label class="col-sm-5 col-md-5 col-xs-12">@Html.DisplayNameFor(model => model.T_EmployeeDocumentsID)</label>
		<div class="input-group col-sm-7 col-md-7 col-xs-12">
 @if (Model.t_employeedocuments!=null && !string.IsNullOrEmpty(Model.t_employeedocuments.DisplayValue))
        {
		 <p class="viewlabel">
		@Html.ActionLink(Html.DisplayFor(model => model.t_employeedocuments.DisplayValue).ToString(), "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_employeedocuments.Id).ToString() }, null)
		</p>
		}
		</div>
	</div>
</div>
}
		</div>
				</div>
			</div>
		</div>
			</div>
			<div class="row">
				<div class="col-md-12 col-sm-12 col-xs-12">
					@Html.ActionLink("Back", "Cancel", new { UrlReferrer = Request.UrlReferrer }, new { @class = "btn btn-default btn-sm pull-left formbuttonfix" })
					 @if ( User.CanEdit("FileDocument"))
                     {
                          @Html.ActionLink("Edit", "Edit", new { id = Model.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, new { @class = "btn btn-primary btn-sm pull-left formbuttonfix" })
                     }
				</div>
			</div>    
	</div>    
	</div> <!-- /tab-content --><br />

<br/>
</div>
 
