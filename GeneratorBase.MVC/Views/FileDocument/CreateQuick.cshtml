@model GeneratorBase.MVC.Models.FileDocument
@{
    ViewBag.Title = "Create Document";
    Layout = null;
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                 $('#' + hostingEntityName + 'ID').attr("lock","true");
				  $('#' + hostingEntityName + 'ID').trigger("change");
            }
			
        }
        catch (ex) { }
		
		 
    });
</script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsHiddenRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.FileDocumentIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.FileDocumentIsSetValueUIRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
@using (Html.BeginForm("CreateQuick", "FileDocument",FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
	<input type="hidden" id="ErrMsgQuickAdd" />
	@*<label id="ErrMsgQuickAdd" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
    <div id="errorContainerQuickAdd" style="display: none">
        <div id="errorsMsgQuickAdd"></div>
        <div id="errorsQuickAdd"></div>
    </div>
	<div id="divDisplayThresholdLimit" style="display:none;">
	</div>
	 <div id="divDisplayBRmsgMandatory" style="display:none;">
	</div>
	<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
	</div>
		    <div class="row">
	@Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
	@Html.Hidden("HostingEntityName", Convert.ToString(ViewData["HostingEntityName"]))
    @Html.Hidden("HostingEntityID", Convert.ToString(ViewData["HostingEntityID"]))
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="panel panel-default AppForm">
                <div class="panel-body">
               					<div class="row">
				        
								@if(User.CanView("FileDocument","DocumentName"))
						{
				<div class='col-sm-6' id="dvDocumentName">
                                <div class='form-group' title="">
                                    <label>@Html.LabelFor(model => model.DocumentName) <span class="text-danger-reg">*</span></label>
									 
                                    @Html.TextBoxFor(model => model.DocumentName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DocumentName)
									
                                </div>
					</div>
						}
     
				
								@if(User.CanView("FileDocument","Description"))
						{
				<div class='col-sm-6' id="dvDescription">
                                <div class='form-group' title="">
                                    <label>@Html.LabelFor(model => model.Description) </label>
									 
                                    @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Description)
									
                                </div>
					</div>
						}
     
				
				@if(User.CanAdd("Document"))
                { 

										if(User.CanView("FileDocument","AttachDocument"))
				{
     <div class='col-sm-6' id="dvAttachDocument">
                            <div class='form-group' title="">
                                   <label>@Html.LabelFor(model => model.AttachDocument) </label>
                                     <div style="position:relative;">
										 <a class='btn btn-primary btnupload' href='javascript:;'>
											 Upload File
										 <input id="AttachDocument"  type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;width:105px;' name="AttachDocument" onchange='$("#upload-file-infoAttachDocument").html($(this).val());'>
										</a>
										&nbsp;
										<span class='label uploadlblFix' id="upload-file-infoAttachDocument"></span>
									</div> 
                            </div>
                   </div>
				   }

				   
				}

@if(User.CanView("FileDocument","DateCreated"))
{
     
                            <div class='col-sm-6' id="dvDateCreated">
                                <label >@Html.LabelFor(model => model.DateCreated)<span class="text-danger-reg">*</span></label>
                                <div class="form-group" title="">
                                    <div class="input-group date" id="datetimepickerDateCreated">
									@Html.TextBox("DateCreated",null , new {@id = "datetimepickerDateCreatedtxt" ,@class = "form-control", @readonly="readonly",@Value = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, new GeneratorBase.MVC.Models.FileDocument().m_Timezone).ToString("MM/dd/yyyy hh:mm tt"), @format = "MM/DD/YYYY hh:mm" })
										<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DateCreated)
                                </div>
                            </div>
		}



@if(User.CanView("FileDocument","DateLastUpdated"))
{
     
                            <div class='col-sm-6' id="dvDateLastUpdated">
                                <label >@Html.LabelFor(model => model.DateLastUpdated)<span class="text-danger-reg">*</span></label>
                                <div class="form-group" title="">
                                    <div class="input-group date" id="datetimepickerDateLastUpdated">
									@Html.TextBox("DateLastUpdated",null , new {@id = "datetimepickerDateLastUpdatedtxt" ,@class = "form-control", @readonly="readonly",@Value = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, new GeneratorBase.MVC.Models.FileDocument().m_Timezone).ToString("MM/dd/yyyy hh:mm tt"), @format = "MM/DD/YYYY hh:mm" })
										<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DateLastUpdated)
                                </div>
                            </div>
		}


					@Html.HiddenFor(model => model.T_EmployeeDocumentsID, new {@class = "form-control", Value = @ViewData["HostingEntityID"] })
       </div>
                        </div>
                    </div>
                </div>
        </div>
		<button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>

		var busineesrule = User.businessrules.Where(p => p.EntityName == "FileDocument").ToList();
		 var lstinlineentityname = "";
		 var lstinlineassocdispname ="";
		 var lstinlineassocname = "";
        if (ViewBag.IsAddPop != null)
		{
			<input type="submit" value="Create" class="btn btn-primary btn-sm" onclick="QuickAdd(event,'FileDocument','@busineesrule',@busineesrule.Count,'OnCreate','ErrMsgQuickAdd',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname');" />
 <input type="submit"  value="Create & Continue" btnval="createcontinue" class="btn btn-primary btn-sm" onclick="QuickAdd(event,'FileDocument','@busineesrule',@busineesrule.Count,'OnCreate','ErrMsgQuickAdd',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname');" />
		}
		else
		{
			<input type="submit" value="Create" class="btn btn-primary btn-sm" onclick="QuickAddFromIndex(event,true,'FileDocument','@ViewData["AssociatedType"]','@busineesrule',@busineesrule.Count,'OnCreate','ErrMsgQuickAdd',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname');" />
 <input type="submit" value="Create & Continue" btnval="createcontinue" class="btn btn-primary btn-sm" onclick="QuickAddFromIndex(event,true,'FileDocument','@ViewData["AssociatedType"]','@busineesrule',@busineesrule.Count,'OnCreate','ErrMsgQuickAdd',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname');" />
		}
}
<script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
<script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>


<script type='text/javascript'>
    $(document).ready(function () {
        try {
            document.getElementsByTagName("body")[0].focus();
            $("#addPopup").removeAttr("tabindex");
            var cltcoll = $("#dvPopup").find('input[type=text]:not([class=hidden]):not([readonly]),textarea:not([readonly])');
            var cltid = "";
            $(cltcoll).each(function () {
			  if ($(this).attr("id") == undefined)
                    return
                var dvhidden = $("#dv" + $(this).attr("id"));
				var dvDate = $("#datetimepicker" + $(this).attr("id")).attr("id");

                if (!(dvhidden.css('display') == 'none') && dvDate == undefined) {
                    cltid = $(this);
                    return false;
                }
            });
            if (cltid != "" && cltid != undefined)
                setTimeout(function () { $(cltid).focus(); }, 500);
			var ctrlReadonly = $("#dvPopup").find('input[type=text][readonly],textarea[readonly]');
            $(ctrlReadonly).each(function () {
                $(ctrlReadonly).attr("tabindex", "-1");
            });
        }
        catch (ex) { }
    });
</script>

