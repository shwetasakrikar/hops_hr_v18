@model GeneratorBase.MVC.Models.T_JobAssignment
@using PagedList;
@{
    ViewBag.Title = "Edit Job Assignment";
	var EditPermission = User.CanEditItem("T_JobAssignment", Model, User);
	var DeletePermission = User.CanDeleteItem("T_JobAssignment", Model, User);
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_JobAssignment");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Job Assignment";
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_PositionLevel")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_RoleCode")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_ClassCode")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_WorkersCompCode")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_SOCCode")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_OvertimeEligibility")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_CostCenter")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_Program")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_DepartmentArea")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_Department")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_SupervisorEmail")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_JobAssignment", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
             if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				// $('#' + hostingEntityName + 'ID').trigger("change");
				  $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
			if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			}
			 
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_JobAssignmentIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_JobAssignmentIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_JobAssignmentIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_JobAssignmentIsGroupsHiddenRule);
    }
}

@{
    if (!string.IsNullOrEmpty(ViewBag.T_JobAssignmentIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_JobAssignmentIsSetValueUIRule);
    }
}
	<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title" >
            <i class="glyphicon glyphicon-edit text-primary"></i> @EntityDisplayName  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>

			   <div class="btn-group pull-right" style="margin-top:3px;">
			  


            <a data-toggle="dropdown" class="btn btn-xs dropdown-toggle" alt="Action" title="Action">
                Action
                <span class="caret" style="margin-bottom:2px">    </span>
            </a>
			<ul class="dropdown-menu pull-left">
			
				<li>
                    @if (EditPermission)
                    {
                        <a href="@Url.Action("Edit","T_JobAssignment", new { id = Model.Id,  UrlReferrer = Request.UrlReferrer, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (EditPermission && User.CanDelete("T_JobAssignment"))
                    {
                        <a href="@Url.Action("Delete", "T_JobAssignment", new {UrlReferrer = Request.UrlReferrer, id = Model.Id, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu pull-left" id="AddAssociationdropmenuT_JobAssignment">
	 @{ var dropmenu = false; }
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if (User.CanAdd("T_Comment"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_JobAssignmentComments", 
							HostingEntityName = "T_JobAssignment",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Comment
						</a>
					</li>
				}
							@if (User.CanAdd("T_PayDetails"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_PayDetails", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_PayDetailsJobAssignment", 
							HostingEntityName = "T_JobAssignment",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Salary 
						</a>
					</li>
				}
			</ul>
</li>
@if(!dropmenu)
{
    <script>
        $("#AddAssociationdropmenuT_JobAssignment").hide();
    </script>
}
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu pull-left">
	<a tabindex="-1" href="#" style="margin-bottom:10px;">Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "FileDocument", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Document</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Licenses", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Licenses</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_ServiceRecord", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Service Record</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Comment", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Comment</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_DrugAlcoholTest", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Drug & Alcohol Test</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_UnitX", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">UnitX</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_LeaveProfile", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Leave</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_EmployeeInjury", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Employee Injury</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_BackgroundCheck", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Background Check</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Education", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Education</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Accommodation", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Accommodation</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_PayDetails", new {sourceEntity="T_JobAssignment",id=Model.Id}, null)">Pay Details </a>
</li>
</ul>
</li>
			</ul>
		</div>
	  
  <div class="btn-group pull-right" style="margin-top:3px; margin-right:3px">
	  <a href="#" class="btn btn-xs closeall"><i class="glyphicon glyphicon-chevron-up"></i> Collapse All</a> <a href="#" class="btn btn-xs openall"><i class="glyphicon glyphicon-chevron-down"></i> Expand All</a>
</div>
<div class="btn-group pull-right" style="margin-top:1px; margin-right:3px" >
	@using (Html.BeginForm("CopyFromT_JobAssignment", "T_JobAssignment", new { UrlReferrer = Convert.ToString(ViewData["T_JobAssignmentParentUrl"]), IsDDAdd = ViewBag.IsDDAdd }, FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken();
            @Html.Hidden("T_JobAssignmentID", @Model.Id)
            <input type="submit" name="command" value="Copy to JobAssignment" class="btn btn-default btn-xs"/>
        }
		</div>


        </h1>

     <h2 class="text-primary" style="padding:0px 5px 15px 0px">
	  <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
			@if (EditPermission)
			{	
				<div class="pull-right" style="margin-top:-3px">
					<button class="btn btn-default btn-xs pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('T_JobAssignment',event,'hdnNextPrevId')")" alt="Next" title="Next">Next >></button>
					@Html.DropDownList("EntityT_JobAssignmentDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('T_JobAssignment','frmT_JobAssignment','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 22px;width: 170px; font-size:12px; color:#333;" })
					<button class="btn btn-default btn-xs pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('T_JobAssignment',event,'hdnNextPrevId')")" alt="Prev" title="Prev"><< Prev</button>
				</div>
			}
	 </h2>
		
    </div>
    <!-- /.col-lg-12 -->
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>

<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
 <div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">Details</a></li>
		 <li @(!User.CanView("T_Comment") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_JobAssignmentComments','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_Comment", new {RenderPartial=true, HostingEntity ="T_JobAssignment", HostingEntityID = @Model.Id, AssociatedType = "T_JobAssignmentComments",TabToken = DateTime.Now.Ticks,}))')" href="#T_JobAssignmentComments" data-toggle="tab" alt="Comment" title="Comment">Comment
		 <span class="badge bg-blue"><div id="dvcnt_T_JobAssignmentComments">@ViewBag.T_JobAssignmentCommentsCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_PayDetails") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_PayDetailsJobAssignment','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_PayDetails", new {RenderPartial=true, HostingEntity ="T_JobAssignment", HostingEntityID = @Model.Id, AssociatedType = "T_PayDetailsJobAssignment",TabToken = DateTime.Now.Ticks,}))')" href="#T_PayDetailsJobAssignment" data-toggle="tab" alt="Salary " title="Salary ">Salary 
		 <span class="badge bg-blue"><div id="dvcnt_T_PayDetailsJobAssignment">@ViewBag.T_PayDetailsJobAssignmentCount</div></span>
		 </a></li>
		 <li @(!User.CanView("JournalEntry")?"style=display:none;":"")><a onclick="LoadTab('JournalEntryToT_JobAssignmentRelation','@User.JavaScriptEncodedName@Model.Id','@Url.Action("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_JobAssignment", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry", TabToken = DateTime.Now.Ticks })')" href="#JournalEntryToT_JobAssignmentRelation" data-toggle="tab" alt="Job Assignment Journal" title="Job Assignment Journal">
		 Job Assignment Journal
		 </a></li>

    </ul>
		<div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
@using (Html.BeginForm("Edit","T_JobAssignment",new {UrlReferrer =Convert.ToString(ViewData["T_JobAssignmentParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data",@id="frmT_JobAssignment" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48911">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Employee Assigned" title="Employee Assigned"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#employeeassignedbody"><span class="glyphicon glyphicon-chevron-down"></span> Employee Assigned</a></h3>
                               </div>
							  <div class="panel-body panel-collapse in" id="employeeassignedbody">					
				@if(User.CanView("T_JobAssignment","T_EmployeeJobAssignmentID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeJobAssignmentID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeJobAssignmentID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_JobAssignment", "T_EmployeeJobAssignmentID"))
		{
			@Html.DropDownList("T_EmployeeJobAssignmentID", null, "-- Select --", new {@lock="true" ,   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeJobAssignmentID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeJobAssignmentID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeJobAssignmentID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeJobAssignmentID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeJobAssignmentID)
									@if (User.CanAdd("T_Employee"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Employee"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_employeejobassignment.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeejobassignment == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_employeejobassignment.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeJobAssignmentID, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_EmployeePercent"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeePercent">
							<div class='form-group' title="Employee  Percent (%)">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeePercent)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_EmployeePercent,  getHtmlAttributes("T_EmployeePercent"))
									@Html.ValidationMessageFor(model => model.T_EmployeePercent)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_EmployeePercent, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_StartDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_StartDate">
							  <div class="form-group" title="Start  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_StartDate) <span class="text-danger-reg">*</span></label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_StartDate">
 @Html.TextBoxFor(model => model.T_StartDate, "{0:MM/dd/yyyy}", User.CanEdit("T_JobAssignment", "T_StartDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_StartDate)

								</div>
                                </div>
								@if(User.CanEdit("T_JobAssignment", "T_StartDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_StartDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_StartDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_StartDate, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_EndDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EndDate">
							  <div class="form-group" title="End  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EndDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_EndDate">
 @Html.TextBoxFor(model => model.T_EndDate, "{0:MM/dd/yyyy}", User.CanEdit("T_JobAssignment", "T_EndDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_EndDate)

								</div>
                                </div>
								@if(User.CanEdit("T_JobAssignment", "T_EndDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_EndDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_EndDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_EndDate, new { @class = "form-control" })}



@if(User.CanView("T_JobAssignment","T_Primary"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Primary">
						<div class="form-group" title="Primary">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_Primary) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_Primary", Model.T_Primary.HasValue ? Model.T_Primary : false)
                            @Html.ValidationMessageFor(model => model.T_Primary)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_Primary, new { @class = "form-control" })}



@if(User.CanView("T_JobAssignment","T_Active"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Active">
						<div class="form-group" title="Active">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_Active) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_Active", Model.T_Active.HasValue ? Model.T_Active : false)
                            @Html.ValidationMessageFor(model => model.T_Active)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_Active, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48913">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
											
									<h3 class="panel-title" alt="Position Details" title="Position Details">Position Details</h3>
								</div>
                                <div class="panel-body">
				@if(User.CanView("T_JobAssignment","T_PositionJobAssignmentID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_PositionJobAssignmentID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_PositionJobAssignmentID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_JobAssignment", "T_PositionJobAssignmentID"))
		{
			@Html.DropDownList("T_PositionJobAssignmentID", null, "-- Select --", new {  @required ="required",  @derivedurl = Url.Action("GetDerivedDetails", "T_JobAssignment", new { IgnoreEditable = Convert.ToString(ViewData["AssociatedType"])}),   @onchange = Html.Raw("FillDerivedDetails(this,event);") ,  @class = "chosen-select form-control", @HostingName = "T_Position", @dataurl = Url.Action("GetAllValue", "T_Position",new { caller = "T_PositionJobAssignmentID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_PositionJobAssignmentID, new { @class = "form-control" })
			@Html.DropDownList("T_PositionJobAssignmentID", null, "-- Select --", new {  @required ="required",    @onchange = Html.Raw("FillDerivedDetails(this,event);") ,  @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Position", @dataurl = Url.Action("GetAllValue", "T_Position",new { caller = "T_PositionJobAssignmentID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_PositionJobAssignmentID)
									@if (User.CanAdd("T_Position"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Position"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Position Number','dvPopup','" + Url.Action("CreateQuick", "T_Position", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Position"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Position" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Position" target="_blank" href="@Url.Action(User.CanEdit("T_Position") ? "Edit" : "Details", "T_Position", new { Id = Html.DisplayFor(model => model.t_positionjobassignment.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_positionjobassignment == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Position").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Position").attr("title", '@Model.t_positionjobassignment.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_PositionJobAssignmentID, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_PositionLevel"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_PositionLevel">
							<div class='form-group' title="Position Level">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_PositionLevel)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_PositionLevel,  getHtmlAttributes("T_PositionLevel"))
									@Html.ValidationMessageFor(model => model.T_PositionLevel)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_PositionLevel, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_RoleCode"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_RoleCode">
							<div class='form-group' title="Role Code">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_RoleCode)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_RoleCode,  getHtmlAttributes("T_RoleCode"))
									@Html.ValidationMessageFor(model => model.T_RoleCode)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_RoleCode, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_ClassCode"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ClassCode">
							<div class='form-group' title="Class Code">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_ClassCode)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_ClassCode,  getHtmlAttributes("T_ClassCode"))
									@Html.ValidationMessageFor(model => model.T_ClassCode)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_ClassCode, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_WorkersCompCode"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_WorkersCompCode">
							<div class='form-group' title="Workers Comp Code">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_WorkersCompCode)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_WorkersCompCode,  getHtmlAttributes("T_WorkersCompCode"))
									@Html.ValidationMessageFor(model => model.T_WorkersCompCode)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_WorkersCompCode, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_SOCCode"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_SOCCode">
							<div class='form-group' title="SOC Code as per PMIS">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_SOCCode)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_SOCCode,  getHtmlAttributes("T_SOCCode"))
									@Html.ValidationMessageFor(model => model.T_SOCCode)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_SOCCode, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_OvertimeEligibility"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_OvertimeEligibility">
							<div class='form-group' title="Overtime Eligibility">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_OvertimeEligibility)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_OvertimeEligibility,  getHtmlAttributes("T_OvertimeEligibility"))
									@Html.ValidationMessageFor(model => model.T_OvertimeEligibility)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_OvertimeEligibility, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48910">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
											
									<h3 class="panel-title" alt="Assignment Details" title="Assignment Details">Assignment Details</h3>
								</div>
                                <div class="panel-body">
				@if(User.CanView("T_JobAssignment","T_JobAssignmentReasonID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_JobAssignmentReasonID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_JobAssignmentReasonID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_JobAssignment", "T_JobAssignmentReasonID"))
		{
			@Html.DropDownList("T_JobAssignmentReasonID", null, "-- Select --", new {  @required ="required",      @class = "chosen-select form-control", @HostingName = "T_ReasonforHire", @dataurl = Url.Action("GetAllValue", "T_ReasonforHire",new { caller = "T_JobAssignmentReasonID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_JobAssignmentReasonID, new { @class = "form-control" })
			@Html.DropDownList("T_JobAssignmentReasonID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_ReasonforHire", @dataurl = Url.Action("GetAllValue", "T_ReasonforHire",new { caller = "T_JobAssignmentReasonID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_JobAssignmentReasonID)
									@if (User.CanAdd("T_ReasonforHire"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_ReasonforHire"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Job Assignment Reason','dvPopup','" + Url.Action("CreateQuick", "T_ReasonforHire", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_ReasonforHire"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_ReasonforHire" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_ReasonforHire" target="_blank" href="@Url.Action(User.CanEdit("T_ReasonforHire") ? "Edit" : "Details", "T_ReasonforHire", new { Id = Html.DisplayFor(model => model.t_jobassignmentreason.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_jobassignmentreason == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_ReasonforHire").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_ReasonforHire").attr("title", '@Model.t_jobassignmentreason.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_JobAssignmentReasonID, new { @class = "form-control" })}
				@if(User.CanView("T_JobAssignment","T_JobAssignmentUnitXID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_JobAssignmentUnitXID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_JobAssignmentUnitXID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_JobAssignment", "T_JobAssignmentUnitXID"))
		{
			@Html.DropDownList("T_JobAssignmentUnitXID", null, "-- Select --", new {  @required ="required",  @derivedurl = Url.Action("GetDerivedDetails", "T_JobAssignment", new { IgnoreEditable = Convert.ToString(ViewData["AssociatedType"])}),   @onchange = Html.Raw("FillDerivedDetails(this,event);") ,  @class = "chosen-select form-control", @HostingName = "T_UnitX", @dataurl = Url.Action("GetAllValue", "T_UnitX",new { caller = "T_JobAssignmentUnitXID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_JobAssignmentUnitXID, new { @class = "form-control" })
			@Html.DropDownList("T_JobAssignmentUnitXID", null, "-- Select --", new {  @required ="required",    @onchange = Html.Raw("FillDerivedDetails(this,event);") ,  @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_UnitX", @dataurl = Url.Action("GetAllValue", "T_UnitX",new { caller = "T_JobAssignmentUnitXID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_JobAssignmentUnitXID)
									@if (User.CanAdd("T_UnitX"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_UnitX"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','UnitX','dvPopup','" + Url.Action("CreateQuick", "T_UnitX", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_UnitX"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_UnitX" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_UnitX" target="_blank" href="@Url.Action(User.CanEdit("T_UnitX") ? "Edit" : "Details", "T_UnitX", new { Id = Html.DisplayFor(model => model.t_jobassignmentunitx.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_jobassignmentunitx == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_UnitX").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_UnitX").attr("title", '@Model.t_jobassignmentunitx.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_JobAssignmentUnitXID, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_CostCenter"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CostCenter">
							<div class='form-group' title="Cost  Center">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_CostCenter)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_CostCenter,  getHtmlAttributes("T_CostCenter"))
									@Html.ValidationMessageFor(model => model.T_CostCenter)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_CostCenter, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_Program"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Program">
							<div class='form-group' title="Program">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Program)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Program,  getHtmlAttributes("T_Program"))
									@Html.ValidationMessageFor(model => model.T_Program)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_Program, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_DepartmentArea"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_DepartmentArea">
							<div class='form-group' title="Department Area">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_DepartmentArea)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_DepartmentArea,  getHtmlAttributes("T_DepartmentArea"))
									@Html.ValidationMessageFor(model => model.T_DepartmentArea)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_DepartmentArea, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_Department"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Department">
							<div class='form-group' title="Department">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Department)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Department,  getHtmlAttributes("T_Department"))
									@Html.ValidationMessageFor(model => model.T_Department)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_Department, new { @class = "form-control" })}
				@if(User.CanView("T_JobAssignment","T_JobAssignmentManagerEmployeeID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_JobAssignmentManagerEmployeeID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_JobAssignmentManagerEmployeeID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_JobAssignment", "T_JobAssignmentManagerEmployeeID"))
		{
			@Html.DropDownList("T_JobAssignmentManagerEmployeeID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_JobAssignmentManagerEmployeeID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_JobAssignmentManagerEmployeeID, new { @class = "form-control" })
			@Html.DropDownList("T_JobAssignmentManagerEmployeeID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_JobAssignmentManagerEmployeeID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_JobAssignmentManagerEmployeeID)
									@if (User.CanAdd("T_Employee"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Employee"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Manager','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_jobassignmentmanageremployee.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_jobassignmentmanageremployee == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_jobassignmentmanageremployee.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_JobAssignmentManagerEmployeeID, new { @class = "form-control" })}
				@if(User.CanView("T_JobAssignment","T_EmployeeSupervisorID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeSupervisorID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeSupervisorID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_JobAssignment", "T_EmployeeSupervisorID"))
		{
			@Html.DropDownList("T_EmployeeSupervisorID", null, "-- Select --", new {  @derivedurl = Url.Action("GetDerivedDetails", "T_JobAssignment", new { IgnoreEditable = Convert.ToString(ViewData["AssociatedType"])}),   @onchange = Html.Raw("FillDerivedDetails(this,event);") ,  @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeSupervisorID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeSupervisorID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeSupervisorID", null, "-- Select --", new {    @onchange = Html.Raw("FillDerivedDetails(this,event);") ,  @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeSupervisorID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeSupervisorID)
									@if (User.CanAdd("T_Employee"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Employee"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Supervisor','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_employeesupervisor.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeesupervisor == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_employeesupervisor.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeSupervisorID, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment","T_SupervisorEmail"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_SupervisorEmail">
							<div class='form-group' title="Supervisor Email Address">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_SupervisorEmail)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_SupervisorEmail,  getHtmlAttributes("T_SupervisorEmail"))
									@Html.ValidationMessageFor(model => model.T_SupervisorEmail)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_SupervisorEmail, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48912">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Notes" title="Notes"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#notesbody"><span class="glyphicon glyphicon-chevron-down"></span> Notes</a></h3>
                               </div>
							  <div class="panel-body panel-collapse collapse" id="notesbody">					
@if(User.CanView("T_JobAssignment","T_Notes"))
{
					<div class='col-sm-12 col-md-12 col-xs-12' id="dvT_Notes">
							<div class='form-group' title="Notes">
								<label class="col-sm-2 col-md-2 col-xs-12" >@Html.LabelFor(model => model.T_Notes) </label>
                                <div class="input-group col-sm-10 col-md-10 col-xs-12">
								@Html.TextAreaFor(model => model.T_Notes, getHtmlAttributes("T_Notes"))
									@Html.ValidationMessageFor(model => model.T_Notes)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Notes, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
            </div>
        </div>
		</div>
		 @Html.AntiForgeryToken();
		 <a class="btn btn-default btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index","T_JobAssignment")');" alt="Cancel" title="Cancel">Cancel</a>
		 @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_JobAssignmentParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix", @alt="Cancel", @title="Cancel" })*@
		 if (EditPermission)
         {
 				<input type="submit" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix"  alt="Save" title="Save"/>
				<input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev"/>
				<input type="submit" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay"/>
		}	
				<input type="hidden" name="hdncommand" value="" />
				<input type="hidden" name="hdnNextPrevId" value="" />
}
 @{ var dropmenubottom = false; }
<div class="dropdown pull-left formbuttonfix"  id="AddAssociationdropmenubottomT_JobAssignment">
<button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
            Add Association
            <span class="caret"></span>
        </button>
		 <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1">
			@if (User.CanAdd("T_Comment"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_JobAssignmentComments", 
						HostingEntityName = "T_JobAssignment",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Comment
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_PayDetails"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_PayDetails",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_PayDetailsJobAssignment", 
						HostingEntityName = "T_JobAssignment",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Salary 
                </a>
				</li>
            }

			
</ul>
</div>
@if(!dropmenubottom || !EditPermission)
{
    <script>
        $("#AddAssociationdropmenubottomT_JobAssignment").hide();
    </script>
}
<div class="clearfix" style="clear:both; margin-bottom:8px"></div>
</div>
 <div class="tab-pane fade in" id="T_JobAssignmentComments">
	@if (User.CanView("T_Comment"))
	{
	  // Html.RenderAction("Index", "T_Comment", new {RenderPartial=true, HostingEntity = "T_JobAssignment", HostingEntityID = @Model.Id, AssociatedType = "T_JobAssignmentComments" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_PayDetailsJobAssignment">
	@if (User.CanView("T_PayDetails"))
	{
	  // Html.RenderAction("Index", "T_PayDetails", new {RenderPartial=true, HostingEntity = "T_JobAssignment", HostingEntityID = @Model.Id, AssociatedType = "T_PayDetailsJobAssignment" }); 
	}
  </div>
 <div class="tab-pane fade in" id="JournalEntryToT_JobAssignmentRelation">
			 @if (User.CanView("JournalEntry"))
			 {
			  // Html.RenderAction("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_JobAssignment", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry" });
			 }
  </div>

</div> <!-- /tab-content --><br />

<br/>
</div>
	<script>
	</script>
	

@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_JobAssignment").ToList();

if ((businessrule != null && businessrule.Count > 0) )
{
var ruleids = businessrule.Select(q => q.Id).ToList();
var typelist  = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());

    <script>
		$(document).ready(function () {
				document.getElementById("ErrMsg").innerHTML = "";
				var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";

 form = $("#frmT_JobAssignment").serialize();
				dataurl = "@Url.Action("businessruletype", "T_JobAssignment", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_JobAssignment", false, "ErrMsg", form);
				//business rules on inline associations

    });
</script>
<script>
    $("form").submit(function (event) {
	if (!$("#frmT_JobAssignment").valid()) return;
			document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
            var dataurl = "";
            var form = "";
            var inlinecount = "0";
 form = $("#frmT_JobAssignment").serialize();
    
				 dataurl = "@Url.Action("businessruletype", "T_JobAssignment", new { ruleType = "OnEdit"})";
                 flag = ApplyBusinessRuleOnSubmit(dataurl, "T_JobAssignment", false, "ErrMsg", form);

  				 //business rules on inline associations
               
			 if (flag)
				{
				                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
					if ($(document.activeElement).attr('id') == "nextEdit" || $(document.activeElement).attr('id') == "prevEdit")
			         $('input:hidden[name="hdncommand"]').val("SaveNextPrev");
					 $("#frmT_JobAssignment").find(':input').removeAttr('disabled');
					}
            return flag;
		});
</script>
}
 else
    {
       <script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmT_JobAssignment").valid()) return;
        var $this = $(this);
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
    });
	</script>
    }
 
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
		focusOnControl('frmT_JobAssignment');
        }
        catch (ex) { }
    });
	 $(document).ready(function () {
		var RecIdEdit = $("#frmT_JobAssignment").find("input:hidden[name='Id']").val();
        $("#EntityT_JobAssignmentDisplayValueEdit").val(RecIdEdit);

		var textedit = $("option:selected", $("#EntityT_JobAssignmentDisplayValueEdit")).text();
		$("#EntityT_JobAssignmentDisplayValueEdit").attr('data-toggle', 'tooltip')
		$("#EntityT_JobAssignmentDisplayValueEdit").attr('title', textedit);

        var lastOptionValEdit = $('#EntityT_JobAssignmentDisplayValueEdit option:last-child').val();
        var fristOptionValEdit = $('#EntityT_JobAssignmentDisplayValueEdit option:first-child').val();
        if (lastOptionValEdit == RecIdEdit) {
            $('#nextEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
        }
        if (fristOptionValEdit == RecIdEdit)
            $('#prevEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
    });
</script>


