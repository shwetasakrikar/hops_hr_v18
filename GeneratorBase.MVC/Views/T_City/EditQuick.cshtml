@model GeneratorBase.MVC.Models.T_City
@using PagedList;
@{
    ViewBag.Title = "Edit City";
	var EditPermission = User.CanEditItem("T_City", Model, User);
	var DeletePermission = User.CanDeleteItem("T_City", Model, User);
	Layout = null;
	
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("T_City", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
		 if ($('#EntityT_CityDisplayValue').has('option').length > 0) {
			var RecId = $("#Id").val()
            $("#T_CityDD").append($("#EntityT_CityDisplayValue").html());
            $("#T_CityDD").val(RecId);

			var text = $("option:selected", $("#T_CityDD")).text();
            $("#T_CityDD").attr('data-toggle', 'tooltip')
            $("#T_CityDD").attr('title', text);

            var lastOptionVal = $('#T_CityDD option:last-child').val();
            var fristOptionVal = $('#T_CityDD option:first-child').val();
            if (lastOptionVal == RecId)
			{
                $('#next').hide();
				$('#SaveAndContinue').hide();
				}

            if (fristOptionVal == RecId)
                $('#prev').hide();
			} else {  $('#dvsavenext').hide(); $('#SaveAndContinue').hide(); }
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				if( '@Convert.ToBoolean(ViewData["IsFilter"])'!="False")
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				$('#' + hostingEntityName + 'ID').trigger("change");
				 $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });		
						
            }
        }
        catch (ex) { }
    });
</script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>

@{
    if (!string.IsNullOrEmpty(ViewBag.T_CityIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CityIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CityIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CityIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CityIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_CityIsSetValueUIRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<div class="row">
    <div class="col-lg-12">
        @*<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
		<input type="hidden" id="ErrMsg" />
		<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
     <div class="col-sm-6 col-md-6 col-xs-12" style="margin-top: -12px;">
            <h2 class="text-primary">
                <span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
            </h2>
        </div>
        @if (EditPermission)
            {
            <div class="col-sm-6 col-md-6 col-xs-12" id="dvsavenext">
                <button class="btn btn-default btn-xs pull-right" id="next" onclick="@Html.Raw("nextFun('T_City')")">Next >></button>
                @Html.DropDownList("T_CityDD", null, null, new { @onchange = "FillDisplayValueQEdit('T_City')", @required = "required", @class = "pull-right", @Style = "height: 22px;width: 170px;" })
                <button class="btn btn-default btn-xs pull-right" id="prev" onclick="@Html.Raw("prevFun('T_City')")"><< Prev</button>
            </div>
        }
    </div>
    <!-- /.col-lg-12 -->
	<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<br/>
</div>
	
@using (Html.BeginForm("EditQuick","T_City",new {UrlReferrer =Convert.ToString(ViewData["T_CityParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmQEditT_City" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
	 <div class="row">
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						    @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
											<div class="row">
				@if(User.CanView("T_City","T_Name"))
{


					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
							<div class='form-group' title="Name">
								<label  >@Html.LabelFor(model => model.T_Name)  <span class="text-danger-reg">*</span> </label>
                                
											
									@Html.TextBoxFor(model => model.T_Name,  getHtmlAttributes("T_Name"))
									@Html.ValidationMessageFor(model => model.T_Name)
									
								
                             </div>
						</div>

				
					


} else { @Html.HiddenFor(model => model.T_Name, new { @class = "form-control" })}
@if(User.CanView("T_City","T_Description"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Description">
							<div class='form-group' title="Description">
								<label  >@Html.LabelFor(model => model.T_Description) </label>
                                
								@Html.TextAreaFor(model => model.T_Description, getHtmlAttributes("T_Description"))
									@Html.ValidationMessageFor(model => model.T_Description)
								
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_Description, new { @class = "form-control" })}
				@if(User.CanView("T_City","T_CityCountryID"))
				{

				   <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CityCountryID">
                        <div class='form-group'>
                            <label  >@Html.LabelFor(model => model.T_CityCountryID) </label>
							
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_City", "T_CityCountryID"))
		{
			@Html.DropDownList("T_CityCountryID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Country", @dataurl = Url.Action("GetAllValue", "T_Country",new { caller = "T_CityCountryID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_CityCountryID, new { @class = "form-control" })
			@Html.DropDownList("T_CityCountryID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Country", @dataurl = Url.Action("GetAllValue", "T_Country",new { caller = "T_CityCountryID" }) })
		}
                                @Html.ValidationMessageFor(model => model.T_CityCountryID)
								 
							</div>
							
                        </div>
                    </div>
                 
					} else { @Html.HiddenFor(model => model.T_CityCountryID, new { @class = "form-control" })}
				@if(User.CanView("T_City","T_CityStateID"))
				{

				   <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CityStateID">
                        <div class='form-group'>
                            <label  >@Html.LabelFor(model => model.T_CityStateID) </label>
							
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_City", "T_CityStateID"))
		{
			@Html.DropDownList("T_CityStateID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_State", @dataurl = Url.Action("GetAllValue", "T_State",new { caller = "T_CityStateID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_CityStateID, new { @class = "form-control" })
			@Html.DropDownList("T_CityStateID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_State", @dataurl = Url.Action("GetAllValue", "T_State",new { caller = "T_CityStateID" }) })
		}
                                @Html.ValidationMessageFor(model => model.T_CityStateID)
								 
							</div>
							
                        </div>
                    </div>
                 
					} else { @Html.HiddenFor(model => model.T_CityStateID, new { @class = "form-control" })}
       </div>


	            </div>
        </div>
	</div>
</div>
		 @Html.AntiForgeryToken();
		 var businessrule1 = User.businessrules.Where(p => p.EntityName == "T_City").ToList();
		 var lstinlineentityname = "";
		 var lstinlineassocdispname ="";
		 var lstinlineassocname = "";
		 <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
		 if (EditPermission)
         {
			    <input type="submit" id="command" name="command" value="Save & Close" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,true,'T_City','@ViewData["AssociatedType"]',false,'@businessrule1',@businessrule1.Count,'OnEdit','ErrMsg',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname');" />
				<input type="submit" id="sevranBtn" style="display:none;" name="command" value="Save" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,true,'T_City','@ViewData["AssociatedType"]',false,'@businessrule1',@businessrule1.Count,'OnEdit','ErrMsg',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname','True');" />
                <button type="button" id="SaveAndContinue" name="SaveAndContinue" class="btn btn-primary btn-sm" onclick="@Html.Raw("SaveAndContinueEdit('T_City',event)")">Save & Next</button>
				<input type="hidden" name="hdncommand" value="" />
  		 }	
}
<script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
<script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>

<script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmQEditT_City").valid()) return;
	
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
</script>
@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_City").ToList();


	


if ((businessrule != null && businessrule.Count > 0) )
{
var ruleids = businessrule.Select(q => q.Id).ToList();
var typelist  = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());

    <script>
    $(document).ready(function () {
	document.getElementById("ErrMsg").innerHTML = "";
		 var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";

				 form = $("#frmQEditT_City").serialize();
					 dataurl = "@Url.Action("businessruletype", "T_City", new { ruleType = "OnEdit"})";
            ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_City", false, "ErrMsg", form);
			//business rules on inline associations
    });
</script>
<script>
    $("form").submit(function (event) {
	if (!$("#frmQEditT_City").valid()) return;
	document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
		var form = $("#frmQEditT_City").serialize();
					});
</script>
}
 
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
            document.getElementsByTagName("body")[0].focus();
            $("#addPopup").removeAttr("tabindex");
            var cltcoll = $("#dvPopup").find('input[type=text]:not([class=hidden]):not([readonly]),textarea:not([readonly])')
            var cltid = "";
            $(cltcoll).each(function () {
			  if ($(this).attr("id") == undefined)
                    return
                var dvhidden = $("#dv" + $(this).attr("id"));
				var dvDate = $("#datetimepicker" + $(this).attr("id")).attr("id");
                if (!(dvhidden.css('display') == 'none') && dvDate == undefined) {
                    cltid = $(this);
                    return false;
                }
            });
            if (cltid != "" && cltid != undefined)
                setTimeout(function () { $(cltid).focus(); }, 500)
        }
        catch (ex) { }
    });
</script>

