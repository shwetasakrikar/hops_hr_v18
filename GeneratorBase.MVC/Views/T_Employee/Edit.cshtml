@model GeneratorBase.MVC.Models.T_Employee
@using PagedList;
@{
    ViewBag.Title = "Edit Employee";
	var EditPermission = User.CanEditItem("T_Employee", Model, User);
	var DeletePermission = User.CanDeleteItem("T_Employee", Model, User);
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Employee");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Employee";
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_PriorServiceinmonths")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_CurrentServiceinmonths")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_Employee", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
             if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				// $('#' + hostingEntityName + 'ID').trigger("change");
				  $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
			if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			}
			 
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_EmployeeIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_EmployeeIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_EmployeeIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_EmployeeIsGroupsHiddenRule);
    }
}

@{
    if (!string.IsNullOrEmpty(ViewBag.T_EmployeeIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_EmployeeIsSetValueUIRule);
    }
}
		@if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
    {
        <div class="alert alert-danger" role="alert">
            <a class="close" data-dismiss="alert">&times;</a>
            @foreach (var modelError in Html.ViewData.ModelState.SelectMany(keyValuePair => keyValuePair.Value.Errors))
            {
                <p>@modelError.ErrorMessage</p>
            }
        </div>
    }
	<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title" >
            <i class="glyphicon glyphicon-edit text-primary"></i> @EntityDisplayName  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>

			   <div class="btn-group pull-right" style="margin-top:3px;">
			  


            <a data-toggle="dropdown" class="btn btn-xs dropdown-toggle" alt="Action" title="Action">
                Action
                <span class="caret" style="margin-bottom:2px">    </span>
            </a>
			<ul class="dropdown-menu pull-left">
			
				<li>
                    @if (EditPermission && User.CanUseVerb("SendEmailtoIT","T_Employee",User))
                    {
                        <a onclick="ExcuteSingleVerb('T_Employee',this);" dataurl="@Url.Action("SendEmailtoIT","T_Employee", new { id = Model.Id},null)"><i class="glyphicon glyphicon-edit"></i>  Send Email to IT</a>
                    }
                </li>
				<li>
                    @if (EditPermission)
                    {
                        <a href="@Url.Action("Edit","T_Employee", new { id = Model.Id,  UrlReferrer = Request.UrlReferrer, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (EditPermission && User.CanDelete("T_Employee"))
                    {
                        <a href="@Url.Action("Delete", "T_Employee", new {UrlReferrer = Request.UrlReferrer, id = Model.Id, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu pull-left" id="AddAssociationdropmenuT_Employee">
	 @{ var dropmenu = false; }
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if (User.CanAdd("T_ServiceRecord"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ServiceRecord", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeEmploymentProfile", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Service Record
						</a>
					</li>
				}
							@if (User.CanAdd("T_JobAssignment"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeJobAssignment", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Job Assignment
						</a>
					</li>
				}
							@if (User.CanAdd("T_PayDetails"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_PayDetails", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeePayDetails", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Salary And Bonus
						</a>
					</li>
				}
							@if (User.CanAdd("T_Education"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Education", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeEducation", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Education
						</a>
					</li>
				}
							@if (User.CanAdd("T_BackgroundCheck"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_BackgroundCheck", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeCriminalBackgroundCheck", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Background Check 
						</a>
					</li>
				}
							@if (User.CanAdd("T_DrugAlcoholTest"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_DrugAlcoholTest", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeDrugAlcoholTest", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Drug & Alcohol Test
						</a>
					</li>
				}
							@if (User.CanAdd("T_EmployeeInjury"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_EmployeeInjury", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeEmployeeInjury", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Injury
						</a>
					</li>
				}
							@if (User.CanAdd("T_Accommodation"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Accommodation", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeAccomodation", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Accommodation
						</a>
					</li>
				}
							@if (User.CanAdd("T_LeaveProfile"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_LeaveProfile", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeLeaveProfile", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Leave 
						</a>
					</li>
				}
							@if (User.CanAdd("T_Licenses"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Licenses", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_LicenseRecords", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Licenses
						</a>
					</li>
				}
							@if (User.CanAdd("T_JobAssignment"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeSupervisor", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Supervisor For
						</a>
					</li>
				}
							@if (User.CanAdd("T_JobAssignment"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_JobAssignmentManagerEmployee", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Manager For
						</a>
					</li>
				}
							@if (User.CanAdd("T_UnitX"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_UnitX", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeUnitXHead", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Head For 
						</a>
					</li>
				}
							@if (User.CanAdd("T_UnitX"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_UnitX", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeAdministrator", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Administrator For
						</a>
					</li>
				}
							@if (User.CanAdd("T_Comment"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeComments", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Employee Comments
						</a>
					</li>
				}
							@if (User.CanAdd("FileDocument"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "FileDocument", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeDocuments", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Document
						</a>
					</li>
				}
			</ul>
</li>
@if(!dropmenu)
{
    <script>
        $("#AddAssociationdropmenuT_Employee").hide();
    </script>
}
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu pull-left">
	<a tabindex="-1" href="#" style="margin-bottom:10px;">Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "T_Department", new {sourceEntity="T_Employee",id=Model.Id}, null)">Department</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Position", new {sourceEntity="T_Employee",id=Model.Id}, null)">Position</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_DepartmentArea", new {sourceEntity="T_Employee",id=Model.Id}, null)">Department Area</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_ClaimType", new {sourceEntity="T_Employee",id=Model.Id}, null)">Claim Type</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Restrictions", new {sourceEntity="T_Employee",id=Model.Id}, null)">Restrictions</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_UnitX", new {sourceEntity="T_Employee",id=Model.Id}, null)">UnitX</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Unit", new {sourceEntity="T_Employee",id=Model.Id}, null)">Unit</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_SalaryRange", new {sourceEntity="T_Employee",id=Model.Id}, null)">Salary Range</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_FacilityConfiguration", new {sourceEntity="T_Employee",id=Model.Id}, null)">Facility Configuration</a>
</li>
</ul>
</li>
			</ul>
		</div>
	  
  <div class="btn-group pull-right" style="margin-top:3px; margin-right:3px">
	  <a href="#" class="btn btn-xs closeall"><i class="glyphicon glyphicon-chevron-up"></i> Collapse All</a> <a href="#" class="btn btn-xs openall"><i class="glyphicon glyphicon-chevron-down"></i> Expand All</a>
</div>

        </h1>

     <h2 class="text-primary" style="padding:0px 5px 15px 0px">
	  <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
			@if (EditPermission)
			{	
				<div class="pull-right" style="margin-top:-3px">
					<button class="btn btn-default btn-xs pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('T_Employee',event,'hdnNextPrevId')")" alt="Next" title="Next">Next >></button>
					@Html.DropDownList("EntityT_EmployeeDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('T_Employee','frmT_Employee','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 22px;width: 170px; font-size:12px; color:#333;" })
					<button class="btn btn-default btn-xs pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('T_Employee',event,'hdnNextPrevId')")" alt="Prev" title="Prev"><< Prev</button>
				</div>
			}
	 </h2>
		
    </div>
    <!-- /.col-lg-12 -->
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>

<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
 <div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">Details</a></li>
		 <li @(!User.CanView("T_ServiceRecord") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeEmploymentProfile','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_ServiceRecord", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeEmploymentProfile",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeEmploymentProfile" data-toggle="tab" alt="Service Record" title="Service Record">Service Record
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeEmploymentProfile">@ViewBag.T_EmployeeEmploymentProfileCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_JobAssignment") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeJobAssignment','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_JobAssignment", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeJobAssignment",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeJobAssignment" data-toggle="tab" alt="Job Assignment" title="Job Assignment">Job Assignment
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeJobAssignment">@ViewBag.T_EmployeeJobAssignmentCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_PayDetails") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeePayDetails','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_PayDetails", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeePayDetails",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeePayDetails" data-toggle="tab" alt="Salary And Bonus" title="Salary And Bonus">Salary And Bonus
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeePayDetails">@ViewBag.T_EmployeePayDetailsCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_Education") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeEducation','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_Education", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeEducation",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeEducation" data-toggle="tab" alt="Education" title="Education">Education
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeEducation">@ViewBag.T_EmployeeEducationCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_BackgroundCheck") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeCriminalBackgroundCheck','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_BackgroundCheck", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeCriminalBackgroundCheck",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeCriminalBackgroundCheck" data-toggle="tab" alt="Background Check " title="Background Check ">Background Check 
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeCriminalBackgroundCheck">@ViewBag.T_EmployeeCriminalBackgroundCheckCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_DrugAlcoholTest") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeDrugAlcoholTest','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_DrugAlcoholTest", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeDrugAlcoholTest",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeDrugAlcoholTest" data-toggle="tab" alt="Drug & Alcohol Test" title="Drug & Alcohol Test">Drug & Alcohol Test
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeDrugAlcoholTest">@ViewBag.T_EmployeeDrugAlcoholTestCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_EmployeeInjury") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeEmployeeInjury','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_EmployeeInjury", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeEmployeeInjury",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeEmployeeInjury" data-toggle="tab" alt="Injury" title="Injury">Injury
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeEmployeeInjury">@ViewBag.T_EmployeeEmployeeInjuryCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_Accommodation") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeAccomodation','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_Accommodation", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeAccomodation",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeAccomodation" data-toggle="tab" alt="Accommodation" title="Accommodation">Accommodation
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeAccomodation">@ViewBag.T_EmployeeAccomodationCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_LeaveProfile") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeLeaveProfile','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_LeaveProfile", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeLeaveProfile",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeLeaveProfile" data-toggle="tab" alt="Leave " title="Leave ">Leave 
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeLeaveProfile">@ViewBag.T_EmployeeLeaveProfileCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_Licenses") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_LicenseRecords','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_Licenses", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_LicenseRecords",TabToken = DateTime.Now.Ticks,}))')" href="#T_LicenseRecords" data-toggle="tab" alt="Licenses" title="Licenses">Licenses
		 <span class="badge bg-blue"><div id="dvcnt_T_LicenseRecords">@ViewBag.T_LicenseRecordsCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_JobAssignment") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeSupervisor','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_JobAssignment", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeSupervisor",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeSupervisor" data-toggle="tab" alt="Supervisor For" title="Supervisor For">Supervisor For
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeSupervisor">@ViewBag.T_EmployeeSupervisorCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_JobAssignment") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_JobAssignmentManagerEmployee','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_JobAssignment", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_JobAssignmentManagerEmployee",TabToken = DateTime.Now.Ticks,}))')" href="#T_JobAssignmentManagerEmployee" data-toggle="tab" alt="Manager For" title="Manager For">Manager For
		 <span class="badge bg-blue"><div id="dvcnt_T_JobAssignmentManagerEmployee">@ViewBag.T_JobAssignmentManagerEmployeeCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_UnitX") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeUnitXHead','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_UnitX", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeUnitXHead",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeUnitXHead" data-toggle="tab" alt="Head For " title="Head For ">Head For 
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeUnitXHead">@ViewBag.T_EmployeeUnitXHeadCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_UnitX") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeAdministrator','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_UnitX", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeAdministrator",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeAdministrator" data-toggle="tab" alt="Administrator For" title="Administrator For">Administrator For
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeAdministrator">@ViewBag.T_EmployeeAdministratorCount</div></span>
		 </a></li>
		 <li @(!User.CanView("T_Comment") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeComments','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_Comment", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeComments",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeComments" data-toggle="tab" alt="Employee Comments" title="Employee Comments">Employee Comments
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeComments">@ViewBag.T_EmployeeCommentsCount</div></span>
		 </a></li>
		 <li @(!User.CanView("FileDocument") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_EmployeeDocuments','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "FileDocument", new {RenderPartial=true, HostingEntity ="T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeDocuments",TabToken = DateTime.Now.Ticks,}))')" href="#T_EmployeeDocuments" data-toggle="tab" alt="Document" title="Document">Document
		 <span class="badge bg-blue"><div id="dvcnt_T_EmployeeDocuments">@ViewBag.T_EmployeeDocumentsCount</div></span>
		 </a></li>
		 <li @(!User.CanView("JournalEntry")?"style=display:none;":"")><a onclick="LoadTab('JournalEntryToT_EmployeeRelation','@User.JavaScriptEncodedName@Model.Id','@Url.Action("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry", TabToken = DateTime.Now.Ticks })')" href="#JournalEntryToT_EmployeeRelation" data-toggle="tab" alt="Employee Journal" title="Employee Journal">
		 Employee Journal
		 </a></li>

    </ul>
		<div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
@using (Html.BeginForm("Edit","T_Employee",new {UrlReferrer =Convert.ToString(ViewData["T_EmployeeParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data",@id="frmT_Employee" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48895">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Initial Information" title="Initial Information"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#initialinformationbody"><span class="glyphicon glyphicon-chevron-down"></span> Initial Information</a></h3>
                               </div>
							  <div class="panel-body panel-collapse in" id="initialinformationbody">					
				@if(User.CanView("T_Employee","T_EmployeeAtFacilityID"))
				{
									 <div class='col-sm-4 col-md-4 col-xs-12' id="dvT_EmployeeAtFacilityID">
                        <div class='form-group'>
                            <label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeAtFacilityID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-5 col-md-5 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeAtFacilityID"))
		{
			@Html.DropDownList("T_EmployeeAtFacilityID", null, "-- Select --", new {  @required ="required",      @class = "chosen-select form-control", @HostingName = "T_Facility", @dataurl = Url.Action("GetAllValue", "T_Facility",new { caller = "T_EmployeeAtFacilityID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeAtFacilityID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeAtFacilityID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Facility", @dataurl = Url.Action("GetAllValue", "T_Facility",new { caller = "T_EmployeeAtFacilityID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeAtFacilityID)
									@if (User.CanAdd("T_Facility"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Facility"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Facility','dvPopup','" + Url.Action("CreateQuick", "T_Facility", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

															</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeAtFacilityID, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_PID"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_PID">
							<div class='form-group' title="Employee Number">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_PID)  <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_PID,  getHtmlAttributes("T_PID"))
									@Html.ValidationMessageFor(model => model.T_PID)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_PID, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_SSN"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_SSN">
							<div class='form-group' title="Social Security Number">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_SSN)   </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_SSN,  getHtmlAttributes("T_SSN"))
									@Html.ValidationMessageFor(model => model.T_SSN)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_SSN, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_DateOfBirth"))
{

						 <div class='col-sm-4 col-md-4 col-xs-12' id="dvT_DateOfBirth">
							  <div class="form-group" title="Date  Of  Birth">
                                <label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_DateOfBirth) </label>
								<div class="input-group col-sm-5 col-md-5 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_DateOfBirth">
 @Html.TextBoxFor(model => model.T_DateOfBirth, "{0:MM/dd/yyyy}", User.CanEdit("T_Employee", "T_DateOfBirth") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_DateOfBirth)

								</div>
                                </div>
								@if(User.CanEdit("T_Employee", "T_DateOfBirth"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_DateOfBirth').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_DateOfBirth').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_DateOfBirth, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeStatusID"))
				{
									 <div class='col-sm-4 col-md-4 col-xs-12' id="dvT_EmployeeStatusID">
                        <div class='form-group'>
                            <label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeStatusID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-5 col-md-5 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeStatusID"))
		{
			@Html.DropDownList("T_EmployeeStatusID", null, "-- Select --", new {  @required ="required",      @class = "chosen-select form-control", @HostingName = "T_EmployeeStatusCode", @dataurl = Url.Action("GetAllValue", "T_EmployeeStatusCode",new { caller = "T_EmployeeStatusID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeStatusID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeStatusID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_EmployeeStatusCode", @dataurl = Url.Action("GetAllValue", "T_EmployeeStatusCode",new { caller = "T_EmployeeStatusID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeStatusID)
									@if (User.CanAdd("T_EmployeeStatusCode"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_EmployeeStatusCode"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee Status','dvPopup','" + Url.Action("CreateQuick", "T_EmployeeStatusCode", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_EmployeeStatusCode"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_EmployeeStatusCode" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_EmployeeStatusCode" target="_blank" href="@Url.Action(User.CanEdit("T_EmployeeStatusCode") ? "Edit" : "Details", "T_EmployeeStatusCode", new { Id = Html.DisplayFor(model => model.t_employeestatus.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeestatus == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_EmployeeStatusCode").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_EmployeeStatusCode").attr("title", '@Model.t_employeestatus.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeStatusID, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_SAMAccount"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_SAMAccount">
							<div class='form-group' title="SAM Account">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_SAMAccount)   </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_SAMAccount,  getHtmlAttributes("T_SAMAccount"))
									@Html.ValidationMessageFor(model => model.T_SAMAccount)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_SAMAccount, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_LastName"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_LastName">
							<div class='form-group' title="Last Name">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_LastName)  <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_LastName,  getHtmlAttributes("T_LastName"))
									@Html.ValidationMessageFor(model => model.T_LastName)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_LastName, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_FirstName"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_FirstName">
							<div class='form-group' title="First Name">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_FirstName)  <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_FirstName,  getHtmlAttributes("T_FirstName"))
									@Html.ValidationMessageFor(model => model.T_FirstName)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_FirstName, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_MiddleName"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_MiddleName">
							<div class='form-group' title="Middle Name">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_MiddleName)   </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_MiddleName,  getHtmlAttributes("T_MiddleName"))
									@Html.ValidationMessageFor(model => model.T_MiddleName)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_MiddleName, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_Suffix"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_Suffix">
							<div class='form-group' title="Suffix">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_Suffix)   </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Suffix,  getHtmlAttributes("T_Suffix"))
									@Html.ValidationMessageFor(model => model.T_Suffix)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_Suffix, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_WorkEmail"))
{
				<div class='col-sm-4 col-md-4 col-xs-12' id="dvT_WorkEmail">
							<div class='form-group' title="Work  Email">
								<label class="col-sm-7 col-md-7 col-xs-12" >@Html.LabelFor(model => model.T_WorkEmail)   </label>
                                <div class="input-group col-sm-5 col-md-5 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_WorkEmail,  getHtmlAttributes("T_WorkEmail"))
									@Html.ValidationMessageFor(model => model.T_WorkEmail)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_WorkEmail, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord"))
{
                    <div class='col-sm-4 col-md-4 col-xs-12' style="display:none;">
                        <div class='form-group' style="width:100%;">
                            <label class="col-sm-7 col-md-7 col-xs-12">@Html.LabelFor(model => model.T_CurrentEmployeeEmploymentProfileID) </label>
							<div class="input-group col-sm-5 col-md-5 col-xs-12">
								@Html.DropDownList("T_CurrentEmployeeEmploymentProfileID", null, "--Select Service Record--", new { @onclick = Html.Raw("select('T_CurrentEmployeeEmploymentProfileID')"), @class = "form-control", @HostingName = "T_ServiceRecord" })
                                @Html.ValidationMessageFor(model => model.T_CurrentEmployeeEmploymentProfileID)								
                                <div class="input-group-btn">
                                  <a class="btn btn-default btn ie8fix" id="addT_ServiceRecord"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Service Record','dvPopup','" + Url.Action("CreateQuick", "T_ServiceRecord", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
										<span class="glyphicon glyphicon-plus-sign"></span>
                                    </a>
                                </div>								
							</div>
                        </div>
                    </div>
                            <div class="col-md-12 col-sm-12 col-xs-12 " id="dvT_CurrentEmployeeEmploymentProfileID">
                                <div class="panel panel-default AppForm">
                                  <div class="panel-sub-heading clearfix">
                                        <h3 class="panel-title" alt="T_CurrentEmployeeEmploymentProfile" title="T_CurrentEmployeeEmploymentProfile">@Html.LabelFor(model => model.T_CurrentEmployeeEmploymentProfileID)</h3>

                                    </div>
                                    <div class="panel-body">
                                        
	@if(Model.t_currentemployeeemploymentprofile != null && Model.t_currentemployeeemploymentprofile.T_IsCurrent.Value)
	{
									<div class="row">
                                            <div class="col-md-12 col-sm-12 col-xs-12">
                                                        <div>
 @{if (Model.t_currentemployeeemploymentprofile!=null) {Model.t_currentemployeeemploymentprofile.setDateTimeToClientTime();}}
@if (Model.t_currentemployeeemploymentprofile!=null)
{ 
   <div class='col-sm-6' style="display:none;">
    <div class='form-group'>
        <label class="col-xs-5">@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.Id)</label>
		@Html.HiddenFor(model => model.t_currentemployeeemploymentprofile.ConcurrencyKey)
        <div class="input-group col-xs-7">
            @Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.Id, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.Id)
        </div>
    </div>
</div>
}
					@if(User.CanView("T_ServiceRecord","T_EmployeeEmploymentProfileID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12' style="display: none" id="dvT_CurrentEmployeeEmploymentProfileID_T_EmployeeEmploymentProfileID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeEmploymentProfileID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_ServiceRecord", "T_EmployeeEmploymentProfileID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeEmploymentProfileID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmployeeEmploymentProfileID, "--Select--", new {   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeEmploymentProfileID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeeemploymentprofile.T_EmployeeEmploymentProfileID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeEmploymentProfileID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmployeeEmploymentProfileID, "--Select--", new {  @required ="required",     @class = "chosen-select form-control", @HostingName = "T_Employee", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeEmploymentProfileID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeEmploymentProfileID)
																					 @if (User.CanAdd("T_Employee"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_Employee" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_currentemployeeemploymentprofile.t_employeeemploymentprofile.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeeemploymentprofile == null || Model.t_currentemployeeemploymentprofile.t_employeeemploymentprofile== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_currentemployeeemploymentprofile.t_employeeemploymentprofile=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					@if(User.CanView("T_ServiceRecord","T_EmploymentRecordEmployeeTypeID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeEmploymentProfileID_T_EmploymentRecordEmployeeTypeID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordEmployeeTypeID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_ServiceRecord", "T_EmploymentRecordEmployeeTypeID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordEmployeeTypeID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmploymentRecordEmployeeTypeID, "--Select--", new {   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_EmployeeType", @dataurl = Url.Action("GetAllValue", "T_EmployeeType",new { caller = "T_EmploymentRecordEmployeeTypeID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeeemploymentprofile.T_EmploymentRecordEmployeeTypeID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordEmployeeTypeID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmploymentRecordEmployeeTypeID, "--Select--", new {  @required ="required",     @class = "chosen-select form-control", @HostingName = "T_EmployeeType", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_EmployeeType",new { caller = "T_EmploymentRecordEmployeeTypeID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordEmployeeTypeID)
																					 @if (User.CanAdd("T_EmployeeType"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_EmployeeType" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee Type','dvPopup','" + Url.Action("CreateQuick", "T_EmployeeType", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_EmployeeType"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_EmployeeType" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_EmployeeType" target="_blank" href="@Url.Action(User.CanEdit("T_EmployeeType") ? "Edit" : "Details", "T_EmployeeType", new { Id = Html.DisplayFor(model => model.t_currentemployeeemploymentprofile.t_employmentrecordemployeetype.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeeemploymentprofile == null || Model.t_currentemployeeemploymentprofile.t_employmentrecordemployeetype== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_EmployeeType").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_EmployeeType").attr("title", '@Model.t_currentemployeeemploymentprofile.t_employmentrecordemployeetype=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
							@Html.HiddenFor(model=>model.t_currentemployeeemploymentprofile.T_IsCurrent)
                                               
					@if(User.CanView("T_ServiceRecord","T_EmploymentRecordHiredAtFacilityID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeEmploymentProfileID_T_EmploymentRecordHiredAtFacilityID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordHiredAtFacilityID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_ServiceRecord", "T_EmploymentRecordHiredAtFacilityID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordHiredAtFacilityID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmploymentRecordHiredAtFacilityID, "--Select--", new {   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_AllFacilities", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmploymentRecordHiredAtFacilityID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeeemploymentprofile.T_EmploymentRecordHiredAtFacilityID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordHiredAtFacilityID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmploymentRecordHiredAtFacilityID, "--Select--", new {  @required ="required",     @class = "chosen-select form-control", @HostingName = "T_AllFacilities", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmploymentRecordHiredAtFacilityID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_EmploymentRecordHiredAtFacilityID)
																					 @if (User.CanAdd("T_AllFacilities"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_AllFacilities" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Hired At Facility','dvPopup','" + Url.Action("CreateQuick", "T_AllFacilities", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_AllFacilities"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_AllFacilities" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_AllFacilities" target="_blank" href="@Url.Action(User.CanEdit("T_AllFacilities") ? "Edit" : "Details", "T_AllFacilities", new { Id = Html.DisplayFor(model => model.t_currentemployeeemploymentprofile.t_employmentrecordhiredatfacility.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeeemploymentprofile == null || Model.t_currentemployeeemploymentprofile.t_employmentrecordhiredatfacility== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").attr("title", '@Model.t_currentemployeeemploymentprofile.t_employmentrecordhiredatfacility=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
@if(User.CanView("T_ServiceRecord","T_HireDate"))
					{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeEmploymentProfileID_T_HireDate">
					<div class="form-group" title="Hire  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_HireDate) <span class="text-danger-reg">*</span></label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickert_currentemployeeemploymentprofileT_HireDate">
									@if(User.CanEdit("T_ServiceRecord", "T_HireDate"))
									{
                                        @Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.T_HireDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeeemploymentprofile_T_HireDate", @class = "form-control"   })
									}
									else
									{
										@Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.T_HireDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeeemploymentprofile_T_HireDate", @readonly = "readonly", @class = "form-control"    })
									}
									 <span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                        
                                    </div>
                                    @Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_HireDate)
								</div>
                                </div>
	
                               @if(User.CanEdit("T_ServiceRecord", "T_HireDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#t_currentemployeeemploymentprofileT_HireDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickert_currentemployeeemploymentprofileT_HireDate').datetimepicker({ pickTime:false });
										
                                    });
                                </script>
								}
                            </div>
					}
                                               
@if(User.CanView("T_ServiceRecord","T_TerminationDate"))
					{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeEmploymentProfileID_T_TerminationDate">
					<div class="form-group" title="Separation Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_TerminationDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickert_currentemployeeemploymentprofileT_TerminationDate">
									@if(User.CanEdit("T_ServiceRecord", "T_TerminationDate"))
									{
                                        @Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.T_TerminationDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeeemploymentprofile_T_TerminationDate", @class = "form-control"   })
									}
									else
									{
										@Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.T_TerminationDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeeemploymentprofile_T_TerminationDate", @readonly = "readonly", @class = "form-control"    })
									}
									 <span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                        
                                    </div>
                                    @Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_TerminationDate)
								</div>
                                </div>
	
                               @if(User.CanEdit("T_ServiceRecord", "T_TerminationDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#t_currentemployeeemploymentprofileT_TerminationDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickert_currentemployeeemploymentprofileT_TerminationDate').datetimepicker({ pickTime:false });
										
                                    });
                                </script>
								}
                            </div>
					}
                                               
@if(User.CanView("T_ServiceRecord","T_ThreeMonthDue"))
					{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeEmploymentProfileID_T_ThreeMonthDue">
					<div class="form-group" title="Three Month Due">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_ThreeMonthDue) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickert_currentemployeeemploymentprofileT_ThreeMonthDue">
									@if(User.CanEdit("T_ServiceRecord", "T_ThreeMonthDue"))
									{
                                        @Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.T_ThreeMonthDue, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeeemploymentprofile_T_ThreeMonthDue", @class = "form-control" ,@actualvalue = Model.t_currentemployeeemploymentprofile.T_ThreeMonthDue.HasValue ? Model.t_currentemployeeemploymentprofile.T_ThreeMonthDue.Value : DateTime.UtcNow,@format = "hh:mm" , @readonly = "readonly" })
									}
									else
									{
										@Html.TextBoxFor(model => model.t_currentemployeeemploymentprofile.T_ThreeMonthDue, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeeemploymentprofile_T_ThreeMonthDue", @readonly = "readonly", @class = "form-control" ,@actualvalue = Model.t_currentemployeeemploymentprofile.T_ThreeMonthDue.HasValue ? Model.t_currentemployeeemploymentprofile.T_ThreeMonthDue.Value : DateTime.UtcNow,@format = "hh:mm"   })
									}
									
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');">
											<span class="fam-arrow-refresh"></span>
                                        </a>
                                    </div>
                                        
                                    </div>
                                    @Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_ThreeMonthDue)
								</div>
                                </div>
	
                               @if(User.CanEdit("T_ServiceRecord", "T_ThreeMonthDue"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#t_currentemployeeemploymentprofileT_ThreeMonthDue').datetimepicker({ pickDate:false, minuteStepping: 15 });
                                    });
                                </script>
								}
                            </div>
					}
                                               
@if(User.CanView("T_ServiceRecord","T_ThreeMonthReviewCompleted"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeEmploymentProfileID_T_ThreeMonthReviewCompleted">
						 <div class="form-group" title="Three Month Review Completed">
                                <label class="col-sm-5 col-md-5 col-xs-12">
                                    @Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_ThreeMonthReviewCompleted) 
                                </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
								   @Html.CheckBox("t_currentemployeeemploymentprofile.T_ThreeMonthReviewCompleted",Model.t_currentemployeeemploymentprofile != null && Model.t_currentemployeeemploymentprofile.T_ThreeMonthReviewCompleted.HasValue ? Model.t_currentemployeeemploymentprofile.T_ThreeMonthReviewCompleted : false)
                                    @Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_ThreeMonthReviewCompleted)
                                </div>
								</div>
                            </div>
}
                                               
					@if(User.CanView("T_ServiceRecord","T_EmployeeTerminationReasonID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeEmploymentProfileID_T_EmployeeTerminationReasonID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeTerminationReasonID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_ServiceRecord", "T_EmployeeTerminationReasonID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeTerminationReasonID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmployeeTerminationReasonID, "--Select--", new {       @class = "chosen-select form-control", @HostingName = "T_TerminationReason", @dataurl = Url.Action("GetAllValue", "T_TerminationReason",new { caller = "T_EmployeeTerminationReasonID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeeemploymentprofile.T_EmployeeTerminationReasonID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeTerminationReasonID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmployeeTerminationReasonID, "--Select--", new {     @class = "chosen-select form-control", @HostingName = "T_TerminationReason", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_TerminationReason",new { caller = "T_EmployeeTerminationReasonID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeTerminationReasonID)
																					 @if (User.CanAdd("T_TerminationReason"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_TerminationReason" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Separation Reason','dvPopup','" + Url.Action("CreateQuick", "T_TerminationReason", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_TerminationReason"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_TerminationReason" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_TerminationReason" target="_blank" href="@Url.Action(User.CanEdit("T_TerminationReason") ? "Edit" : "Details", "T_TerminationReason", new { Id = Html.DisplayFor(model => model.t_currentemployeeemploymentprofile.t_employeeterminationreason.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeeemploymentprofile == null || Model.t_currentemployeeemploymentprofile.t_employeeterminationreason== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_TerminationReason").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_TerminationReason").attr("title", '@Model.t_currentemployeeemploymentprofile.t_employeeterminationreason=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					@if(User.CanView("T_ServiceRecord","T_EmployeeRecordTerminationFacilityID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeEmploymentProfileID_T_EmployeeRecordTerminationFacilityID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeRecordTerminationFacilityID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_ServiceRecord", "T_EmployeeRecordTerminationFacilityID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeRecordTerminationFacilityID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmployeeRecordTerminationFacilityID, "--Select--", new {       @class = "chosen-select form-control", @HostingName = "T_AllFacilities", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmployeeRecordTerminationFacilityID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeeemploymentprofile.T_EmployeeRecordTerminationFacilityID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeRecordTerminationFacilityID, (SelectList)ViewBag.T_CurrentEmployeeEmploymentProfile_T_EmployeeRecordTerminationFacilityID, "--Select--", new {     @class = "chosen-select form-control", @HostingName = "T_AllFacilities", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmployeeRecordTerminationFacilityID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_EmployeeRecordTerminationFacilityID)
																					 @if (User.CanAdd("T_AllFacilities"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_AllFacilities" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','After Termination Joined Facility','dvPopup','" + Url.Action("CreateQuick", "T_AllFacilities", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_AllFacilities"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_AllFacilities" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_AllFacilities" target="_blank" href="@Url.Action(User.CanEdit("T_AllFacilities") ? "Edit" : "Details", "T_AllFacilities", new { Id = Html.DisplayFor(model => model.t_currentemployeeemploymentprofile.t_employeerecordterminationfacility.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeeemploymentprofile == null || Model.t_currentemployeeemploymentprofile.t_employeerecordterminationfacility== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").attr("title", '@Model.t_currentemployeeemploymentprofile.t_employeerecordterminationfacility=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
@if(User.CanView("T_ServiceRecord","T_EligibleForRehire"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeEmploymentProfileID_T_EligibleForRehire">
						 <div class="form-group" title="Not  Eligible  For  Rehire">
                                <label class="col-sm-5 col-md-5 col-xs-12">
                                    @Html.LabelFor(model => model.t_currentemployeeemploymentprofile.T_EligibleForRehire) 
                                </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
								   @Html.CheckBox("t_currentemployeeemploymentprofile.T_EligibleForRehire",Model.t_currentemployeeemploymentprofile != null && Model.t_currentemployeeemploymentprofile.T_EligibleForRehire.HasValue ? Model.t_currentemployeeemploymentprofile.T_EligibleForRehire : false)
                                    @Html.ValidationMessageFor(model => model.t_currentemployeeemploymentprofile.T_EligibleForRehire)
                                </div>
								</div>
                            </div>
}
                                               
					
                                                </div>
                                            </div>
									</div>
	}
	else
	{
		<label> @Html.LabelFor(model => model.T_CurrentEmployeeEmploymentProfileID) not available. </label>
	}
                                        @Html.ValidationMessageFor(model => model.T_CurrentEmployeeEmploymentProfileID)
                                    </div>
                                </div>
                            </div>

                       }
					   else
                       { @Html.HiddenFor(model => model.T_CurrentEmployeeEmploymentProfileID, new { @class = "form-control" })}
@if(User.CanView("T_JobAssignment"))
{
                    <div class='col-sm-4 col-md-4 col-xs-12' style="display:none;">
                        <div class='form-group' style="width:100%;">
                            <label class="col-sm-7 col-md-7 col-xs-12">@Html.LabelFor(model => model.T_CurrentEmployeeJobAssignmentID) </label>
							<div class="input-group col-sm-5 col-md-5 col-xs-12">
								@Html.DropDownList("T_CurrentEmployeeJobAssignmentID", null, "--Select Primary Job Assignment--", new { @onclick = Html.Raw("select('T_CurrentEmployeeJobAssignmentID')"), @class = "form-control", @HostingName = "T_JobAssignment" })
                                @Html.ValidationMessageFor(model => model.T_CurrentEmployeeJobAssignmentID)								
                                <div class="input-group-btn">
                                  <a class="btn btn-default btn ie8fix" id="addT_JobAssignment"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Primary Job Assignment','dvPopup','" + Url.Action("CreateQuick", "T_JobAssignment", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
										<span class="glyphicon glyphicon-plus-sign"></span>
                                    </a>
                                </div>								
							</div>
                        </div>
                    </div>
                            <div class="col-md-12 col-sm-12 col-xs-12 " id="dvT_CurrentEmployeeJobAssignmentID">
                                <div class="panel panel-default AppForm">
                                  <div class="panel-sub-heading clearfix">
                                        <h3 class="panel-title" alt="T_CurrentEmployeeJobAssignment" title="T_CurrentEmployeeJobAssignment">@Html.LabelFor(model => model.T_CurrentEmployeeJobAssignmentID)</h3>

                                    </div>
                                    <div class="panel-body">
                                        
	@if(Model.t_currentemployeejobassignment != null && Model.t_currentemployeejobassignment.T_Primary.Value)
	{
									<div class="row">
                                            <div class="col-md-12 col-sm-12 col-xs-12">
                                                        <div>
 @{if (Model.t_currentemployeejobassignment!=null) {Model.t_currentemployeejobassignment.setDateTimeToClientTime();}}
@if (Model.t_currentemployeejobassignment!=null)
{ 
   <div class='col-sm-6' style="display:none;">
    <div class='form-group'>
        <label class="col-xs-5">@Html.LabelFor(model => model.t_currentemployeejobassignment.Id)</label>
		@Html.HiddenFor(model => model.t_currentemployeejobassignment.ConcurrencyKey)
        <div class="input-group col-xs-7">
            @Html.TextBoxFor(model => model.t_currentemployeejobassignment.Id, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.Id)
        </div>
    </div>
</div>
}
					@if(User.CanView("T_JobAssignment","T_EmployeeJobAssignmentID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12' style="display: none" id="dvT_CurrentEmployeeJobAssignmentID_T_EmployeeJobAssignmentID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeejobassignment.T_EmployeeJobAssignmentID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_JobAssignment", "T_EmployeeJobAssignmentID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_EmployeeJobAssignmentID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_EmployeeJobAssignmentID, "--Select--", new {   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeJobAssignmentID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeejobassignment.T_EmployeeJobAssignmentID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_EmployeeJobAssignmentID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_EmployeeJobAssignmentID, "--Select--", new {  @required ="required",     @class = "chosen-select form-control", @HostingName = "T_Employee", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeJobAssignmentID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_EmployeeJobAssignmentID)
																					 @if (User.CanAdd("T_Employee"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_Employee" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_currentemployeejobassignment.t_employeejobassignment.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeejobassignment == null || Model.t_currentemployeejobassignment.t_employeejobassignment== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_currentemployeejobassignment.t_employeejobassignment=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
@if(User.CanView("T_JobAssignment","T_EmployeePercent"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_EmployeePercent">
                            <div class='form-group' title="Employee  Percent (%)">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_EmployeePercent) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_JobAssignment", "T_EmployeePercent"))
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_EmployeePercent, new { @class = "form-control" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_EmployeePercent, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_EmployeePercent)
                                </div>
                            </div>
                        </div>
}
                                               
@if(User.CanView("T_JobAssignment","T_StartDate"))
					{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_StartDate">
					<div class="form-group" title="Start  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_StartDate) <span class="text-danger-reg">*</span></label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickert_currentemployeejobassignmentT_StartDate">
									@if(User.CanEdit("T_JobAssignment", "T_StartDate"))
									{
                                        @Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_StartDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeejobassignment_T_StartDate", @class = "form-control"   })
									}
									else
									{
										@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_StartDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeejobassignment_T_StartDate", @readonly = "readonly", @class = "form-control"    })
									}
									 <span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                        
                                    </div>
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_StartDate)
								</div>
                                </div>
	
                               @if(User.CanEdit("T_JobAssignment", "T_StartDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#t_currentemployeejobassignmentT_StartDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickert_currentemployeejobassignmentT_StartDate').datetimepicker({ pickTime:false });
										
                                    });
                                </script>
								}
                            </div>
					}
                                               
@if(User.CanView("T_JobAssignment","T_EndDate"))
					{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_EndDate">
					<div class="form-group" title="End  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_EndDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickert_currentemployeejobassignmentT_EndDate">
									@if(User.CanEdit("T_JobAssignment", "T_EndDate"))
									{
                                        @Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_EndDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeejobassignment_T_EndDate", @class = "form-control"   })
									}
									else
									{
										@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_EndDate, "{0:MM/dd/yyyy}",  (object)new { @id = "t_currentemployeejobassignment_T_EndDate", @readonly = "readonly", @class = "form-control"    })
									}
									 <span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                        
                                    </div>
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_EndDate)
								</div>
                                </div>
	
                               @if(User.CanEdit("T_JobAssignment", "T_EndDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#t_currentemployeejobassignmentT_EndDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickert_currentemployeejobassignmentT_EndDate').datetimepicker({ pickTime:false });
										
                                    });
                                </script>
								}
                            </div>
					}
                                               
							@Html.HiddenFor(model=>model.t_currentemployeejobassignment.T_Primary)
                                               
@if(User.CanView("T_JobAssignment","T_Active"))
{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_Active">
						 <div class="form-group" title="Active">
                                <label class="col-sm-5 col-md-5 col-xs-12">
                                    @Html.LabelFor(model => model.t_currentemployeejobassignment.T_Active) 
                                </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
								   @Html.CheckBox("t_currentemployeejobassignment.T_Active",Model.t_currentemployeejobassignment != null && Model.t_currentemployeejobassignment.T_Active.HasValue ? Model.t_currentemployeejobassignment.T_Active : false)
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_Active)
                                </div>
								</div>
                            </div>
}
                                               
					@if(User.CanView("T_JobAssignment","T_PositionJobAssignmentID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeJobAssignmentID_T_PositionJobAssignmentID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeejobassignment.T_PositionJobAssignmentID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_JobAssignment", "T_PositionJobAssignmentID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_PositionJobAssignmentID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_PositionJobAssignmentID, "--Select--", new {   @required ="required",  @derivedurl = Url.Action("GetDerivedDetailsInline", "T_JobAssignment"),   @onchange = Html.Raw("FillDerivedDetailsInline(this,event,'t_currentemployeejobassignment','T_PositionJobAssignmentID');") ,  @class = "chosen-select form-control", @HostingName = "T_Position", @dataurl = Url.Action("GetAllValue", "T_Position",new { caller = "T_PositionJobAssignmentID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeejobassignment.T_PositionJobAssignmentID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_PositionJobAssignmentID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_PositionJobAssignmentID, "--Select--", new {  @required ="required",    @onchange = Html.Raw("FillDerivedDetailsInline(this,event,'t_currentemployeejobassignment','T_PositionJobAssignmentID');") ,  @class = "chosen-select form-control", @HostingName = "T_Position", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_Position",new { caller = "T_PositionJobAssignmentID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_PositionJobAssignmentID)
																					 @if (User.CanAdd("T_Position"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_Position" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Position Number','dvPopup','" + Url.Action("CreateQuick", "T_Position", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_Position"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Position" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Position" target="_blank" href="@Url.Action(User.CanEdit("T_Position") ? "Edit" : "Details", "T_Position", new { Id = Html.DisplayFor(model => model.t_currentemployeejobassignment.t_positionjobassignment.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeejobassignment == null || Model.t_currentemployeejobassignment.t_positionjobassignment== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Position").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Position").attr("title", '@Model.t_currentemployeejobassignment.t_positionjobassignment=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
@if(User.CanView("T_JobAssignment","T_PositionLevel"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_PositionLevel">
                            <div class='form-group' title="Position Level">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_PositionLevel) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_JobAssignment", "T_PositionLevel"))
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_PositionLevel, new { @class = "form-control", @readonly = "readonly" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_PositionLevel, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_PositionLevel)
                                </div>
                            </div>
                        </div>
}
                                               
@if(User.CanView("T_JobAssignment","T_RoleCode"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_RoleCode">
                            <div class='form-group' title="Role Code">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_RoleCode) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_JobAssignment", "T_RoleCode"))
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_RoleCode, new { @class = "form-control", @readonly = "readonly" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_RoleCode, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_RoleCode)
                                </div>
                            </div>
                        </div>
}
                                               
@if(User.CanView("T_JobAssignment","T_ClassCode"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_ClassCode">
                            <div class='form-group' title="Class Code">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_ClassCode) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_JobAssignment", "T_ClassCode"))
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_ClassCode, new { @class = "form-control", @readonly = "readonly" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_ClassCode, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_ClassCode)
                                </div>
                            </div>
                        </div>
}
                                               
					@if(User.CanView("T_JobAssignment","T_JobAssignmentReasonID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeJobAssignmentID_T_JobAssignmentReasonID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeejobassignment.T_JobAssignmentReasonID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_JobAssignment", "T_JobAssignmentReasonID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_JobAssignmentReasonID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_JobAssignmentReasonID, "--Select--", new {   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_ReasonforHire", @dataurl = Url.Action("GetAllValue", "T_ReasonforHire",new { caller = "T_JobAssignmentReasonID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeejobassignment.T_JobAssignmentReasonID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_JobAssignmentReasonID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_JobAssignmentReasonID, "--Select--", new {  @required ="required",     @class = "chosen-select form-control", @HostingName = "T_ReasonforHire", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_ReasonforHire",new { caller = "T_JobAssignmentReasonID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_JobAssignmentReasonID)
																					 @if (User.CanAdd("T_ReasonforHire"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_ReasonforHire" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Job Assignment Reason','dvPopup','" + Url.Action("CreateQuick", "T_ReasonforHire", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_ReasonforHire"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_ReasonforHire" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_ReasonforHire" target="_blank" href="@Url.Action(User.CanEdit("T_ReasonforHire") ? "Edit" : "Details", "T_ReasonforHire", new { Id = Html.DisplayFor(model => model.t_currentemployeejobassignment.t_jobassignmentreason.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeejobassignment == null || Model.t_currentemployeejobassignment.t_jobassignmentreason== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_ReasonforHire").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_ReasonforHire").attr("title", '@Model.t_currentemployeejobassignment.t_jobassignmentreason=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					@if(User.CanView("T_JobAssignment","T_JobAssignmentUnitXID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeJobAssignmentID_T_JobAssignmentUnitXID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeejobassignment.T_JobAssignmentUnitXID) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_JobAssignment", "T_JobAssignmentUnitXID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_JobAssignmentUnitXID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_JobAssignmentUnitXID, "--Select--", new {   @required ="required",  @derivedurl = Url.Action("GetDerivedDetailsInline", "T_JobAssignment"),   @onchange = Html.Raw("FillDerivedDetailsInline(this,event,'t_currentemployeejobassignment','T_JobAssignmentUnitXID');") ,  @class = "chosen-select form-control", @HostingName = "T_UnitX", @dataurl = Url.Action("GetAllValue", "T_UnitX",new { caller = "T_JobAssignmentUnitXID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeejobassignment.T_JobAssignmentUnitXID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_JobAssignmentUnitXID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_JobAssignmentUnitXID, "--Select--", new {  @required ="required",    @onchange = Html.Raw("FillDerivedDetailsInline(this,event,'t_currentemployeejobassignment','T_JobAssignmentUnitXID');") ,  @class = "chosen-select form-control", @HostingName = "T_UnitX", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_UnitX",new { caller = "T_JobAssignmentUnitXID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_JobAssignmentUnitXID)
																					 @if (User.CanAdd("T_UnitX"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_UnitX" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','UnitX','dvPopup','" + Url.Action("CreateQuick", "T_UnitX", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_UnitX"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_UnitX" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_UnitX" target="_blank" href="@Url.Action(User.CanEdit("T_UnitX") ? "Edit" : "Details", "T_UnitX", new { Id = Html.DisplayFor(model => model.t_currentemployeejobassignment.t_jobassignmentunitx.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeejobassignment == null || Model.t_currentemployeejobassignment.t_jobassignmentunitx== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_UnitX").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_UnitX").attr("title", '@Model.t_currentemployeejobassignment.t_jobassignmentunitx=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
@if(User.CanView("T_JobAssignment","T_CostCenter"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_CostCenter">
                            <div class='form-group' title="Cost  Center">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_CostCenter) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_JobAssignment", "T_CostCenter"))
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_CostCenter, new { @class = "form-control", @readonly = "readonly" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_CostCenter, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_CostCenter)
                                </div>
                            </div>
                        </div>
}
                                               
@if(User.CanView("T_JobAssignment","T_Program"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentEmployeeJobAssignmentID_T_Program">
                            <div class='form-group' title="Program">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_currentemployeejobassignment.T_Program) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_JobAssignment", "T_Program"))
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_Program, new { @class = "form-control", @readonly = "readonly" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_currentemployeejobassignment.T_Program, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_Program)
                                </div>
                            </div>
                        </div>
}
                                               
					@if(User.CanView("T_JobAssignment","T_JobAssignmentManagerEmployeeID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeJobAssignmentID_T_JobAssignmentManagerEmployeeID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeejobassignment.T_JobAssignmentManagerEmployeeID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_JobAssignment", "T_JobAssignmentManagerEmployeeID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_JobAssignmentManagerEmployeeID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_JobAssignmentManagerEmployeeID, "--Select--", new {       @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_JobAssignmentManagerEmployeeID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeejobassignment.T_JobAssignmentManagerEmployeeID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_JobAssignmentManagerEmployeeID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_JobAssignmentManagerEmployeeID, "--Select--", new {     @class = "chosen-select form-control", @HostingName = "T_Employee", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_JobAssignmentManagerEmployeeID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_JobAssignmentManagerEmployeeID)
																					 @if (User.CanAdd("T_Employee"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_Employee" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Manager','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_currentemployeejobassignment.t_jobassignmentmanageremployee.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeejobassignment == null || Model.t_currentemployeejobassignment.t_jobassignmentmanageremployee== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_currentemployeejobassignment.t_jobassignmentmanageremployee=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					@if(User.CanView("T_JobAssignment","T_EmployeeSupervisorID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_CurrentEmployeeJobAssignmentID_T_EmployeeSupervisorID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_currentemployeejobassignment.T_EmployeeSupervisorID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_JobAssignment", "T_EmployeeSupervisorID"))
		{
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_EmployeeSupervisorID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_EmployeeSupervisorID, "--Select--", new {   @derivedurl = Url.Action("GetDerivedDetailsInline", "T_JobAssignment"),   @onchange = Html.Raw("FillDerivedDetailsInline(this,event,'t_currentemployeejobassignment','T_EmployeeSupervisorID');") ,  @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeSupervisorID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_currentemployeejobassignment.T_EmployeeSupervisorID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_currentemployeejobassignment.T_EmployeeSupervisorID, (SelectList)ViewBag.T_CurrentEmployeeJobAssignment_T_EmployeeSupervisorID, "--Select--", new {    @onchange = Html.Raw("FillDerivedDetailsInline(this,event,'t_currentemployeejobassignment','T_EmployeeSupervisorID');") ,  @class = "chosen-select form-control", @HostingName = "T_Employee", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeSupervisorID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_currentemployeejobassignment.T_EmployeeSupervisorID)
																					 @if (User.CanAdd("T_Employee"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_Employee" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Supervisor','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_currentemployeejobassignment.t_employeesupervisor.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_currentemployeejobassignment == null || Model.t_currentemployeejobassignment.t_employeesupervisor== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_currentemployeejobassignment.t_employeesupervisor=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					
                                                </div>
                                            </div>
									</div>
	}
	else
	{
		<label> @Html.LabelFor(model => model.T_CurrentEmployeeJobAssignmentID) not available. </label>
	}
                                        @Html.ValidationMessageFor(model => model.T_CurrentEmployeeJobAssignmentID)
                                    </div>
                                </div>
                            </div>

                       }
					   else
                       { @Html.HiddenFor(model => model.T_CurrentEmployeeJobAssignmentID, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48900">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Current Service Record" title="Current Service Record"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#currentservicerecordbody"><span class="glyphicon glyphicon-chevron-down"></span> Current Service Record</a></h3>
                               </div>
							  <div class="panel-body panel-collapse in" id="currentservicerecordbody">					
@if(User.CanView("T_Employee","T_StateHireDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_StateHireDate">
							  <div class="form-group" title="State Hire Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_StateHireDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_StateHireDate">
 @Html.TextBoxFor(model => model.T_StateHireDate, "{0:MM/dd/yyyy}", User.CanEdit("T_Employee", "T_StateHireDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_StateHireDate)

								</div>
                                </div>
								@if(User.CanEdit("T_Employee", "T_StateHireDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_StateHireDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_StateHireDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_StateHireDate, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_AdjustedHireDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_AdjustedHireDate">
							  <div class="form-group" title="Adjusted Hire Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_AdjustedHireDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_AdjustedHireDate">
 @Html.TextBoxFor(model => model.T_AdjustedHireDate, "{0:MM/dd/yyyy}", User.CanEdit("T_Employee", "T_AdjustedHireDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_AdjustedHireDate)

								</div>
                                </div>
								@if(User.CanEdit("T_Employee", "T_AdjustedHireDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_AdjustedHireDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_AdjustedHireDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_AdjustedHireDate, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_PriorServiceinmonths"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_PriorServiceinmonths">
							<div class='form-group' title="Prior Service (in months)">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_PriorServiceinmonths)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_PriorServiceinmonths,  getHtmlAttributes("T_PriorServiceinmonths"))
									@Html.ValidationMessageFor(model => model.T_PriorServiceinmonths)
									
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');">
											<span class="fam-arrow-refresh"></span>
                                        </a>
                                    </div>
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_PriorServiceinmonths, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_CurrentServiceinmonths"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_CurrentServiceinmonths">
							<div class='form-group' title="Current Service (in months)">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_CurrentServiceinmonths)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_CurrentServiceinmonths,  getHtmlAttributes("T_CurrentServiceinmonths"))
									@Html.ValidationMessageFor(model => model.T_CurrentServiceinmonths)
									
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');">
											<span class="fam-arrow-refresh"></span>
                                        </a>
                                    </div>
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_CurrentServiceinmonths, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48899">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Other Employee Details" title="Other Employee Details"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#otheremployeedetailsbody"><span class="glyphicon glyphicon-chevron-down"></span> Other Employee Details</a></h3>
                               </div>
							  <div class="panel-body panel-collapse in" id="otheremployeedetailsbody">					
				@if(User.CanView("T_Employee","T_EmployeeGenderID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeGenderID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeGenderID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeGenderID"))
		{
			@Html.DropDownList("T_EmployeeGenderID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Gender", @dataurl = Url.Action("GetAllValue", "T_Gender",new { caller = "T_EmployeeGenderID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeGenderID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeGenderID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Gender", @dataurl = Url.Action("GetAllValue", "T_Gender",new { caller = "T_EmployeeGenderID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeGenderID)
									@if (User.CanAdd("T_Gender"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Gender"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Gender','dvPopup','" + Url.Action("CreateQuick", "T_Gender", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Gender"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Gender" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Gender" target="_blank" href="@Url.Action(User.CanEdit("T_Gender") ? "Edit" : "Details", "T_Gender", new { Id = Html.DisplayFor(model => model.t_employeegender.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeegender == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Gender").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Gender").attr("title", '@Model.t_employeegender.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeGenderID, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeRaceID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeRaceID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeRaceID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeRaceID"))
		{
			@Html.DropDownList("T_EmployeeRaceID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Race", @dataurl = Url.Action("GetAllValue", "T_Race",new { caller = "T_EmployeeRaceID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeRaceID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeRaceID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Race", @dataurl = Url.Action("GetAllValue", "T_Race",new { caller = "T_EmployeeRaceID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeRaceID)
									@if (User.CanAdd("T_Race"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Race"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Race','dvPopup','" + Url.Action("CreateQuick", "T_Race", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Race"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Race" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Race" target="_blank" href="@Url.Action(User.CanEdit("T_Race") ? "Edit" : "Details", "T_Race", new { Id = Html.DisplayFor(model => model.t_employeerace.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeerace == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Race").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Race").attr("title", '@Model.t_employeerace.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeRaceID, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeNationalityAssociationID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeNationalityAssociationID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeNationalityAssociationID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeNationalityAssociationID"))
		{
			@Html.DropDownList("T_EmployeeNationalityAssociationID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_Nationality", @dataurl = Url.Action("GetAllValue", "T_Nationality",new { caller = "T_EmployeeNationalityAssociationID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeNationalityAssociationID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeNationalityAssociationID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Nationality", @dataurl = Url.Action("GetAllValue", "T_Nationality",new { caller = "T_EmployeeNationalityAssociationID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeNationalityAssociationID)
									@if (User.CanAdd("T_Nationality"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Nationality"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Nationality','dvPopup','" + Url.Action("CreateQuick", "T_Nationality", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

															</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeNationalityAssociationID, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeVeteranStatusID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeVeteranStatusID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeVeteranStatusID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeVeteranStatusID"))
		{
			@Html.DropDownList("T_EmployeeVeteranStatusID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_VeteranStatus", @dataurl = Url.Action("GetAllValue", "T_VeteranStatus",new { caller = "T_EmployeeVeteranStatusID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeVeteranStatusID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeVeteranStatusID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_VeteranStatus", @dataurl = Url.Action("GetAllValue", "T_VeteranStatus",new { caller = "T_EmployeeVeteranStatusID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeVeteranStatusID)
									@if (User.CanAdd("T_VeteranStatus"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_VeteranStatus"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Veteran Status','dvPopup','" + Url.Action("CreateQuick", "T_VeteranStatus", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_VeteranStatus"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_VeteranStatus" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_VeteranStatus" target="_blank" href="@Url.Action(User.CanEdit("T_VeteranStatus") ? "Edit" : "Details", "T_VeteranStatus", new { Id = Html.DisplayFor(model => model.t_employeeveteranstatus.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeeveteranstatus == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_VeteranStatus").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_VeteranStatus").attr("title", '@Model.t_employeeveteranstatus.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeVeteranStatusID, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeCardEmplGrpAssociationID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeCardEmplGrpAssociationID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeCardEmplGrpAssociationID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeCardEmplGrpAssociationID"))
		{
			@Html.DropDownList("T_EmployeeCardEmplGrpAssociationID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_CardEmplGrp", @dataurl = Url.Action("GetAllValue", "T_CardEmplGrp",new { caller = "T_EmployeeCardEmplGrpAssociationID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeCardEmplGrpAssociationID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeCardEmplGrpAssociationID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_CardEmplGrp", @dataurl = Url.Action("GetAllValue", "T_CardEmplGrp",new { caller = "T_EmployeeCardEmplGrpAssociationID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeCardEmplGrpAssociationID)
									@if (User.CanAdd("T_CardEmplGrp"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_CardEmplGrp"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','CardEmplGrp','dvPopup','" + Url.Action("CreateQuick", "T_CardEmplGrp", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

															</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeCardEmplGrpAssociationID, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeCardLvPlanAssociationID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeCardLvPlanAssociationID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeCardLvPlanAssociationID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_Employee", "T_EmployeeCardLvPlanAssociationID"))
		{
			@Html.DropDownList("T_EmployeeCardLvPlanAssociationID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_CardLvPlan", @dataurl = Url.Action("GetAllValue", "T_CardLvPlan",new { caller = "T_EmployeeCardLvPlanAssociationID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeCardLvPlanAssociationID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeCardLvPlanAssociationID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_CardLvPlan", @dataurl = Url.Action("GetAllValue", "T_CardLvPlan",new { caller = "T_EmployeeCardLvPlanAssociationID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeCardLvPlanAssociationID)
									@if (User.CanAdd("T_CardLvPlan"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_CardLvPlan"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','CardAltLvPlan','dvPopup','" + Url.Action("CreateQuick", "T_CardLvPlan", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

															</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeCardLvPlanAssociationID, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48897">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Contact" title="Contact"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#contactbody"><span class="glyphicon glyphicon-chevron-down"></span> Contact</a></h3>
                               </div>
							  <div class="panel-body panel-collapse collapse" id="contactbody">					
@if(User.CanView("T_Address"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12' style="display:none;">
                        <div class='form-group' style="width:100%;">
                            <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_EmployeeAddressID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.DropDownList("T_EmployeeAddressID", null, "--Select Employee Address--", new { @onclick = Html.Raw("select('T_EmployeeAddressID')"), @class = "form-control", @HostingName = "T_Address" })
                                @Html.ValidationMessageFor(model => model.T_EmployeeAddressID)								
                                <div class="input-group-btn">
                                  <a class="btn btn-default btn ie8fix" id="addT_Address"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee Address','dvPopup','" + Url.Action("CreateQuick", "T_Address", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
										<span class="glyphicon glyphicon-plus-sign"></span>
                                    </a>
                                </div>								
							</div>
                        </div>
                    </div>
                            <div class="col-md-12 col-sm-12 col-xs-12 " id="dvT_EmployeeAddressID">
                                <div class="panel panel-default AppForm">
                                  <div class="panel-sub-heading clearfix">
                                        <h3 class="panel-title" alt="T_EmployeeAddress" title="T_EmployeeAddress">@Html.LabelFor(model => model.T_EmployeeAddressID)</h3>

                                    </div>
                                    <div class="panel-body">
                                        
									<div class="row">
                                            <div class="col-md-12 col-sm-12 col-xs-12">
                                                        <div>
 @{if (Model.t_employeeaddress!=null) {Model.t_employeeaddress.setDateTimeToClientTime();}}
@if (Model.t_employeeaddress!=null)
{ 
   <div class='col-sm-6' style="display:none;">
    <div class='form-group'>
        <label class="col-xs-5">@Html.LabelFor(model => model.t_employeeaddress.Id)</label>
		@Html.HiddenFor(model => model.t_employeeaddress.ConcurrencyKey)
        <div class="input-group col-xs-7">
            @Html.TextBoxFor(model => model.t_employeeaddress.Id, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.t_employeeaddress.Id)
        </div>
    </div>
</div>
}
@if(User.CanView("T_Address","T_AddressLine1"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeAddressID_T_AddressLine1">
                            <div class='form-group' title="AddressLine1">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_employeeaddress.T_AddressLine1) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_Address", "T_AddressLine1"))
									{
									@Html.TextBoxFor(model => model.t_employeeaddress.T_AddressLine1, new { @class = "form-control" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_employeeaddress.T_AddressLine1, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_employeeaddress.T_AddressLine1)
                                </div>
                            </div>
                        </div>
}
                                               
@if(User.CanView("T_Address","T_AddressLine2"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeAddressID_T_AddressLine2">
                            <div class='form-group' title="AddressLine2">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_employeeaddress.T_AddressLine2) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_Address", "T_AddressLine2"))
									{
									@Html.TextBoxFor(model => model.t_employeeaddress.T_AddressLine2, new { @class = "form-control" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_employeeaddress.T_AddressLine2, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_employeeaddress.T_AddressLine2)
                                </div>
                            </div>
                        </div>
}
                                               
@if(User.CanView("T_Address","T_ZipCode"))
{
							<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeAddressID_T_ZipCode">
                            <div class='form-group' title="ZipCode">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.t_employeeaddress.T_ZipCode) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@if (User.CanEdit("T_Address", "T_ZipCode"))
									{
									@Html.TextBoxFor(model => model.t_employeeaddress.T_ZipCode, new { @class = "form-control" })
									}
									else
									{
									@Html.TextBoxFor(model => model.t_employeeaddress.T_ZipCode, new { @class = "form-control",@readonly="readonly" })
									}
                                    @Html.ValidationMessageFor(model => model.t_employeeaddress.T_ZipCode)
                                </div>
                            </div>
                        </div>
}
                                               
					@if(User.CanView("T_Address","T_AddressCountryID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_EmployeeAddressID_T_AddressCountryID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_employeeaddress.T_AddressCountryID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_Address", "T_AddressCountryID"))
		{
			@Html.DropDownListFor(model => model.t_employeeaddress.T_AddressCountryID, (SelectList)ViewBag.T_EmployeeAddress_T_AddressCountryID, "--Select--", new {       @class = "chosen-select form-control", @HostingName = "T_Country", @dataurl = Url.Action("GetAllValue", "T_Country",new { caller = "T_AddressCountryID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_employeeaddress.T_AddressCountryID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_employeeaddress.T_AddressCountryID, (SelectList)ViewBag.T_EmployeeAddress_T_AddressCountryID, "--Select--", new {     @class = "chosen-select form-control", @HostingName = "T_Country", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_Country",new { caller = "T_AddressCountryID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_employeeaddress.T_AddressCountryID)
																					 @if (User.CanAdd("T_Country"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_Country" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Address Country','dvPopup','" + Url.Action("CreateQuick", "T_Country", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					@if(User.CanView("T_Address","T_AddressStateID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_EmployeeAddressID_T_AddressStateID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_employeeaddress.T_AddressStateID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_Address", "T_AddressStateID"))
		{
			@Html.DropDownListFor(model => model.t_employeeaddress.T_AddressStateID, (SelectList)ViewBag.T_EmployeeAddress_T_AddressStateID, "--Select--", new {       @class = "chosen-select form-control", @HostingName = "T_State", @dataurl = Url.Action("GetAllValue", "T_State",new { caller = "T_AddressStateID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_employeeaddress.T_AddressStateID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_employeeaddress.T_AddressStateID, (SelectList)ViewBag.T_EmployeeAddress_T_AddressStateID, "--Select--", new {     @class = "chosen-select form-control", @HostingName = "T_State", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_State",new { caller = "T_AddressStateID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_employeeaddress.T_AddressStateID)
																					 @if (User.CanAdd("T_State"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_State" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Address State','dvPopup','" + Url.Action("CreateQuick", "T_State", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_State"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_State" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_State" target="_blank" href="@Url.Action(User.CanEdit("T_State") ? "Edit" : "Details", "T_State", new { Id = Html.DisplayFor(model => model.t_employeeaddress.t_addressstate.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeeaddress == null || Model.t_employeeaddress.t_addressstate== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_State").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_State").attr("title", '@Model.t_employeeaddress.t_addressstate=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					@if(User.CanView("T_Address","T_AddressCityID"))
						{

						<div class='col-sm-6 col-md-6 col-xs-12'  id="dvT_EmployeeAddressID_T_AddressCityID">
								<div class='form-group'>
									<label class="col-sm-5 col-md-5 col-xs-12">
									@Html.LabelFor(model => model.t_employeeaddress.T_AddressCityID) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
										<div class="input-group" style="width:100%;">
												@if (User.CanEdit("T_Address", "T_AddressCityID"))
		{
			@Html.DropDownListFor(model => model.t_employeeaddress.T_AddressCityID, (SelectList)ViewBag.T_EmployeeAddress_T_AddressCityID, "--Select--", new {       @class = "chosen-select form-control", @HostingName = "T_City", @dataurl = Url.Action("GetAllValue", "T_City",new { caller = "T_AddressCityID" }) })
		}
		else
		{
			@Html.HiddenFor(model =>  model.t_employeeaddress.T_AddressCityID, new { @class = "form-control" })
			@Html.DropDownListFor(model => model.t_employeeaddress.T_AddressCityID, (SelectList)ViewBag.T_EmployeeAddress_T_AddressCityID, "--Select--", new {     @class = "chosen-select form-control", @HostingName = "T_City", @disabled="disabled", @dataurl = Url.Action("GetAllValue", "T_City",new { caller = "T_AddressCityID" }) })
		}
											@Html.ValidationMessageFor(model => model.t_employeeaddress.T_AddressCityID)
																					 @if (User.CanAdd("T_City"))
											{
											<div class="input-group-btn">
												<a class="btn btn-default btn ie8fix" id="addT_City" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Address City','dvPopup','" + Url.Action("CreateQuick", "T_City", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
													<span class="glyphicon glyphicon-plus-sign"></span>
												</a>
											</div>
											}
																						@if (User.CanView("T_City"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_City" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_City" target="_blank" href="@Url.Action(User.CanEdit("T_City") ? "Edit" : "Details", "T_City", new { Id = Html.DisplayFor(model => model.t_employeeaddress.t_addresscity.Id).ToString()}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeeaddress == null || Model.t_employeeaddress.t_addresscity== null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_City").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_City").attr("title", '@Model.t_employeeaddress.t_addresscity=.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
																						
										</div>
									</div>
								</div>
							</div>
	}
                                               
					
                                                </div>
                                            </div>
									</div>
                                        @Html.ValidationMessageFor(model => model.T_EmployeeAddressID)
                                    </div>
                                </div>
                            </div>

                       }
					   else
                       { @Html.HiddenFor(model => model.T_EmployeeAddressID, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_PersonalEmail"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_PersonalEmail">
							<div class='form-group' title="Personal  Email">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_PersonalEmail)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_PersonalEmail,  getHtmlAttributes("T_PersonalEmail"))
									@Html.ValidationMessageFor(model => model.T_PersonalEmail)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_PersonalEmail, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_MobilePhone"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_MobilePhone">
							<div class='form-group' title="Mobile Phone">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_MobilePhone)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_MobilePhone,  getHtmlAttributes("T_MobilePhone"))
									@Html.ValidationMessageFor(model => model.T_MobilePhone)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_MobilePhone, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_HomePhone"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_HomePhone">
							<div class='form-group' title="Home Phone">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_HomePhone)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_HomePhone,  getHtmlAttributes("T_HomePhone"))
									@Html.ValidationMessageFor(model => model.T_HomePhone)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_HomePhone, new { @class = "form-control" })}
				@if(User.CanView("T_Employee","T_EmployeeUserLoginID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeUserLoginID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeUserLoginID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
															 @if (User.CanEdit("T_Employee", "T_EmployeeUserLoginID"))
								 {
								 @Html.DropDownList("T_EmployeeUserLoginID", null, "--Select Employee User Login--", new { @class = "chosen-select form-control", @HostingName = "UserDropDown", @dataurl = Url.Action("GetAllValueUserLogin", "T_Employee", null) })
								 }
								 else
								 {
								 @Html.DropDownList("T_EmployeeUserLoginID", null, "--Select Employee User Login--", new {  @disabled="disabled",@class = "chosen-select form-control", @HostingName = "UserDropDown", @dataurl = Url.Action("GetAllValueUserLogin", "T_Employee", null) })
								 }
								 @Html.ValidationMessageFor(model => model.T_EmployeeUserLoginID)
																

															</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeUserLoginID, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48898">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Emergency Contact" title="Emergency Contact"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#emergencycontactbody"><span class="glyphicon glyphicon-chevron-down"></span> Emergency Contact</a></h3>
                               </div>
							  <div class="panel-body panel-collapse collapse" id="emergencycontactbody">					
@if(User.CanView("T_Employee","T_EmergencyContactName"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmergencyContactName">
							<div class='form-group' title="Emergency  Contact  Name">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmergencyContactName)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_EmergencyContactName,  getHtmlAttributes("T_EmergencyContactName"))
									@Html.ValidationMessageFor(model => model.T_EmergencyContactName)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_EmergencyContactName, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_EmergencyContactRelationship"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmergencyContactRelationship">
							<div class='form-group' title="Emergency  Contact  Relationship">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmergencyContactRelationship)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_EmergencyContactRelationship,  getHtmlAttributes("T_EmergencyContactRelationship"))
									@Html.ValidationMessageFor(model => model.T_EmergencyContactRelationship)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_EmergencyContactRelationship, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_EmergencyMobilePhone"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmergencyMobilePhone">
							<div class='form-group' title="Emergency Mobile Phone">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmergencyMobilePhone)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_EmergencyMobilePhone,  getHtmlAttributes("T_EmergencyMobilePhone"))
									@Html.ValidationMessageFor(model => model.T_EmergencyMobilePhone)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_EmergencyMobilePhone, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_EmergencyWorkPhone"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmergencyWorkPhone">
							<div class='form-group' title="Emergency Work Phone">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmergencyWorkPhone)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_EmergencyWorkPhone,  getHtmlAttributes("T_EmergencyWorkPhone"))
									@Html.ValidationMessageFor(model => model.T_EmergencyWorkPhone)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_EmergencyWorkPhone, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48896">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
								<h3 class="panel-title" alt="Badge Information" title="Badge Information"> <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#badgeinformationbody"><span class="glyphicon glyphicon-chevron-down"></span> Badge Information</a></h3>
                               </div>
							  <div class="panel-body panel-collapse collapse" id="badgeinformationbody">					
@if(User.CanView("T_Employee","T_BadgeNumber"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_BadgeNumber">
							<div class='form-group' title="Badge  Number">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_BadgeNumber)   </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_BadgeNumber,  getHtmlAttributes("T_BadgeNumber"))
									@Html.ValidationMessageFor(model => model.T_BadgeNumber)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_BadgeNumber, new { @class = "form-control" })}
@if(User.CanView("T_Employee","T_EffectiveDateTime"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EffectiveDateTime">
							  <div class="form-group" title="Effective  Date &  Time">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EffectiveDateTime) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_EffectiveDateTime">
 @Html.TextBoxFor(model => model.T_EffectiveDateTime, "{0:MM/dd/yyyy hh:mm tt}", User.CanEdit("T_Employee", "T_EffectiveDateTime") ? (object)new { @class = "form-control",@format = "MM/DD/YYYY hh:mm" } : (object)new { @class = "form-control", @readonly="readonly",@format = "MM/DD/YYYY hh:mm"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_EffectiveDateTime)

								</div>
                                </div>
								@if(User.CanEdit("T_Employee", "T_EffectiveDateTime"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_EffectiveDateTime').datetimepicker({ });
                                        $('#datetimepickerT_EffectiveDateTime').datetimepicker({ });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_EffectiveDateTime, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
				 @if ((User.CanView("T_Langauge") && User.CanEdit("T_ConversationalEmployeeForeignLanguage")))
                     {			
			<div class="row">
                        <div class="col-sm-12 col-md-12 col-sx-12" id="dvT_Employee">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                                     Conversational Foreign Language
                                </div>
								 <div class="panel-body">
									 @Html.DropDownList("SelectedT_Langauge_T_ConversationalEmployeeForeignLanguage", null, new { @class = "js-example-basic-multiple form-control", @multipleText = "multipleText", @multiple = "multiple", @HostingName = "T_Langauge", @dataurl = Url.Action("GetAllMultiSelectValue", "T_Langauge", null) })
								</div>
						</div>
                    </div>
             </div>	
			 }		 
				 @if ((User.CanView("T_Langauge") && User.CanEdit("T_LanguageCertifiedIn")))
                     {			
			<div class="row">
                        <div class="col-sm-12 col-md-12 col-sx-12" id="dvT_Employee">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                                     Languages Certified In
                                </div>
								 <div class="panel-body">
									 @Html.DropDownList("SelectedT_Langauge_T_LanguageCertifiedIn", null, new { @class = "js-example-basic-multiple form-control", @multipleText = "multipleText", @multiple = "multiple", @HostingName = "T_Langauge", @dataurl = Url.Action("GetAllMultiSelectValue", "T_Langauge", null) })
								</div>
						</div>
                    </div>
             </div>	
			 }		 
            </div>
        </div>
		</div>
		 @Html.AntiForgeryToken();
		 <a class="btn btn-default btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index","T_Employee")');" alt="Cancel" title="Cancel">Cancel</a>
		 @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_EmployeeParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix", @alt="Cancel", @title="Cancel" })*@
		 if (EditPermission)
         {
 				<input type="submit" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix"  alt="Save" title="Save"/>
				<input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev"/>
				<input type="submit" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay"/>
		}	
			if (EditPermission && User.CanUseVerb("SendEmailtoIT","T_Employee",User))
			{
				<a class="btn btn-primary btn-sm pull-left formbuttonfix" onclick="ExcuteSingleVerb('T_Employee',this);" dataurl="@Url.Action("SendEmailtoIT","T_Employee", new { id = Model.Id},null)"> Send Email to IT</a>
			}
				<input type="hidden" name="hdncommand" value="" />
				<input type="hidden" name="hdnNextPrevId" value="" />
}
 @{ var dropmenubottom = false; }
<div class="dropdown pull-left formbuttonfix"  id="AddAssociationdropmenubottomT_Employee">
<button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
            Add Association
            <span class="caret"></span>
        </button>
		 <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1">
			@if (User.CanAdd("T_ServiceRecord"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ServiceRecord",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeEmploymentProfile", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Service Record
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_JobAssignment"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeJobAssignment", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Job Assignment
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_PayDetails"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_PayDetails",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeePayDetails", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Salary And Bonus
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_Education"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Education",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeEducation", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Education
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_BackgroundCheck"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_BackgroundCheck",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeCriminalBackgroundCheck", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Background Check 
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_DrugAlcoholTest"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_DrugAlcoholTest",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeDrugAlcoholTest", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Drug & Alcohol Test
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_EmployeeInjury"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_EmployeeInjury",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeEmployeeInjury", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Injury
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_Accommodation"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Accommodation",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeAccomodation", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Accommodation
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_LeaveProfile"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_LeaveProfile",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeLeaveProfile", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Leave 
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_Licenses"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Licenses",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_LicenseRecords", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Licenses
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_JobAssignment"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeSupervisor", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Supervisor For
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_JobAssignment"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_JobAssignmentManagerEmployee", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Manager For
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_UnitX"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_UnitX",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeUnitXHead", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Head For 
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_UnitX"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_UnitX",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeAdministrator", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Administrator For
                </a>
				</li>
            }

			
			@if (User.CanAdd("T_Comment"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeComments", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Employee Comments
                </a>
				</li>
            }

			
			@if (User.CanAdd("FileDocument"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "FileDocument",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_EmployeeDocuments", 
						HostingEntityName = "T_Employee",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Document
                </a>
				</li>
            }

			
</ul>
</div>
@if(!dropmenubottom || !EditPermission)
{
    <script>
        $("#AddAssociationdropmenubottomT_Employee").hide();
    </script>
}
<div class="clearfix" style="clear:both; margin-bottom:8px"></div>
</div>
 <div class="tab-pane fade in" id="JournalEntryToT_EmployeeRelation">
			 @if (User.CanView("JournalEntry"))
			 {
			  // Html.RenderAction("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry" });
			 }
  </div>
 <div class="tab-pane fade in" id="T_LanguageCertifiedIn_T_Employee">
  </div>
 <div class="tab-pane fade in" id="T_EmployeeEmploymentProfile">
	@if (User.CanView("T_ServiceRecord"))
	{
	  // Html.RenderAction("Index", "T_ServiceRecord", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeEmploymentProfile" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeJobAssignment">
	@if (User.CanView("T_JobAssignment"))
	{
	  // Html.RenderAction("Index", "T_JobAssignment", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeJobAssignment" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeePayDetails">
	@if (User.CanView("T_PayDetails"))
	{
	  // Html.RenderAction("Index", "T_PayDetails", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeePayDetails" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeEducation">
	@if (User.CanView("T_Education"))
	{
	  // Html.RenderAction("Index", "T_Education", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeEducation" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_ConversationalEmployeeForeignLanguage_T_Employee">
  </div>
 <div class="tab-pane fade in" id="T_EmployeeCriminalBackgroundCheck">
	@if (User.CanView("T_BackgroundCheck"))
	{
	  // Html.RenderAction("Index", "T_BackgroundCheck", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeCriminalBackgroundCheck" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeDrugAlcoholTest">
	@if (User.CanView("T_DrugAlcoholTest"))
	{
	  // Html.RenderAction("Index", "T_DrugAlcoholTest", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeDrugAlcoholTest" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeEmployeeInjury">
	@if (User.CanView("T_EmployeeInjury"))
	{
	  // Html.RenderAction("Index", "T_EmployeeInjury", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeEmployeeInjury" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeAccomodation">
	@if (User.CanView("T_Accommodation"))
	{
	  // Html.RenderAction("Index", "T_Accommodation", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeAccomodation" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeLeaveProfile">
	@if (User.CanView("T_LeaveProfile"))
	{
	  // Html.RenderAction("Index", "T_LeaveProfile", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeLeaveProfile" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_LicenseRecords">
	@if (User.CanView("T_Licenses"))
	{
	  // Html.RenderAction("Index", "T_Licenses", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_LicenseRecords" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeSupervisor">
	@if (User.CanView("T_JobAssignment"))
	{
	  // Html.RenderAction("Index", "T_JobAssignment", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeSupervisor" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_JobAssignmentManagerEmployee">
	@if (User.CanView("T_JobAssignment"))
	{
	  // Html.RenderAction("Index", "T_JobAssignment", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_JobAssignmentManagerEmployee" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeUnitXHead">
	@if (User.CanView("T_UnitX"))
	{
	  // Html.RenderAction("Index", "T_UnitX", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeUnitXHead" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeAdministrator">
	@if (User.CanView("T_UnitX"))
	{
	  // Html.RenderAction("Index", "T_UnitX", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeAdministrator" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeComments">
	@if (User.CanView("T_Comment"))
	{
	  // Html.RenderAction("Index", "T_Comment", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeComments" }); 
	}
  </div>
 <div class="tab-pane fade in" id="T_EmployeeDocuments">
	@if (User.CanView("FileDocument"))
	{
	  // Html.RenderAction("Index", "FileDocument", new {RenderPartial=true, HostingEntity = "T_Employee", HostingEntityID = @Model.Id, AssociatedType = "T_EmployeeDocuments" }); 
	}
  </div>

</div> <!-- /tab-content --><br />

<br/>
</div>
	<script>
		   $(".js-example-basic-multiple").select2({placeholder: "Select/Search",allowClear: true});
	</script>
	

@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_Employee").ToList();
		var businessurlinline = User.businessrules.Where(p => p.EntityName == "T_ServiceRecord" ||  p.EntityName == "T_JobAssignment" ||  p.EntityName == "T_Address").ToList();
		var inlineruleids = businessurlinline.Select(q => q.Id).ToList();
		var inlinetypelist  = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => inlineruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());

if ((businessrule != null && businessrule.Count > 0)  || (businessurlinline != null && businessurlinline.Count > 0) )
{
var ruleids = businessrule.Select(q => q.Id).ToList();
var typelist  = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());

    <script>
		$(document).ready(function () {
				document.getElementById("ErrMsg").innerHTML = "";
				var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";

	form = $("#frmT_Employee").find(":not(#dvT_CurrentEmployeeEmploymentProfileID *,#dvT_CurrentEmployeeJobAssignmentID *,#dvT_EmployeeAddressID *)").serialize();
				dataurl = "@Url.Action("businessruletype", "T_Employee", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_Employee", false, "ErrMsg", form);
				//business rules on inline associations
                inlinecount = "@businessurlinline.Where(p => p.EntityName == "T_ServiceRecord").Count()";
                if (inlinecount != "0") {
                    form = $('#dvT_CurrentEmployeeEmploymentProfileID :input').serialize();
                    form = form.replaceAll("t_currentemployeeemploymentprofile.", "");
                    dataurl = "@Url.Action("businessruletype", "T_ServiceRecord", new { ruleType = "OnEdit" })";
                    ApplyBusinessRuleOnPageLoad("@inlinetypelist",dataurl, "T_ServiceRecord", true, "ErrMsg", form, "T_CurrentEmployeeEmploymentProfile", "Service Record");
                }
                inlinecount = "@businessurlinline.Where(p => p.EntityName == "T_JobAssignment").Count()";
                if (inlinecount != "0") {
                    form = $('#dvT_CurrentEmployeeJobAssignmentID :input').serialize();
                    form = form.replaceAll("t_currentemployeejobassignment.", "");
                    dataurl = "@Url.Action("businessruletype", "T_JobAssignment", new { ruleType = "OnEdit" })";
                    ApplyBusinessRuleOnPageLoad("@inlinetypelist",dataurl, "T_JobAssignment", true, "ErrMsg", form, "T_CurrentEmployeeJobAssignment", "Primary Job Assignment");
                }
                inlinecount = "@businessurlinline.Where(p => p.EntityName == "T_Address").Count()";
                if (inlinecount != "0") {
                    form = $('#dvT_EmployeeAddressID :input').serialize();
                    form = form.replaceAll("t_employeeaddress.", "");
                    dataurl = "@Url.Action("businessruletype", "T_Address", new { ruleType = "OnEdit" })";
                    ApplyBusinessRuleOnPageLoad("@inlinetypelist",dataurl, "T_Address", true, "ErrMsg", form, "T_EmployeeAddress", "Employee Address");
                }

    });
</script>
<script>
    $("form").submit(function (event) {
	if (!$("#frmT_Employee").valid()) return;
			document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
            var dataurl = "";
            var form = "";
            var inlinecount = "0";
	 form = $("#frmT_Employee").find(":not(#dvT_CurrentEmployeeEmploymentProfileID *,#dvT_CurrentEmployeeJobAssignmentID *,#dvT_EmployeeAddressID *)").serialize();
    
				 dataurl = "@Url.Action("businessruletype", "T_Employee", new { ruleType = "OnEdit"})";
                 flag = ApplyBusinessRuleOnSubmit(dataurl, "T_Employee", false, "ErrMsg", form);

  				 //business rules on inline associations
                inlinecount = "@businessurlinline.Where(p => p.EntityName == "T_ServiceRecord").Count()";
                if (inlinecount != "0") {
                    form = $('#dvT_CurrentEmployeeEmploymentProfileID :input').serialize();
                    form = form.replaceAll("t_currentemployeeemploymentprofile.", "");
                    dataurl = "@Url.Action("businessruletype", "T_ServiceRecord", new { ruleType = "OnEdit" })";
                    flag = flag && ApplyBusinessRuleOnSubmit(dataurl, "T_ServiceRecord", true, "ErrMsg", form, "T_CurrentEmployeeEmploymentProfile", "Service Record");
                }
                inlinecount = "@businessurlinline.Where(p => p.EntityName == "T_JobAssignment").Count()";
                if (inlinecount != "0") {
                    form = $('#dvT_CurrentEmployeeJobAssignmentID :input').serialize();
                    form = form.replaceAll("t_currentemployeejobassignment.", "");
                    dataurl = "@Url.Action("businessruletype", "T_JobAssignment", new { ruleType = "OnEdit" })";
                    flag = flag && ApplyBusinessRuleOnSubmit(dataurl, "T_JobAssignment", true, "ErrMsg", form, "T_CurrentEmployeeJobAssignment", "Primary Job Assignment");
                }
                inlinecount = "@businessurlinline.Where(p => p.EntityName == "T_Address").Count()";
                if (inlinecount != "0") {
                    form = $('#dvT_EmployeeAddressID :input').serialize();
                    form = form.replaceAll("t_employeeaddress.", "");
                    dataurl = "@Url.Action("businessruletype", "T_Address", new { ruleType = "OnEdit" })";
                    flag = flag && ApplyBusinessRuleOnSubmit(dataurl, "T_Address", true, "ErrMsg", form, "T_EmployeeAddress", "Employee Address");
                }
               
			 if (flag)
				{
								GetCalculationValue(event,'@Url.Action("GetCalculationValues")');
                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
					if ($(document.activeElement).attr('id') == "nextEdit" || $(document.activeElement).attr('id') == "prevEdit")
			         $('input:hidden[name="hdncommand"]').val("SaveNextPrev");
					 $("#frmT_Employee").find(':input').removeAttr('disabled');
					}
            return flag;
		});
</script>
}
 else
    {
       <script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmT_Employee").valid()) return;
        var $this = $(this);
				GetCalculationValue(event,'@Url.Action("GetCalculationValues")');
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
    });
	</script>
    }
 
}
 <script type='text/javascript'>$(document).ready(function () {   $('#T_SSN').mask('999-99-9999'); $('#T_MobilePhone').mask('999-999-9999'); $('#T_HomePhone').mask('999-999-9999'); $('#T_EmergencyMobilePhone').mask('999-999-9999'); $('#T_EmergencyWorkPhone').mask('999-999-9999');  });</script>
<script type='text/javascript'>
    $(document).ready(function () {
        try {
		focusOnControl('frmT_Employee');
        }
        catch (ex) { }
    });
	 $(document).ready(function () {
		var RecIdEdit = $("#frmT_Employee").find("input:hidden[name='Id']").val();
        $("#EntityT_EmployeeDisplayValueEdit").val(RecIdEdit);

		var textedit = $("option:selected", $("#EntityT_EmployeeDisplayValueEdit")).text();
		$("#EntityT_EmployeeDisplayValueEdit").attr('data-toggle', 'tooltip')
		$("#EntityT_EmployeeDisplayValueEdit").attr('title', textedit);

        var lastOptionValEdit = $('#EntityT_EmployeeDisplayValueEdit option:last-child').val();
        var fristOptionValEdit = $('#EntityT_EmployeeDisplayValueEdit option:first-child').val();
        if (lastOptionValEdit == RecIdEdit) {
            $('#nextEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
        }
        if (fristOptionValEdit == RecIdEdit)
            $('#prevEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
    });
</script>


