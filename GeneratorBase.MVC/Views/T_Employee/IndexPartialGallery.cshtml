@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Employee>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	 if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Employee");
	
	}
<div id="T_Employee">

<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_Employee')
			PaginationClick(e, 'T_Employee','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_Employee").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_T_Employee").hide();
	        }
			FSearchColumnsShowHideGalaryList('@ViewData["HideColumns"]', 'T_Employee');
        }
	    $("#SearchStringT_Employee").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_EmployeeSearch").bind("click", (function () {
                        }));
                $('#T_EmployeeSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_Employee").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_Employee').className == 'collapse') {
				 $('#lblT_Employee').css('display', 'none');
            }
        })
		if ($("#ErrmsgLockRecord").length > 0 && $("#ErrmsgLockRecord").text().length > 0) {
                    $(".pull-left.actionbar").hide();
		}
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
 t_employeeatfacility = Request.QueryString["t_employeeatfacility"],
 t_employeestatus = Request.QueryString["t_employeestatus"],
 t_currentemployeeemploymentprofile = Request.QueryString["t_currentemployeeemploymentprofile"],
 t_currentemployeejobassignment = Request.QueryString["t_currentemployeejobassignment"],
 t_employeegender = Request.QueryString["t_employeegender"],
 t_employeerace = Request.QueryString["t_employeerace"],
 t_employeenationalityassociation = Request.QueryString["t_employeenationalityassociation"],
 t_employeeveteranstatus = Request.QueryString["t_employeeveteranstatus"],
 t_employeecardemplgrpassociation = Request.QueryString["t_employeecardemplgrpassociation"],
 t_employeecardlvplanassociation = Request.QueryString["t_employeecardlvplanassociation"],
 t_employeeaddress = Request.QueryString["t_employeeaddress"],
  T_DateOfBirthFrom = Request.QueryString["T_DateOfBirthFrom"],
  T_DateOfBirthFromhdn = Request.QueryString["T_DateOfBirthFromhdn"],
  T_DateOfBirthTo = Request.QueryString["T_DateOfBirthTo"],
  T_DateOfBirthTohdn = Request.QueryString["T_DateOfBirthTohdn"],
  T_StateHireDateFrom = Request.QueryString["T_StateHireDateFrom"],
  T_StateHireDateFromhdn = Request.QueryString["T_StateHireDateFromhdn"],
  T_StateHireDateTo = Request.QueryString["T_StateHireDateTo"],
  T_StateHireDateTohdn = Request.QueryString["T_StateHireDateTohdn"],
  T_AdjustedHireDateFrom = Request.QueryString["T_AdjustedHireDateFrom"],
  T_AdjustedHireDateFromhdn = Request.QueryString["T_AdjustedHireDateFromhdn"],
  T_AdjustedHireDateTo = Request.QueryString["T_AdjustedHireDateTo"],
  T_AdjustedHireDateTohdn = Request.QueryString["T_AdjustedHireDateTohdn"],
  T_PriorServiceinmonthsFrom = Request.QueryString["T_PriorServiceinmonthsFrom"],
  T_PriorServiceinmonthsFromhdn = Request.QueryString["T_PriorServiceinmonthsFromhdn"],
  T_PriorServiceinmonthsTo = Request.QueryString["T_PriorServiceinmonthsTo"],
  T_PriorServiceinmonthsTohdn = Request.QueryString["T_PriorServiceinmonthsTohdn"],
  T_CurrentServiceinmonthsFrom = Request.QueryString["T_CurrentServiceinmonthsFrom"],
  T_CurrentServiceinmonthsFromhdn = Request.QueryString["T_CurrentServiceinmonthsFromhdn"],
  T_CurrentServiceinmonthsTo = Request.QueryString["T_CurrentServiceinmonthsTo"],
  T_CurrentServiceinmonthsTohdn = Request.QueryString["T_CurrentServiceinmonthsTohdn"],
  T_BadgeNumberFrom = Request.QueryString["T_BadgeNumberFrom"],
  T_BadgeNumberFromhdn = Request.QueryString["T_BadgeNumberFromhdn"],
  T_BadgeNumberTo = Request.QueryString["T_BadgeNumberTo"],
  T_BadgeNumberTohdn = Request.QueryString["T_BadgeNumberTohdn"],
  T_EffectiveDateTimeFrom = Request.QueryString["T_EffectiveDateTimeFrom"],
  T_EffectiveDateTimeFromhdn = Request.QueryString["T_EffectiveDateTimeFromhdn"],
  T_EffectiveDateTimeTo = Request.QueryString["T_EffectiveDateTimeTo"],
  T_EffectiveDateTimeTohdn = Request.QueryString["T_EffectiveDateTimeTohdn"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
		 inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_employeeatfacility = Request.QueryString["t_employeeatfacility"],
 t_employeestatus = Request.QueryString["t_employeestatus"],
 t_currentemployeeemploymentprofile = Request.QueryString["t_currentemployeeemploymentprofile"],
 t_currentemployeejobassignment = Request.QueryString["t_currentemployeejobassignment"],
 t_employeegender = Request.QueryString["t_employeegender"],
 t_employeerace = Request.QueryString["t_employeerace"],
 t_employeenationalityassociation = Request.QueryString["t_employeenationalityassociation"],
 t_employeeveteranstatus = Request.QueryString["t_employeeveteranstatus"],
 t_employeecardemplgrpassociation = Request.QueryString["t_employeecardemplgrpassociation"],
 t_employeecardlvplanassociation = Request.QueryString["t_employeecardlvplanassociation"],
 t_employeeaddress = Request.QueryString["t_employeeaddress"],
 T_DateOfBirthFrom = Request.QueryString["T_DateOfBirthFrom"],
  T_DateOfBirthFromhdn = Request.QueryString["T_DateOfBirthFromhdn"],
  T_DateOfBirthTo = Request.QueryString["T_DateOfBirthTo"],
  T_DateOfBirthTohdn = Request.QueryString["T_DateOfBirthTohdn"],
 T_StateHireDateFrom = Request.QueryString["T_StateHireDateFrom"],
  T_StateHireDateFromhdn = Request.QueryString["T_StateHireDateFromhdn"],
  T_StateHireDateTo = Request.QueryString["T_StateHireDateTo"],
  T_StateHireDateTohdn = Request.QueryString["T_StateHireDateTohdn"],
 T_AdjustedHireDateFrom = Request.QueryString["T_AdjustedHireDateFrom"],
  T_AdjustedHireDateFromhdn = Request.QueryString["T_AdjustedHireDateFromhdn"],
  T_AdjustedHireDateTo = Request.QueryString["T_AdjustedHireDateTo"],
  T_AdjustedHireDateTohdn = Request.QueryString["T_AdjustedHireDateTohdn"],
 T_PriorServiceinmonthsFrom = Request.QueryString["T_PriorServiceinmonthsFrom"],
  T_PriorServiceinmonthsFromhdn = Request.QueryString["T_PriorServiceinmonthsFromhdn"],
  T_PriorServiceinmonthsTo = Request.QueryString["T_PriorServiceinmonthsTo"],
  T_PriorServiceinmonthsTohdn = Request.QueryString["T_PriorServiceinmonthsTohdn"],
 T_CurrentServiceinmonthsFrom = Request.QueryString["T_CurrentServiceinmonthsFrom"],
  T_CurrentServiceinmonthsFromhdn = Request.QueryString["T_CurrentServiceinmonthsFromhdn"],
  T_CurrentServiceinmonthsTo = Request.QueryString["T_CurrentServiceinmonthsTo"],
  T_CurrentServiceinmonthsTohdn = Request.QueryString["T_CurrentServiceinmonthsTohdn"],
 T_BadgeNumberFrom = Request.QueryString["T_BadgeNumberFrom"],
  T_BadgeNumberFromhdn = Request.QueryString["T_BadgeNumberFromhdn"],
  T_BadgeNumberTo = Request.QueryString["T_BadgeNumberTo"],
  T_BadgeNumberTohdn = Request.QueryString["T_BadgeNumberTohdn"],
 T_EffectiveDateTimeFrom = Request.QueryString["T_EffectiveDateTimeFrom"],
  T_EffectiveDateTimeFromhdn = Request.QueryString["T_EffectiveDateTimeFromhdn"],
  T_EffectiveDateTimeTo = Request.QueryString["T_EffectiveDateTimeTo"],
  T_EffectiveDateTimeTohdn = Request.QueryString["T_EffectiveDateTimeTohdn"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
		 inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div style="display:block; padding:0px 0px 5px 0px;">
	    
	   

            <div class="pull-left actionbar">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_Employee'>
				  @if (User.CanAdd("T_Employee"))
				  {
						
					<a class="btn btn-sm" data-placement="top" id="addT_Employee" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
						<i class="fa fa-plus-circle" style="margin-right:3px"></i> Quick Add
                    </a>
					<a class="btn btn-sm" type="button" data-original-title="Full Add" data-placement="top" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Employee", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');")>
						<i class="fa fa-plus-circle" style="margin-right:3px"></i> Add
					</a>
			}
			
                </div>
				
		<div class="btn-group">

   	@if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
	{
		if (User.CanView("T_Facility") || User.CanView("T_EmployeeStatusCode") || User.CanView("T_Gender") || User.CanView("T_Race") || User.CanView("T_Nationality") || User.CanView("T_VeteranStatus") || User.CanView("T_CardEmplGrp") || User.CanView("T_CardLvPlan"))
	{ 
			<div class="btn-group">
		<a class="btn btn-sm dropdown-toggle" data-original-title="Filter-Groupby" data-toggle="dropdown" href="#" >
		<i class="fa fa-filter" style="margin-right:3px"></i> Filter
		</a>
		<ul class="dropdown-menu" role="menu">
			@if (User.CanView("T_Facility"))
			{
				<li>
					<a id="fltT_Facility" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Facility');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_Facility") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Facility", AssociatedType = "T_EmployeeAtFacility", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Facility</span>
					</a>
				</li>
			}
			@if (User.CanView("T_EmployeeStatusCode"))
			{
				<li>
					<a id="fltT_EmployeeStatusCode" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_EmployeeStatusCode');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_EmployeeStatusCode") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_EmployeeStatusCode", AssociatedType = "T_EmployeeStatus", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Employee Status</span>
					</a>
				</li>
			}
			@if (User.CanView("T_Gender"))
			{
				<li>
					<a id="fltT_Gender" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Gender');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_Gender") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Gender", AssociatedType = "T_EmployeeGender", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Gender</span>
					</a>
				</li>
			}
			@if (User.CanView("T_Race"))
			{
				<li>
					<a id="fltT_Race" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Race');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_Race") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Race", AssociatedType = "T_EmployeeRace", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Race</span>
					</a>
				</li>
			}
			@if (User.CanView("T_Nationality"))
			{
				<li>
					<a id="fltT_Nationality" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Nationality');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_Nationality") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Nationality", AssociatedType = "T_EmployeeNationalityAssociation", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Nationality</span>
					</a>
				</li>
			}
			@if (User.CanView("T_VeteranStatus"))
			{
				<li>
					<a id="fltT_VeteranStatus" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_VeteranStatus');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_VeteranStatus") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_VeteranStatus", AssociatedType = "T_EmployeeVeteranStatus", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Veteran Status</span>
					</a>
				</li>
			}
			@if (User.CanView("T_CardEmplGrp"))
			{
				<li>
					<a id="fltT_CardEmplGrp" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_CardEmplGrp');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_CardEmplGrp") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_CardEmplGrp", AssociatedType = "T_EmployeeCardEmplGrpAssociation", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>CardEmplGrp</span>
					</a>
				</li>
			}
			@if (User.CanView("T_CardLvPlan"))
			{
				<li>
					<a id="fltT_CardLvPlan" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_CardLvPlan');EntityFilter('T_Employee','" + Url.Action("GetAllValueForFilter", "T_CardLvPlan") + "','" + Html.Raw(Url.Action("Index", "T_Employee", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_CardLvPlan", AssociatedType = "T_EmployeeCardLvPlanAssociation", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>CardAltLvPlan</span>
					</a>
				</li>
			}
     <li>
@Html.ActionLink("Clear", "Index", new { viewtype = Convert.ToString(ViewBag.TemplatesName) }, new { onclick = "ClearFilterCookies();", @class = "label label-primary pull-left filterLabel", @Style = "margin-left:20px;color: white" })</li>
		</ul>
		</div>
		}
		} 
   

                </div>
@if ((User.CanEdit("T_Employee") && User.CanUseVerb("BulkUpdate", "T_Employee", User)) || (User.CanDelete("T_Employee") && User.CanUseVerb("BulkDelete", "T_Employee", User)))
{
 <div class="btn-group">
    <a class="btn btn-sm dropdown-toggle" data-original-title="Bulk Actions" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	
	@if ( User.CanEdit("T_Employee")&&  User.CanUseVerb("BulkUpdate","T_Employee",User))
	{
	<li>
		<a data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Employee','dvPopup','" + Url.Action("BulkUpdate", "T_Employee", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "','T_Employee')")">Update</a>
	</li>
	
	}
	
 
	 @if ( User.CanDelete("T_Employee") && User.CanUseVerb("BulkDelete","T_Employee",User))
     {
	 <li>
		<a style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_Employee','Bulk Delete','@Url.Action("DeleteBulk", "T_Employee")');">Delete</a>
	 </li>
	
	 }
                        </ul>
                    </div>
					}
					 <div class="btn-group">
                        <a class="btn btn-sm dropdown-toggle tip-top" data-original-title="View  As" style="padding:3px 5px;" data-toggle="dropdown">
                            <span class="fa fa fa-table"></span> View  As
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px">
                            <li>
                                <a data-placement="top" style="cursor:pointer;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Employee','" + Url.Action("Index", "T_Employee", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Employee','" + Url.Action("Index", "T_Employee", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialList" }) + "')")">
                                    <span class="fa fa-list"></span> List
                                </a>
                            </li>
                        </ul>
                    </div>

<div class="btn-group">
                            <a class="btn btn-sm dropdown-toggle tip-top" data-toggle="dropdown">
                                Tools
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu" role="menu" style="min-width:110px">
							 <li>
							               @if (ViewData["HostingEntity"] == null)
			   {
                        <a data-placement="top" data-original-title="Show Graph" data-toggle="modal" data-target="#ShowGraphT_Employee" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_Employee');")>
                            <span class="fa fa-area-chart" style="margin-right:3px"></span> Show Graph
                        </a>
				}
		@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<a id="showAssociateBtn"   data-placement="top" data-original-title="Associate Employee with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Employee','dvPopupBulkOperation','" + Url.Action("Index", "T_Employee", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
					<i class="fa fa-plus-circle" ></i> Add Association
				</a>
				<script>
                                if($("#HostingEntityDisplayValue").attr('id')==undefined)
                                    $("#showAssociateBtn").hide();
                            </script>
			}
                               
                                 
                                    
                                </li>
                                <li>
								
				@if ( User.CanAdd("T_Employee") && User.CanUseVerb("ImportExcel", "T_Employee", User))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <a  onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_Employee") + "');")>
                        <i class="fa fa-upload" style="margin-right:3px"></i>    Import Excel
                                         
                 </a>
				}
			}

                                  
                                </li>

                                <li>
				 @if (User.CanView("T_Employee") && User.CanUseVerb("ExportExcel", "T_Employee", User))
                {
					<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_Employee",getSortHtmlAttributes(null, false, null, true), null) + "');")>
						<i class="fa fa-download" style="margin-right:3px"></i>  Export Excel
                    
					</a>
				}
                                   
                                </li>
                               			<li>
                <a class="collapse-data-btn" id="btnShowHideT_Employee" data-original-title="Show/Hide Column" data-placement="top" onclick=@Html.Raw("showhideColumns(event,'T_Employee');")>
                    <span class="fa fa-table"></span>  Show/Hide Column
                </a>
            </li>
                 
                            </ul>
                        </div>

</div>					

				<div class="pull-right" style="width:300px; padding-top:4px; ">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_Employee", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_EmployeeSearch" onclick="SearchClick(event, 'T_Employee', '@Html.Raw(Url.Action("Index", "T_Employee", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px; border:1px solid #ccc" ><span class="fa fa-search"></span></a>
								<a id="T_EmployeeDeepSearch" onclick="SearchClick(event, 'T_Employee', '@Html.Raw(Url.Action("Index", "T_Employee", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = true, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString() ,viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName');" data-original-title="Detail Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px; border:1px solid #ccc; display:none;"><span class="fam-zoom-in"></span></a>
 @if (ViewData["HostingEntity"]==null)
	{ 
			 <a href="@(Url.Action("SetFSearch", "T_Employee")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px; border:1px solid #ccc"><span class="fa fa-binoculars"></span></a>
	}
								<button id="T_EmployeeCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Employee','@Html.Raw(Url.Action("Index", "T_Employee", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px; border:1px solid #ccc">
                                    <span class="fa fa-minus-circle"></span>
                                </button>
                                <button id="T_EmployeeSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Employee','@Html.Raw(Url.Action("Index", "T_Employee", new {IsFilter=ViewData["IsFilter"], itemsPerPage=Convert.ToInt32(ViewBag.PageSize),HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px; border:1px solid #ccc">
                                    <span class="fa fa-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
            

			 <div style="clear:both"></div>
 @if (ViewData["HostingEntity"]==null)
	{ 
	if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_Employee" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
						 <a href="@Url.Action("Index", "T_Employee",new { viewtype = Convert.ToString(ViewBag.TemplatesName)})" style="margin-left:5px;float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
						  <a href="@(Url.Action("SetFSearch", "T_Employee")+Request.Url.Query)" style="float:right" ><span class="glyphicon glyphicon-edit"></span> Modify</a>
            </div>
	}
}
	@Html.Partial("~/Views/T_Employee/ShowHideColumns.cshtml") 
  @if (Model.Count > 0)
        {
						<div class="ViewMessage" style="margin-top: 0px;"> 
							<label><input type="checkbox" value="" class="tip-top" data-placement="top" data-original-title="Select All" onclick="CommonSelectAllRows(this, 'divTurantoGrid');"> Select All</label>
							
						</div>
		}
         <div id="divTurantoGrid">
	  @if (Model.Count > 0)
	{
	
foreach (var item in Model) {
  <div class="white-panel">
   <h4 title="@item.DisplayValue" style="width:98%; white-space: nowrap;overflow: hidden;text-overflow: ellipsis;display:inline-block; margin-left:-3px; margin-top:-1px; font-size:12px; ">@item.DisplayValue</h4>
   <div class="GenappGrid">
					
				@if(User.CanView("T_Employee","T_EmployeeAtFacilityID"))
				{
				var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EmployeeAtFacilityID");
			 <div class="col-sm-12 listwrapper" title="Employee At Facility" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Facility" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeAtFacility"?"hidden":"")>
			 <div class="col2">
                <div class="col-sm-4 listcolLeft overflow" style="text-align:left; padding:0px; margin:0px; font-weight:bold">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_EmployeeAtFacilityID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
						@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EmployeeAtFacilityID")
						{<i class="fa fa-sort-desc"></i>}
						@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EmployeeAtFacilityID")
						{<i class="fa fa-sort-asc"></i>}
                </div>
										 <div class="col-sm-8 listcolRight overflow" title="@Html.DisplayFor(modelItem => item.t_employeeatfacility.DisplayValue)">
					: @Html.DisplayFor(modelItem => item.t_employeeatfacility.DisplayValue)
				</div>
						</div>  
       </div>
	  }

			@if(User.CanView("T_Employee","T_PID"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_PID");
			<div class="col-sm-12 listwrapper" >
			<div class="col3">
                <div class="col-sm-4 listcolLeft overflow" title="PID">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_PID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_PID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_PID")
				{<i class="fa fa-sort-asc"></i>}
                </div>
                <div class="col-sm-8 listcolRight overflow" title='@Html.DisplayFor(modelItem => item.T_PID)'>
                  : @Html.DisplayFor(modelItem => item.T_PID)
                </div>
             </div>
		  </div>
			}
						@if(User.CanView("T_Employee","T_DateOfBirth"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_DateOfBirth");
			<div class="col-sm-12 listwrapper" >
			<div class="col4">
                <div class="col-sm-4 listcolLeft overflow" title="Date Of Birth">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_DateOfBirth", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_DateOfBirth")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_DateOfBirth")
				{<i class="fa fa-sort-asc"></i>}
                </div>
                <div class="col-sm-8 listcolRight overflow" title='@Html.DisplayFor(modelItem => item.T_DateOfBirth)'>
                  : @Html.DisplayFor(modelItem => item.T_DateOfBirth)
                </div>
             </div>
		  </div>
			}
							
				@if(User.CanView("T_Employee","T_EmployeeStatusID"))
				{
				var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EmployeeStatusID");
			 <div class="col-sm-12 listwrapper" title="Employee Status" @(Convert.ToString(ViewData["HostingEntity"]) == "T_EmployeeStatusCode" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeStatus"?"hidden":"")>
			 <div class="col5">
                <div class="col-sm-4 listcolLeft overflow" style="text-align:left; padding:0px; margin:0px; font-weight:bold">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_EmployeeStatusID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
						@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EmployeeStatusID")
						{<i class="fa fa-sort-desc"></i>}
						@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EmployeeStatusID")
						{<i class="fa fa-sort-asc"></i>}
                </div>
										@if (item.t_employeestatus != null  && !string.IsNullOrEmpty(item.t_employeestatus.DisplayValue))
				{
				 <div class="col-sm-8 listcolRight overflow" title="@Html.DisplayFor(modelItem => item.t_employeestatus.DisplayValue)">
						: @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_employeestatus.DisplayValue).ToString()), User.CanEdit("T_EmployeeStatusCode") ? "Edit" : "Details", "T_EmployeeStatusCode", new { Id = Html.DisplayFor(modelItem => item.t_employeestatus.Id).ToString() },null)
				</div>
			    }
		</div>  
       </div>
	  }

			@if(User.CanView("T_Employee","T_LastName"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_LastName");
			<div class="col-sm-12 listwrapper" >
			<div class="col6">
                <div class="col-sm-4 listcolLeft overflow" title="Last Name">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_LastName", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_LastName")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_LastName")
				{<i class="fa fa-sort-asc"></i>}
                </div>
                <div class="col-sm-8 listcolRight overflow" title='@Html.DisplayFor(modelItem => item.T_LastName)'>
                  : @Html.DisplayFor(modelItem => item.T_LastName)
                </div>
             </div>
		  </div>
			}
						@if(User.CanView("T_Employee","T_FirstName"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_FirstName");
			<div class="col-sm-12 listwrapper" >
			<div class="col7">
                <div class="col-sm-4 listcolLeft overflow" title="First Name">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_FirstName", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_FirstName")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_FirstName")
				{<i class="fa fa-sort-asc"></i>}
                </div>
                <div class="col-sm-8 listcolRight overflow" title='@Html.DisplayFor(modelItem => item.T_FirstName)'>
                  : @Html.DisplayFor(modelItem => item.T_FirstName)
                </div>
             </div>
		  </div>
			}
						@if(User.CanView("T_Employee","T_MiddleName"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_MiddleName");
			<div class="col-sm-12 listwrapper" >
			<div class="col8">
                <div class="col-sm-4 listcolLeft overflow" title="Middle Name">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_MiddleName", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_MiddleName")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_MiddleName")
				{<i class="fa fa-sort-asc"></i>}
                </div>
                <div class="col-sm-8 listcolRight overflow" title='@Html.DisplayFor(modelItem => item.T_MiddleName)'>
                  : @Html.DisplayFor(modelItem => item.T_MiddleName)
                </div>
             </div>
		  </div>
			}
						@if(User.CanView("T_Employee","T_WorkEmail"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_WorkEmail");
			<div class="col-sm-12 listwrapper" >
			<div class="col9">
                <div class="col-sm-4 listcolLeft overflow" title="Work Email">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_WorkEmail", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_WorkEmail")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_WorkEmail")
				{<i class="fa fa-sort-asc"></i>}
                </div>
                <div class="col-sm-8 listcolRight overflow" title='@Html.DisplayFor(modelItem => item.T_WorkEmail)'>
                  : @Html.DisplayFor(modelItem => item.T_WorkEmail)
                </div>
             </div>
		  </div>
			}
							
				@if(User.CanView("T_Employee","T_CurrentEmployeeEmploymentProfileID"))
				{
				var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_CurrentEmployeeEmploymentProfileID");
			 <div class="col-sm-12 listwrapper" title="Current Employee Employment Profile" @(Convert.ToString(ViewData["HostingEntity"]) == "T_ServiceRecord" && Convert.ToString(ViewData["AssociatedType"]) == "T_CurrentEmployeeEmploymentProfile"?"hidden":"")>
			 <div class="col10">
                <div class="col-sm-4 listcolLeft overflow" style="text-align:left; padding:0px; margin:0px; font-weight:bold">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_CurrentEmployeeEmploymentProfileID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
						@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_CurrentEmployeeEmploymentProfileID")
						{<i class="fa fa-sort-desc"></i>}
						@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_CurrentEmployeeEmploymentProfileID")
						{<i class="fa fa-sort-asc"></i>}
                </div>
										 <div class="col-sm-8 listcolRight overflow" title="@Html.DisplayFor(modelItem => item.t_currentemployeeemploymentprofile.DisplayValue)">
					: @Html.DisplayFor(modelItem => item.t_currentemployeeemploymentprofile.DisplayValue)
				</div>
						</div>  
       </div>
	  }

				
				@if(User.CanView("T_Employee","T_CurrentEmployeeJobAssignmentID"))
				{
				var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_CurrentEmployeeJobAssignmentID");
			 <div class="col-sm-12 listwrapper" title="Current Employee Job Assignment" @(Convert.ToString(ViewData["HostingEntity"]) == "T_JobAssignment" && Convert.ToString(ViewData["AssociatedType"]) == "T_CurrentEmployeeJobAssignment"?"hidden":"")>
			 <div class="col11">
                <div class="col-sm-4 listcolLeft overflow" style="text-align:left; padding:0px; margin:0px; font-weight:bold">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_CurrentEmployeeJobAssignmentID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
						@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_CurrentEmployeeJobAssignmentID")
						{<i class="fa fa-sort-desc"></i>}
						@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_CurrentEmployeeJobAssignmentID")
						{<i class="fa fa-sort-asc"></i>}
                </div>
										 <div class="col-sm-8 listcolRight overflow" title="@Html.DisplayFor(modelItem => item.t_currentemployeejobassignment.DisplayValue)">
					: @Html.DisplayFor(modelItem => item.t_currentemployeejobassignment.DisplayValue)
				</div>
						</div>  
       </div>
	  }

				
				@if(User.CanView("T_Employee","T_EmployeeGenderID"))
				{
				var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EmployeeGenderID");
			 <div class="col-sm-12 listwrapper" title="Employee Gender" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Gender" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeGender"?"hidden":"")>
			 <div class="col12">
                <div class="col-sm-4 listcolLeft overflow" style="text-align:left; padding:0px; margin:0px; font-weight:bold">
                   @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Employee", getSortHtmlAttributes("T_EmployeeGenderID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Employee');", @Style = "text-decoration: none;color: inherit;" })
						@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EmployeeGenderID")
						{<i class="fa fa-sort-desc"></i>}
						@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EmployeeGenderID")
						{<i class="fa fa-sort-asc"></i>}
                </div>
										@if (item.t_employeegender != null  && !string.IsNullOrEmpty(item.t_employeegender.DisplayValue))
				{
				 <div class="col-sm-8 listcolRight overflow" title="@Html.DisplayFor(modelItem => item.t_employeegender.DisplayValue)">
						: @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_employeegender.DisplayValue).ToString()), User.CanEdit("T_Gender") ? "Edit" : "Details", "T_Gender", new { Id = Html.DisplayFor(modelItem => item.t_employeegender.Id).ToString() },null)
				</div>
			    }
		</div>  
       </div>
	  }


 @if (User.CanView("T_Langauge") && User.CanView("T_ConversationalEmployeeForeignLanguage"))
				{
			<div class="col-sm-12 listwrapper" >
			 <div class="col14">
                <div class="col-sm-4 listcolLeft overflow" title="Language">
                   Conversational Foreign Language :
                </div>
                <div class="col-sm-8 listcolRight overflow">
                @if (item.T_ConversationalEmployeeForeignLanguage_t_employee != null)
                {
                    foreach (var chkitem in item.T_ConversationalEmployeeForeignLanguage_t_employee)
                    {

                        <input type="checkbox" disabled name="SelectedT_Langauge_T_ConversationalEmployeeForeignLanguage" value="@chkitem.Id" checked /> @chkitem.t_langauge.DisplayValue
                        <br />

                    }
                }
                </div>
             </div>
		</div>
	}
 @if (User.CanView("T_Langauge") && User.CanView("T_LanguageCertifiedIn"))
				{
			<div class="col-sm-12 listwrapper" >
			 <div class="col15">
                <div class="col-sm-4 listcolLeft overflow" title="Language">
                   Languages Certified In :
                </div>
                <div class="col-sm-8 listcolRight overflow">
                @if (item.T_LanguageCertifiedIn_t_employee != null)
                {
                    foreach (var chkitem in item.T_LanguageCertifiedIn_t_employee)
                    {

                        <input type="checkbox" disabled name="SelectedT_Langauge_T_LanguageCertifiedIn" value="@chkitem.Id" checked /> @chkitem.t_langauge.DisplayValue
                        <br />

                    }
                }
                </div>
             </div>
		</div>
	}
				<table>
                    <tr>
                        <td>
                            <input type="checkbox" id="@item.Id" onclick="CommonSelectForBulkOperation(this,'@item.Id', 'divTurantoGrid');" style="position:absolute; top:5px; left:5px;  height:15px; width:15px;" />

                        </td>
                    </tr>
                </table>
			 <div class="pull-right" style="position:absolute; top:5px; right:5px;">
                  <button data-toggle="dropdown" class="btn dropdown-toggle btn-default btn-xs">
                   <span class="caret">    </span>
                   </button>
                        <ul class="dropdown-menu pull-left">
                         
                         
                           
@if (User.CanUseVerb("SendEmailtoIT","T_Employee",User))
                   {
				<li style="height:30px !important; margin:0px; ">
                        <a onclick="ExcuteSingleVerb('T_Employee',this);" dataurl="@Url.Action("SendEmailtoIT","T_Employee", new { id = item.Id },null)"><i class="glyphicon glyphicon-edit"></i>  Send Email to IT</a>
                </li>
				   }
				@if (User.CanEdit("T_Employee"))
                {
				<li style="height:30px !important; margin:0px; ">
                        <a href="@Url.Action("Edit","T_Employee", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    
                </li> 
				}
			@if (User.CanDelete("T_Employee"))
                 {
				<li style="height:30px !important; margin:0px; ">
                    <a href="@Url.Action("Delete", "T_Employee", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="glyphicon glyphicon-remove-sign" style="color: #E7574B;"></i> Delete</a>
                </li>
				 }

	<li class="dropdown-submenu pull-left" style="height:30px !important; margin:0px;" id="AddAssociationdropmenuT_Employee_@item.Id">
	 @{ var dropmenu = false; }
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if ( User.CanAdd("FileDocument"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "FileDocument", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeDocuments", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Document
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_Licenses"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Licenses", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_LicenseRecords", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Licenses
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_EmployeeInjury"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_EmployeeInjury", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeEmployeeInjury", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Injury
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_BackgroundCheck"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_BackgroundCheck", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeCriminalBackgroundCheck", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Background Check 
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_Comment"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeComments", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Employee Comments
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_LeaveProfile"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_LeaveProfile", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeLeaveProfile", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Leave 
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_Education"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Education", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeEducation", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Education
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_Accommodation"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Accommodation", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeAccomodation", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Accommodation
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_ServiceRecord"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ServiceRecord", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeEmploymentProfile", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Service Record
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_JobAssignment"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeJobAssignment", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Job Assignment
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_PayDetails"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_PayDetails", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeePayDetails", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Salary And Bonus
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_DrugAlcoholTest"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_DrugAlcoholTest", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeDrugAlcoholTest", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Drug & Alcohol Test
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_UnitX"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_UnitX", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeAdministrator", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Administrator For
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_UnitX"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_UnitX", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeUnitXHead", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Head For 
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_JobAssignment"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_JobAssignmentManagerEmployee", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Manager For
						</a>
				</li>
	
				}
							@if ( User.CanAdd("T_JobAssignment"))
				{ dropmenu = true;
				<li style="height:30px !important; margin:0px; ">
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_JobAssignment", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_EmployeeSupervisor", 
							HostingEntityName = "T_Employee",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Supervisor For
						</a>
				</li>
	
				}
			</ul>
</li>
@if(!dropmenu)
{
    <script>
        $("#AddAssociationdropmenuT_Employee_@item.Id").hide();
    </script>
}
 <li class="dropdown-submenu pull-left" style="height:30px !important; margin:0px;">
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-zoom small"></i> Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_Department", new {sourceEntity="T_Employee",id=item.Id}, null)">Department</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_Position", new {sourceEntity="T_Employee",id=item.Id}, null)">Position</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_DepartmentArea", new {sourceEntity="T_Employee",id=item.Id}, null)">Department Area</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_ClaimType", new {sourceEntity="T_Employee",id=item.Id}, null)">Claim Type</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_Restrictions", new {sourceEntity="T_Employee",id=item.Id}, null)">Restrictions</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_UnitX", new {sourceEntity="T_Employee",id=item.Id}, null)">UnitX</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_Unit", new {sourceEntity="T_Employee",id=item.Id}, null)">Unit</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_SalaryRange", new {sourceEntity="T_Employee",id=item.Id}, null)">Salary Range</a>
</li>
<li  style="height:30px !important; margin:0px; ">
		<a href="@Url.Action("FindFSearch", "T_FacilityConfiguration", new {sourceEntity="T_Employee",id=item.Id}, null)">Facility Configuration</a>
</li>
</ul>
</li>
                        </ul>
 </div>
 
                    <div class="btn-group text-center" style="margin-top:10px;">
                        <a title="View" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee",
                        new { id = item.Id, AssociatedType = ViewData["AssociatedType"],
                            HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
                            HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName)  },
                            null)" class="btn btn-default">
                            <span class="glyphicon glyphicon-eye-open icon-listbut"></span>
                        </a>
					@if (User.CanEdit("T_Employee"))
						{
						<a title="Quick Edit"
							 class="btn btn-default" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Employee','dvPopup','" + Url.Action("EditQuick", "T_Employee", new
								{
									id = item.Id,
									UrlReferrer = Request.Url,
									AssociatedType = ViewData["AssociatedType"],
									HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
									HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
									TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
								}) + "')")">
							<span class="fa fa-pencil icon-listbut"></span>
						</a>
					}
					@if (User.CanEdit("T_Employee"))
                      {
                        <a title="Full Edit" href="@Url.Action("Edit","T_Employee",
                        new { id = item.Id,  UrlReferrer = BackUrl,
                            AssociatedType=ViewData["AssociatedType"],
                            HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
                            HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },
                            null)" class="btn btn-default">
                            <span class="glyphicon glyphicon-edit icon-listbut"></span>
                         </a>
					  }
						 <!--<a title="More" href="" class="btn btn-default">
                            <span class="fa fa-chevron-circle-down"></span>
                         </a>-->
					  </div>
					</div>
				  </div>
						   //model loop end    
                            }
					}
						else
                           {
                                    <div class="ViewMessage"> <i class="fa fa-info-circle"></i> No Record Available!</div>
                           }
						   @Html.Hidden("SelectedItems")
                   </div>
				 </div>
				 
  			   @if (Model.Count > 0)
                {
                    <div id="pagination" class="MyPagination1">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Employee", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "12", 12 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_Employee",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_Employee','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Employee",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                        </div>
                    </div>
                }
				@Html.DropDownList("EntityT_EmployeeDisplayValue", null,null, new { @Style = "display:none;" })
           
        </div>
    </div> 
 </div>
    <div class="modal fade" id="ShowGraphT_Employee" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_EmployeeLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:80%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphT_EmployeeLabel">Dashboard Employee</h4>
                </div>
				 <div  class="modal-body" >
						<div id="dvShowGraphT_Employee" data-url="@Url.Action("ShowGraph", "T_Employee" , new { type = "all" })">
						</div>
						<div style="clear:both"></div>
                </div>
                
            </div>
        </div>
    </div>
<script>
    $(document).ready(function () {
        $('#divTurantoGrid').TurantoGrid({
            no_columns: 4,
            padding_x: 10,
            padding_y: 10,
            margin_bottom: 50,
            single_column_breakpoint: 700
        });
    });

    (function ($, window, document, undefined) {
        var pluginName = 'TurantoGrid',
            defaults = {
                padding_x: 10,
                padding_y: 10,
                no_columns: 3,
                margin_bottom: 50,
                single_column_breakpoint: 700
            },
            columns,
            $article,
            article_width;

        function Plugin(element, options) {
            this.element = element;
            this.options = $.extend({}, defaults, options);
            this._defaults = defaults;
            this._name = pluginName;
            this.init();
        }

        Plugin.prototype.init = function () {
            var self = this,
                resize_finish;

            $(window).resize(function () {
                clearTimeout(resize_finish);
                resize_finish = setTimeout(function () {
                    self.make_layout_change(self);
                }, 11);
            });

            self.make_layout_change(self);

            setTimeout(function () {
                $(window).resize();
            }, 500);
        };

        Plugin.prototype.calculate = function (single_column_mode) {
            var self = this,
                tallest = 0,
                row = 0,
                $container = $(this.element),
                container_width = $container.width();
            $article = $(this.element).children();

            if (single_column_mode === true) {
                article_width = $container.width() - self.options.padding_x;
            } else {
                article_width = ($container.width() - self.options.padding_x * self.options.no_columns) / self.options.no_columns;
            }

            $article.each(function () {
                $(this).css('width', article_width);
            });

            columns = self.options.no_columns;

            $article.each(function (index) {
                var current_column,
                    left_out = 0,
                    top = 0,
                    $this = $(this),
                    prevAll = $this.prevAll(),
                    tallest = 0;

                if (single_column_mode === false) {
                    current_column = (index % columns);
                } else {
                    current_column = 0;
                }

                for (var t = 0; t < columns; t++) {
                    $this.removeClass('c' + t);
                }

                if (index % columns === 0) {
                    row++;
                }

                $this.addClass('c' + current_column);
                $this.addClass('r' + row);

                prevAll.each(function (index) {
                    if ($(this).hasClass('c' + current_column)) {
                        top += $(this).outerHeight() + self.options.padding_y;
                    }
                });

                if (single_column_mode === true) {
                    left_out = 0;
                } else {
                    left_out = (index % columns) * (article_width + self.options.padding_x);
                }

                $this.css({
                    'left': left_out,
                    'top': top
                });
            });

            this.tallest($container);
            $(window).resize();
        };

        Plugin.prototype.tallest = function (_container) {
            var column_heights = [],
                largest = 0;

            for (var z = 0; z < columns; z++) {
                var temp_height = 0;
                _container.find('.c' + z).each(function () {
                    temp_height += $(this).outerHeight();
                });
                column_heights[z] = temp_height;
            }

            largest = Math.max.apply(Math, column_heights);
            _container.css('height', largest + (this.options.padding_y + this.options.margin_bottom));
        };

        Plugin.prototype.make_layout_change = function (_self) {
            if ($(window).width() < _self.options.single_column_breakpoint) {
                _self.calculate(true);
            } else {
                _self.calculate(false);
            }
        };

        $.fn[pluginName] = function (options) {
            return this.each(function () {
                if (!$.data(this, 'plugin_' + pluginName)) {
                    $.data(this, 'plugin_' + pluginName,
                    new Plugin(this, options));
                }
            });
        }

    })(jQuery, window, document);

</script>
<script>

    $(document).ready(function () {

        loadGallery(true, 'a.thumbnail');

        //This function disables buttons when needed
        function disableButtons(counter_max, counter_current) {
            $('#show-previous-image, #show-next-image').show();
            if (counter_max == counter_current) {
                $('#show-next-image').hide();
            } else if (counter_current == 1) {
                $('#show-previous-image').hide();
            }
        }



        function loadGallery(setIDs, setClickAttr) {
            var current_image,
                selector,
                counter = 0;

            $('#show-next-image, #show-previous-image').click(function () {
                if ($(this).attr('id') == 'show-previous-image') {
                    current_image--;
                } else {
                    current_image++;
                }

                selector = $('[data-image-id="' + current_image + '"]');
                updateGallery(selector);
            });

            function updateGallery(selector) {
                var $sel = selector;
                current_image = $sel.data('image-id');
                $('#image-gallery-caption').text($sel.data('caption'));
                $('#image-gallery-title').text($sel.data('title'));
                $('#image-gallery-image').attr('src', $sel.data('image'));
                disableButtons(counter, $sel.data('image-id'));
            }

            if (setIDs == true) {
                $('[data-image-id]').each(function () {
                    counter++;
                    $(this).attr('data-image-id', counter);
                });
            }
            $(setClickAttr).on('click', function () {
                updateGallery($(this));
            });
        }
    });

</script>
