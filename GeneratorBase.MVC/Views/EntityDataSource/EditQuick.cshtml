@model GeneratorBase.MVC.Models.EntityDataSource
@using PagedList;
@{
    ViewBag.Title = "Edit Entity Data Source";
    var EditPermission = User.CanEditItem("EntityDataSource", Model, User);
    var DeletePermission = User.CanDeleteItem("EntityDataSource", Model, User);
    Layout = null;
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("EntityDataSource", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
                $('#' + hostingEntityName + 'ID').trigger("change");
            }
            $("#SourceType").val('@Model.SourceType');
            $("#MethodType").val('@Model.MethodType');
            $("#Action").val('@Model.Action');
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityDataSourceIsHiddenRule))
    {
        @Html.Raw(ViewBag.EntityDataSourceIsHiddenRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<div class="row">
    <div class="col-lg-12">

        <label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
        <div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
        <h2 class="text-primary">
            <span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
        </h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
@using (Html.BeginForm("EditQuick", "EntityDataSource", new { UrlReferrer = Convert.ToString(ViewData["EntityDataSourceParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.ConcurrencyKey)
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
            <div class="panel panel-default AppForm">
                <div class="panel-body">
                    @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
                    <div class="row">
                        @if (User.CanView("EntityDataSource", "EntityName"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityName">
                                <div class='form-group'>
                                    <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.EntityName)  <span class="text-danger-reg">*</span> </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                        @Html.DropDownList("EntityName", null, "-- Select --", new { @required = "required", @class = "form-control" })
                                          @*@Html.TextBoxFor(model => model.EntityName, getHtmlAttributes("EntityName"))*@
                                        @Html.ValidationMessageFor(model => model.EntityName)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
                        @if (User.CanView("EntityDataSource", "DataSource"))
                        {
                            <div class='col-sm-12 col-md-12 col-xs-12' id="dvDataSource">
                                <div class='form-group'>
                                    <label class="col-sm-2 col-md-2 col-xs-12" style="width:105px;">@Html.LabelFor(model => model.DataSource) </label>
                                    <div class="input-group col-sm-10 col-md-10 col-xs-12" style="width:400px;">
                                        @Html.TextAreaFor(model => model.DataSource, new { @class="form-control",@style="height:90px !important"})
                                        @Html.ValidationMessageFor(model => model.DataSource)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.DataSource, new { @class = "form-control" })}
                        @if (User.CanView("EntityDataSource", "SourceType"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvSourceType">
                                <div class='form-group'>
                                    <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.SourceType)   </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                        @*@Html.TextBoxFor(model => model.SourceType, getHtmlAttributes("SourceType"))*@
                                        <select id="SourceType" name="SourceType" class="form-control">
                                            <option value="JSON">Json</option>
                                            <option value="XML">XML</option>
                                            <option value="DATABASE">Database</option>
                                        </select>
                                        @Html.ValidationMessageFor(model => model.SourceType)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.SourceType, new { @class = "form-control" })}
                        @if (User.CanView("EntityDataSource", "MethodType"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvMethodType">
                                <div class='form-group'>
                                    <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.MethodType)   </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                        @*@Html.TextBoxFor(model => model.MethodType, getHtmlAttributes("MethodType"))*@
                                        <select id="MethodType" name="MethodType" class="form-control">
                                            <option value="GET">GET</option>
                                            <option value="POST">POST</option>
                                        </select>
                                        @Html.ValidationMessageFor(model => model.MethodType)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.MethodType, new { @class = "form-control" })}
                        @if (User.CanView("EntityDataSource", "Action"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvAction">
                                <div class='form-group'>
                                    <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.Action)   </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                        @*@Html.TextBoxFor(model => model.Action, getHtmlAttributes("Action"))*@
                                        <select id="Action" name="Action" class="form-control">
                                            <option value="GETLIST">GetList</option>
                                            <option value="CREATE">Create</option>
                                            <option value="UPDATE">Update</option>
                                            <option value="GETITEM">GetItem</option>
                                        </select>
                                        @Html.ValidationMessageFor(model => model.Action)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.Action, new { @class = "form-control" })}
                       
                        @if (User.CanView("EntityDataSource", "other"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvother">
                                <div class='form-group'>
                                    <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.other)   </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                        @Html.TextBoxFor(model => model.other, getHtmlAttributes("other"))
                                        @Html.ValidationMessageFor(model => model.other)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.other, new { @class = "form-control" })}
                        @if (User.CanView("EntityDataSource", "flag"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvflag">
                                <div class="form-group">
                                    <label class="col-sm-5 col-md-5 col-xs-12">
                                        @Html.LabelFor(model => model.flag)
                                    </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                        @*@Html.CheckBoxFor(model => model.flag)*@
                                        @Html.CheckBox("flag", Model.flag.HasValue ? Model.flag : false)
                                        @Html.ValidationMessageFor(model => model.flag)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.flag, new { @class = "form-control" })}
                    </div>


                </div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken();
    <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
    if (EditPermission)
    {
        <input type="submit" name="command" value="Save" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,true,'EntityDataSource','@ViewData["AssociatedType"]');" />
        <input type="hidden" name="hdncommand" value="" />
    }
}

@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/Common3/chosen.jquery.js" type="text/javascript"></script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
</script>
@{
    var busineesrule = User.businessrules.Where(p => p.EntityName == "EntityDataSource").ToList();
    if ((busineesrule != null && busineesrule.Count > 0))
    {
        <script>
            $(document).ready(function () {
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetLockBusinessRules", "EntityDataSource")",
                    data: $("form").serialize(),
                    success: function (data) {
                        if (data.length > 0) {
                            $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                            document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetReadOnlyProperties", "EntityDataSource")",
                    data: $("form").serialize(),
                    success: function (data) {
                        for (var key in data) {
                            $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                            $("input[type='radio'][name='" + key + "']").attr('disabled', 'disabled').attr('readonly', 'readonly');
                            $('form').append('<input type="hidden" name="' + key + '" id="' + key + '" value="' + $('#' + key).val() + '" />');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            });
        </script>
        <script>
            $("form").submit(function () {
                var flag = true;

                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetMandatoryProperties", "EntityDataSource")",
                    data: $(this).serialize(),
                    success: function (data) {
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        document.getElementById('ErrMsg').innerHTML = "";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0) {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                if (flag)
                    $("form").find(':input').removeAttr('disabled');
                return flag;
            });
        </script>
    }
    else
    {

    }
}


