@model GeneratorBase.MVC.Models.ApplicationFeedback
@using PagedList;
@{
    ViewBag.Title = "Edit Application Feedback";

}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (Property == "CommentId")
            return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("ApplicationFeedback", Property))
        {
            return new { @class = "form-control" };
        }
        return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
            }
        }
        catch (ex) { }
    });
</script>
<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title">
            <i class="glyphicon glyphicon-edit text-primary"></i> Application Feedback  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>
        </h1>
        <label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
        <h2 class="text-primary">
            @Html.DisplayFor(model => model.DisplayValue)
        </h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
<div class="tabbable responsive">
    <ul class="nav nav-tabs">
        <li class="active"><a href="#Details" data-toggle="tab">Details</a></li>
        <li @(!User.CanView("JournalEntry") ? "style=display:none;" : "")><a href="#JournalEntryToApplicationFeedbackRelation" data-toggle="tab">Application Feedback Journal</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
            @using (Html.BeginForm("Edit", "ApplicationFeedback", new { UrlReferrer = Convert.ToString(ViewData["ApplicationFeedbackParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                Html.ValidationSummary(true);
                Html.EnableClientValidation();
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
                                            <h3 class="panel-title">Feedback Details</h3>
                                        </div>
                                        <div class="panel-body">
                                            @if (User.CanView("ApplicationFeedback", "Summary"))
                                            {
                                                <div class='col-sm-12 col-md-12 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.Summary) <span class="text-danger-reg">*</span></label>
                                                        <div>
                                                            @Html.TextAreaFor(model => model.Summary, new { @required = "required", @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.Summary)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.Summary, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "Description"))
                                            {
                                                <div class='col-sm-12 col-md-12 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.Description) </label>
                                                        <div>
                                                            @Html.TextAreaFor(model => model.Description, getHtmlAttributes("Description"))
                                                            @Html.ValidationMessageFor(model => model.Description)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.Description, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "AttachImage") && User.CanView("Document"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        @Html.TextBoxFor(model => model.AttachImage, new { @class = "hidden" })
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.AttachImage) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div style="position:relative;">
                                                                <a class='btn btn-primary btnupload' href='javascript:;'>
                                                                    Upload File
                                                                    <input id="File_AttachImage" type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;width:105px;' name="File_AttachImage" onchange='ValidateBeforeUpload(this);'>
                                                                </a>
                                                                &nbsp;
                                                                <span class='label uploadlblFix' id="upload-file-infoFile_AttachImage"></span>
                                                                <p class="text-primary">
                                                                    @if (!string.IsNullOrEmpty(Model.AttachImage))
                                                                    {
                                                                        @Html.ActionLink("Download", "Download", new { filename = Model.AttachImage })
                                                                    }
                                                                    else
                                                                    {<label>NA</label>}
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.AttachImage, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "AttachDocument") && User.CanView("Document"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        @Html.TextBoxFor(model => model.AttachDocument, new { @class = "hidden" })
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.AttachDocument) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div style="position:relative;">
                                                                <a class='btn btn-primary btnupload' href='javascript:;'>
                                                                    Upload File
                                                                    <input id="File_AttachDocument" type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;width:105px;' name="File_AttachDocument" onchange='$("#upload-file-infoFile_AttachDocument").css({ "font-size": "small" }).html($(this).val());'>
                                                                </a>
                                                                &nbsp;
                                                                <span class='label uploadlblFix' id="upload-file-infoFile_AttachDocument"></span>
                                                            </div>
                                                            <p class="text-primary">
                                                                @if (!string.IsNullOrEmpty(Model.AttachDocument))
                                                                {
                                                                    @Html.ActionLink("Download", "Download", new { filename = Model.AttachDocument })
                                                                }
                                                                else
                                                                {<label>NA</label>}
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.AttachDocument, new { @class = "form-control" })}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
                                            <h3 class="panel-title">About Feedback</h3>
                                        </div>
                                        <div class="panel-body">
                                            @if (User.CanView("ApplicationFeedback", "CommentId"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.CommentId)   </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            @Html.TextBoxFor(model => model.CommentId, getHtmlAttributes("CommentId"))
                                                            @Html.ValidationMessageFor(model => model.CommentId)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.CommentId, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackTypeID"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12' id="dvAssociatedApplicationFeedbackTypeID">
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.AssociatedApplicationFeedbackTypeID) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div class="input-group" style="width:100%;">
                                                                @if (User.CanEdit("ApplicationFeedback", "AssociatedApplicationFeedbackTypeID"))
                                                                {
                                                                    @Html.DropDownList("AssociatedApplicationFeedbackTypeID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "ApplicationFeedbackType", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackType", new { caller = "AssociatedApplicationFeedbackTypeID" }) })
                                                                }
                                                                else
                                                                {
                                                                    @Html.HiddenFor(model => model.AssociatedApplicationFeedbackTypeID, new { @class = "form-control" })
                                                                    @Html.DropDownList("AssociatedApplicationFeedbackTypeID", null, "-- Select --", new { @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "ApplicationFeedbackType", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackType", new { caller = "AssociatedApplicationFeedbackTypeID" }) })
                                                                }
                                                                @Html.ValidationMessageFor(model => model.AssociatedApplicationFeedbackTypeID)
                                                                @if (User.CanAdd("ApplicationFeedbackType"))
                                                                {
                                                                    <div class="input-group-btn">
                                                                        <a class="btn btn-default btn ie8fix" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Type','dvPopup','" + Url.Action("CreateQuick", "ApplicationFeedbackType", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
                                                                            <span class="glyphicon glyphicon-plus-sign"></span>
                                                                        </a>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.AssociatedApplicationFeedbackTypeID, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackStatusID"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12' id="dvAssociatedApplicationFeedbackStatusID">
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.AssociatedApplicationFeedbackStatusID) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div class="input-group" style="width:100%;">
                                                                @if (User.CanEdit("ApplicationFeedback", "AssociatedApplicationFeedbackStatusID"))
                                                                {
                                                                    @Html.DropDownList("AssociatedApplicationFeedbackStatusID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "ApplicationFeedbackStatus", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackStatus", new { caller = "AssociatedApplicationFeedbackStatusID" }) })
                                                                }
                                                                else
                                                                {
                                                                    @Html.HiddenFor(model => model.AssociatedApplicationFeedbackStatusID, new { @class = "form-control" })
                                                                    @Html.DropDownList("AssociatedApplicationFeedbackStatusID", null, "-- Select --", new { @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "ApplicationFeedbackStatus", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackStatus", new { caller = "AssociatedApplicationFeedbackStatusID" }) })
                                                                }
                                                                @Html.ValidationMessageFor(model => model.AssociatedApplicationFeedbackStatusID)
                                                                @if (User.CanAdd("ApplicationFeedbackStatus"))
                                                                {
                                                                    <div class="input-group-btn">
                                                                        <a class="btn btn-default btn ie8fix" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Status','dvPopup','" + Url.Action("CreateQuick", "ApplicationFeedbackStatus", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
                                                                            <span class="glyphicon glyphicon-plus-sign"></span>
                                                                        </a>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.AssociatedApplicationFeedbackStatusID, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackPriorityID"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12' id="dvApplicationFeedbackPriorityID">
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ApplicationFeedbackPriorityID) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div class="input-group" style="width:100%;">
                                                                @if (User.CanEdit("ApplicationFeedback", "ApplicationFeedbackPriorityID"))
                                                                {
                                                                    @Html.DropDownList("ApplicationFeedbackPriorityID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "FeedbackPriority", @dataurl = Url.Action("GetAllValue", "FeedbackPriority", new { caller = "ApplicationFeedbackPriorityID" }) })
                                                                }
                                                                else
                                                                {
                                                                    @Html.HiddenFor(model => model.ApplicationFeedbackPriorityID, new { @class = "form-control" })
                                                                    @Html.DropDownList("ApplicationFeedbackPriorityID", null, "-- Select --", new { @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "FeedbackPriority", @dataurl = Url.Action("GetAllValue", "FeedbackPriority", new { caller = "ApplicationFeedbackPriorityID" }) })
                                                                }
                                                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackPriorityID)
                                                                @if (User.CanAdd("FeedbackPriority"))
                                                                {
                                                                    <div class="input-group-btn">
                                                                        <a class="btn btn-default btn ie8fix" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Priority','dvPopup','" + Url.Action("CreateQuick", "FeedbackPriority", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
                                                                            <span class="glyphicon glyphicon-plus-sign"></span>
                                                                        </a>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.ApplicationFeedbackPriorityID, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackSeverityID"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12' id="dvApplicationFeedbackSeverityID">
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ApplicationFeedbackSeverityID) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div class="input-group" style="width:100%;">
                                                                @if (User.CanEdit("ApplicationFeedback", "ApplicationFeedbackSeverityID"))
                                                                {
                                                                    @Html.DropDownList("ApplicationFeedbackSeverityID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "FeedbackSeverity", @dataurl = Url.Action("GetAllValue", "FeedbackSeverity", new { caller = "ApplicationFeedbackSeverityID" }) })
                                                                }
                                                                else
                                                                {
                                                                    @Html.HiddenFor(model => model.ApplicationFeedbackSeverityID, new { @class = "form-control" })
                                                                    @Html.DropDownList("ApplicationFeedbackSeverityID", null, "-- Select --", new { @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "FeedbackSeverity", @dataurl = Url.Action("GetAllValue", "FeedbackSeverity", new { caller = "ApplicationFeedbackSeverityID" }) })
                                                                }
                                                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackSeverityID)
                                                                @if (User.CanAdd("FeedbackSeverity"))
                                                                {
                                                                    <div class="input-group-btn">
                                                                        <a class="btn btn-default btn ie8fix" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Severity','dvPopup','" + Url.Action("CreateQuick", "FeedbackSeverity", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
                                                                            <span class="glyphicon glyphicon-plus-sign"></span>
                                                                        </a>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.ApplicationFeedbackSeverityID, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackResourceID"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12' id="dvApplicationFeedbackResourceID">
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ApplicationFeedbackResourceID) </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div class="input-group" style="width:100%;">
                                                                @if (User.CanEdit("ApplicationFeedback", "ApplicationFeedbackResourceID"))
                                                                {
                                                                    @Html.DropDownList("ApplicationFeedbackResourceID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "FeedbackResource", @dataurl = Url.Action("GetAllValue", "FeedbackResource", new { caller = "ApplicationFeedbackResourceID" }) })
                                                                }
                                                                else
                                                                {
                                                                    @Html.HiddenFor(model => model.ApplicationFeedbackResourceID, new { @class = "form-control" })
                                                                    @Html.DropDownList("ApplicationFeedbackResourceID", null, "-- Select --", new { @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "FeedbackResource", @dataurl = Url.Action("GetAllValue", "FeedbackResource", new { caller = "ApplicationFeedbackResourceID" }) })
                                                                }
                                                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackResourceID)
                                                                @if (User.CanAdd("FeedbackResource"))
                                                                {
                                                                    <div class="input-group-btn">
                                                                        <a class="btn btn-default btn ie8fix" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Assigned To','dvPopup','" + Url.Action("CreateQuick", "FeedbackResource", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
                                                                            <span class="glyphicon glyphicon-plus-sign"></span>
                                                                        </a>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.ApplicationFeedbackResourceID, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "ReportedBy"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ReportedBy, new { @class = "lblFix" }) </label>
                                                    <div class="form-group">
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            <div class="col-sm-6 col-md-6 col-xs-12" id="datetimepickerReportedBy" style="padding-left:0px; padding-right:5px">
                                                                @Html.TextBoxFor(model => model.ReportedBy, "{0:MM/dd/yyyy hh:mm tt}", new { @class = "form-control", @readonly = "readonly", @format = "MM/DD/YYYY hh:mm" })
                                                            </div>
                                                            <div class="col-sm-6 col-md-6 col-xs-12" style="padding-left:0px; padding-right:0px">
                                                                @Html.TextBoxFor(model => model.ReportedByUser, new { @class = "form-control", @readonly = "readonly" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <script>
                                                    $(function () {
                                                        $("#ReportedBy").datetimepicker({});
                                                    });
                                                </script>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
                                            <h3 class="panel-title">Page Info</h3>
                                        </div>
                                        <div class="panel-body">
                                            @if (User.CanView("ApplicationFeedback", "EntityName"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.EntityName)   </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            @Html.TextBoxFor(model => model.EntityName, getHtmlAttributes("EntityName"))
                                                            @Html.ValidationMessageFor(model => model.EntityName)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "PropertyName"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.PropertyName)   </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            @Html.TextBoxFor(model => model.PropertyName, getHtmlAttributes("PropertyName"))
                                                            @Html.ValidationMessageFor(model => model.PropertyName)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.PropertyName, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "PageName"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.PageName)   </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            @Html.TextBoxFor(model => model.PageName, getHtmlAttributes("PageName"))
                                                            @Html.ValidationMessageFor(model => model.PageName)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.PageName, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "PageUrlTitle"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.PageUrlTitle)   </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            @Html.TextBoxFor(model => model.PageUrlTitle, getHtmlAttributes("PageUrlTitle"))
                                                            @Html.ValidationMessageFor(model => model.PageUrlTitle)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.PageUrlTitle, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "UIControlName"))
                                            {
                                                <div class='col-sm-6 col-md-6 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.UIControlName)   </label>
                                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                            @Html.TextBoxFor(model => model.UIControlName, getHtmlAttributes("UIControlName"))
                                                            @Html.ValidationMessageFor(model => model.UIControlName)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.UIControlName, new { @class = "form-control" })}
                                            @if (User.CanView("ApplicationFeedback", "PageUrl"))
                                            {
                                                <div class='col-sm-12 col-md-12 col-xs-12'>
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.PageUrl)   </label>
                                                        <div>
                                                            @Html.TextBoxFor(model => model.PageUrl, getHtmlAttributes("PageUrl"))
                                                            @Html.ValidationMessageFor(model => model.PageUrl)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            { @Html.HiddenFor(model => model.PageUrl, new { @class = "form-control" })}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @Html.AntiForgeryToken();
                @Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["ApplicationFeedbackParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" })
                <input type="submit" name="command" value="Save" class="btn btn-primary btn-sm" />
                <input type="submit" name="command" value="Save & Continue" class="btn btn-primary btn-sm" />
                <input type="hidden" name="hdncommand" value="" />
            }
        </div>
        <div class="tab-pane fade in" id="JournalEntryToApplicationFeedbackRelation">
            @if (User.CanView("JournalEntry"))
            {
                Html.RenderAction("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "ApplicationFeedback", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry" });
            }
        </div>
    </div> <!-- /tab-content --><br />
    <br />
</div>
<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
    function ValidateBeforeUpload(obj) {
        var validExtensions = ['jpg', 'gif', 'png', 'jpeg']; //array of valid extensions
        var fileName = obj.value;
        var fileNameExt = fileName.substr(fileName.lastIndexOf('.') + 1);
        if ($.inArray(fileNameExt, validExtensions) == -1) {
            $("#upload-file-infoFile_AttachImage").css({ 'color': "Red", "font-size": "small" }).html("Invalid file type " + "'." + fileNameExt + "'");
            return false;
        } else {
            $("#upload-file-infoFile_AttachImage").css({ 'color': "#428bca", "font-size": "small" }).html(fileName);
            return true;
        }
    }
</script>
@{
    var busineesrule = User.businessrules.Where(p => p.EntityName == "ApplicationFeedback").ToList();
    if ((busineesrule != null && busineesrule.Count > 0))
    {
        <script>
            $(document).ready(function () {
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetLockBusinessRules", "ApplicationFeedback")",
                    data: $("form").serialize(),
                    success: function (data) {
                        if (data.length > 0) {
                            $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                            document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetReadOnlyProperties", "ApplicationFeedback")",
                    data: $("form").serialize(),
                    success: function (data) {
                        for (var key in data) {
                            $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            });
        </script>
        <script>
            $("form").submit(function () {
                var flag = true;
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetMandatoryProperties", "ApplicationFeedback")",
                    data: $(this).serialize(),
                    success: function (data) {
                        document.getElementById('ErrMsg').innerHTML = "";
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0) {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                if (flag)
                    $("form").find(':input').removeAttr('disabled');
                return flag;
            });
        </script>
    }
}


