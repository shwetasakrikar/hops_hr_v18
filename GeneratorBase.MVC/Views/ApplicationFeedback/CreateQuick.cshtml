@model GeneratorBase.MVC.Models.ApplicationFeedback
@{
    ViewBag.Title = "Create Application Feedback";
    Layout = null;
    var pageurl = Request.UrlReferrer;
    var ModelEntity = ModelReflector.Entities.FirstOrDefault(p => p.Name == Convert.ToString(ViewData["EntityName"]));
    var EntityDisplayName =  Convert.ToString(ViewData["EntityName"]);
    if(ModelEntity != null)
    {
        EntityDisplayName = ModelEntity.DisplayName;
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
            }
        }
        catch (ex) { }
    });
</script>
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
@using (Html.BeginForm("CreateQuick", "ApplicationFeedback", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    <div class="row">
        @Html.Hidden("EntityName", ViewData["EntityName"])
        @Html.Hidden("FieldName", ViewData["FieldName"])
        @Html.Hidden("PageName", ViewData["PageName"])
        @Html.Hidden("PageUrlTitle", ViewData["EntityName"])
        @Html.Hidden("PageUrl", pageurl)
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="panel panel-default AppForm">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix">
                                    <i class="icon-calendar"></i>
                                    <h3 class="panel-title">Feedback Details</h3>
                                </div>
                                <div class="panel-body">
                                    <div class='col-sm-12'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.Summary) <span class="text-danger-reg">*</span></label>
                                            @Html.TextAreaFor(model => model.Summary, new {@required="required", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Summary)
                                        </div>
                                    </div>
                                    <div class='col-sm-12'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.Description) </label>
                                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Description)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix">
                                    <i class="icon-calendar"></i>
                                    <h3 class="panel-title">About Feedback</h3>
                                </div>
                                <div class="panel-body">
                                    <div class='col-sm-6'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.CommentId) </label>
                                            @Html.TextBoxFor(model => model.CommentId, new { @class = "form-control", @readonly = "readonly" })
                                            @Html.ValidationMessageFor(model => model.CommentId)
                                        </div>
                                    </div>
                                    <div class='col-sm-6' id="dvAssociatedApplicationFeedbackTypeID">
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.AssociatedApplicationFeedbackTypeID) </label>
                                            <div class="input-group" style="width: 100%;">
                                                @Html.DropDownList("AssociatedApplicationFeedbackTypeID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "ApplicationFeedbackType", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackType", new { caller = "AssociatedApplicationFeedbackTypeID" }) })
                                                @Html.ValidationMessageFor(model => model.AssociatedApplicationFeedbackTypeID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6' id="dvAssociatedApplicationFeedbackStatusID">
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.AssociatedApplicationFeedbackStatusID) </label>
                                            <div class="input-group" style="width: 100%;">
                                                @Html.DropDownList("AssociatedApplicationFeedbackStatusID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "ApplicationFeedbackStatus", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackStatus", new { caller = "AssociatedApplicationFeedbackStatusID" }) })
                                                @Html.ValidationMessageFor(model => model.AssociatedApplicationFeedbackStatusID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6' id="dvApplicationFeedbackPriorityID">
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.ApplicationFeedbackPriorityID) </label>
                                            <div class="input-group" style="width: 100%;">
                                                @Html.DropDownList("ApplicationFeedbackPriorityID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "FeedbackPriority", @dataurl = Url.Action("GetAllValue", "FeedbackPriority", new { caller = "ApplicationFeedbackPriorityID" }) })
                                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackPriorityID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6' id="dvApplicationFeedbackSeverityID">
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.ApplicationFeedbackSeverityID) </label>
                                            <div class="input-group" style="width: 100%;">
                                                @Html.DropDownList("ApplicationFeedbackSeverityID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "FeedbackSeverity", @dataurl = Url.Action("GetAllValue", "FeedbackSeverity", new { caller = "ApplicationFeedbackSeverityID" }) })
                                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackSeverityID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6' id="dvApplicationFeedbackResourceID">
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.ApplicationFeedbackResourceID) </label>
                                            <div class="input-group" style="width: 100%;">
                                                @Html.DropDownList("ApplicationFeedbackResourceID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "FeedbackResource", @dataurl = Url.Action("GetAllValue", "FeedbackResource", new { caller = "ApplicationFeedbackResourceID" }) })
                                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackResourceID)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix">
                                    <i class="icon-calendar"></i>
                                    <h3 class="panel-title">Page Info</h3>
                                </div>
                                <div class="panel-body">
                                    <div class='col-sm-6'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.EntityName) </label>
                                            @Html.TextBox("txtEntityName", EntityDisplayName, new { @readonly = "readonly", @class = "form-control" })
                                            @Html.TextBoxFor(model => model.EntityName, new { @Value = ViewData["EntityName"], @readonly = "readonly", @class = "form-control hidden" })
                                            @Html.ValidationMessageFor(model => model.EntityName)
                                        </div>
                                    </div>
                                    <div class='col-sm-6'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.PropertyName) </label>
                                            @Html.TextBoxFor(model => model.PropertyName, new { @Value = ViewData["FieldName"], @readonly = "readonly", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.PropertyName)
                                        </div>
                                    </div>
                                    <div class='col-sm-6'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.PageName) </label>
                                            @Html.TextBoxFor(model => model.PageName, new { @Value = ViewData["PageName"], @readonly = "readonly", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.PageName)
                                        </div>
                                    </div>
                                    <div class='col-sm-6'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.UIControlName) </label>
                                            @Html.TextBoxFor(model => model.UIControlName, new { @Value = ViewData["UIControlName"], @readonly = "readonly", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.UIControlName)
                                        </div>
                                    </div>
                                    <div class='col-sm-12'>
                                        <div class='form-group'>
                                            <label>@Html.LabelFor(model => model.PageUrl) </label>
                                            @Html.TextBoxFor(model => model.PageUrl, new { @readonly = "readonly", @Value = pageurl, @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.PageUrl)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
    var busineesrule = User.businessrules.Where(p => p.EntityName == "ApplicationFeedback").ToList();
    if (ViewBag.IsAddPop != null)
    {
        <input type="submit" value="Create" class="btn btn-primary btn-sm" onclick="QuickAdd(event,'@busineesrule',@busineesrule.Count);" />
    }
    else
    {
        <input type="submit" value="Create" class="btn btn-primary btn-sm" onclick="QuickAddFromIndex(event,true,'ApplicationFeedback','@ViewData["AssociatedType"]','@busineesrule',@busineesrule.Count);" />
    }
}
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/Common3/chosen.jquery.js" type="text/javascript"></script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>


