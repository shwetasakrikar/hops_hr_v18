@model GeneratorBase.MVC.Models.ApplicationFeedback
@using PagedList;
@{
    ViewBag.Title = "Edit Application Feedback";
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="CommentId")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("ApplicationFeedback", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
@using (Html.BeginForm("EditWizard", "ApplicationFeedback", new { UrlReferrer = Convert.ToString(ViewData["ApplicationFeedbackParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
	@Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
	<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
	<div class="row">
        <br />
        <div id=wizard>
			<ol>
		<li>Page Info</li>
		<li>About Feedback</li>
		<li>More Details</li>
		</ol>
			<div style="background-color:transparent; padding:0px;">
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="panel panel-default AppForm">
                            <div class="panel-heading clearfix">
                                <i class="icon-calendar"></i>
                                <h3 class="panel-title">Page Info</h3>
                            </div>
                            <div class="panel-body">
@if(User.CanView("ApplicationFeedback","EntityName"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.EntityName)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.EntityName,  getHtmlAttributes("EntityName"))
									@Html.ValidationMessageFor(model => model.EntityName)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","PropertyName"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.PropertyName)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.PropertyName,  getHtmlAttributes("PropertyName"))
									@Html.ValidationMessageFor(model => model.PropertyName)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.PropertyName, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","PageName"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.PageName)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.PageName,  getHtmlAttributes("PageName"))
									@Html.ValidationMessageFor(model => model.PageName)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.PageName, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","PageUrlTitle"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.PageUrlTitle)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.PageUrlTitle,  getHtmlAttributes("PageUrlTitle"))
									@Html.ValidationMessageFor(model => model.PageUrlTitle)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.PageUrlTitle, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","UIControlName"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.UIControlName)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.UIControlName,  getHtmlAttributes("UIControlName"))
									@Html.ValidationMessageFor(model => model.UIControlName)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.UIControlName, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","PageUrl"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.PageUrl)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.PageUrl,  getHtmlAttributes("PageUrl"))
									@Html.ValidationMessageFor(model => model.PageUrl)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.PageUrl, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
					</div>
				</div>
			<div style="background-color:transparent; padding:0px;">
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="panel panel-default AppForm">
                            <div class="panel-heading clearfix">
                                <i class="icon-calendar"></i>
                                <h3 class="panel-title">About Feedback</h3>
                            </div>
                            <div class="panel-body">
@if(User.CanView("ApplicationFeedback","CommentId"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.CommentId)  </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
									@Html.TextBoxFor(model => model.CommentId,  getHtmlAttributes("CommentId"))
									@Html.ValidationMessageFor(model => model.CommentId)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.CommentId, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","AssociatedApplicationFeedbackTypeID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12'>
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.AssociatedApplicationFeedbackTypeID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("ApplicationFeedback", "AssociatedApplicationFeedbackTypeID"))
		{
			@Html.DropDownList("AssociatedApplicationFeedbackTypeID", null, "-- Select --", new {     @class = "chosen-select form-control", @HostingName = "ApplicationFeedbackType", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackType",new { caller = "AssociatedApplicationFeedbackTypeID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.AssociatedApplicationFeedbackTypeID, new { @class = "form-control" })
			@Html.DropDownList("AssociatedApplicationFeedbackTypeID", null, "-- Select --", new {    @class = "chosen-select form-control", @disabled="disabled", @HostingName = "ApplicationFeedbackType", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackType",new { caller = "AssociatedApplicationFeedbackTypeID" }) })
		}
                                @Html.ValidationMessageFor(model => model.AssociatedApplicationFeedbackTypeID)
								 @if ( User.CanAdd("ApplicationFeedbackType"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Type','dvPopup','" + Url.Action("CreateQuick", "ApplicationFeedbackType", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.AssociatedApplicationFeedbackTypeID, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","AssociatedApplicationFeedbackStatusID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12'>
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.AssociatedApplicationFeedbackStatusID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("ApplicationFeedback", "AssociatedApplicationFeedbackStatusID"))
		{
			@Html.DropDownList("AssociatedApplicationFeedbackStatusID", null, "-- Select --", new {     @class = "chosen-select form-control", @HostingName = "ApplicationFeedbackStatus", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackStatus",new { caller = "AssociatedApplicationFeedbackStatusID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.AssociatedApplicationFeedbackStatusID, new { @class = "form-control" })
			@Html.DropDownList("AssociatedApplicationFeedbackStatusID", null, "-- Select --", new {    @class = "chosen-select form-control", @disabled="disabled", @HostingName = "ApplicationFeedbackStatus", @dataurl = Url.Action("GetAllValue", "ApplicationFeedbackStatus",new { caller = "AssociatedApplicationFeedbackStatusID" }) })
		}
                                @Html.ValidationMessageFor(model => model.AssociatedApplicationFeedbackStatusID)
								 @if ( User.CanAdd("ApplicationFeedbackStatus"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Status','dvPopup','" + Url.Action("CreateQuick", "ApplicationFeedbackStatus", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.AssociatedApplicationFeedbackStatusID, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","ApplicationFeedbackPriorityID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12'>
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.ApplicationFeedbackPriorityID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("ApplicationFeedback", "ApplicationFeedbackPriorityID"))
		{
			@Html.DropDownList("ApplicationFeedbackPriorityID", null, "-- Select --", new {     @class = "chosen-select form-control", @HostingName = "FeedbackPriority", @dataurl = Url.Action("GetAllValue", "FeedbackPriority",new { caller = "ApplicationFeedbackPriorityID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.ApplicationFeedbackPriorityID, new { @class = "form-control" })
			@Html.DropDownList("ApplicationFeedbackPriorityID", null, "-- Select --", new {    @class = "chosen-select form-control", @disabled="disabled", @HostingName = "FeedbackPriority", @dataurl = Url.Action("GetAllValue", "FeedbackPriority",new { caller = "ApplicationFeedbackPriorityID" }) })
		}
                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackPriorityID)
								 @if ( User.CanAdd("FeedbackPriority"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Priority','dvPopup','" + Url.Action("CreateQuick", "FeedbackPriority", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.ApplicationFeedbackPriorityID, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","ApplicationFeedbackSeverityID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12'>
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.ApplicationFeedbackSeverityID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("ApplicationFeedback", "ApplicationFeedbackSeverityID"))
		{
			@Html.DropDownList("ApplicationFeedbackSeverityID", null, "-- Select --", new {     @class = "chosen-select form-control", @HostingName = "FeedbackSeverity", @dataurl = Url.Action("GetAllValue", "FeedbackSeverity",new { caller = "ApplicationFeedbackSeverityID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.ApplicationFeedbackSeverityID, new { @class = "form-control" })
			@Html.DropDownList("ApplicationFeedbackSeverityID", null, "-- Select --", new {    @class = "chosen-select form-control", @disabled="disabled", @HostingName = "FeedbackSeverity", @dataurl = Url.Action("GetAllValue", "FeedbackSeverity",new { caller = "ApplicationFeedbackSeverityID" }) })
		}
                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackSeverityID)
								 @if ( User.CanAdd("FeedbackSeverity"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Severity','dvPopup','" + Url.Action("CreateQuick", "FeedbackSeverity", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.ApplicationFeedbackSeverityID, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","ApplicationFeedbackResourceID"))
{
                    <div class='col-sm-6 col-md-6 col-xs-12'>
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.ApplicationFeedbackResourceID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("ApplicationFeedback", "ApplicationFeedbackResourceID"))
		{
			@Html.DropDownList("ApplicationFeedbackResourceID", null, "-- Select --", new {     @class = "chosen-select form-control", @HostingName = "FeedbackResource", @dataurl = Url.Action("GetAllValue", "FeedbackResource",new { caller = "ApplicationFeedbackResourceID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.ApplicationFeedbackResourceID, new { @class = "form-control" })
			@Html.DropDownList("ApplicationFeedbackResourceID", null, "-- Select --", new {    @class = "chosen-select form-control", @disabled="disabled", @HostingName = "FeedbackResource", @dataurl = Url.Action("GetAllValue", "FeedbackResource",new { caller = "ApplicationFeedbackResourceID" }) })
		}
                                @Html.ValidationMessageFor(model => model.ApplicationFeedbackResourceID)
								 @if ( User.CanAdd("FeedbackResource"))
                                    {
                                <div class="input-group-btn">
										<a class="btn btn-default btn ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Assigned To','dvPopup','" + Url.Action("CreateQuick", "FeedbackResource", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
                                </div>
								}
							</div>
							</div>
                        </div>
                    </div>
					} else { @Html.HiddenFor(model => model.ApplicationFeedbackResourceID, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","ReportedBy"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
						<div class="form-group">
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.ReportedBy) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								<div class="col-sm-6 col-md-6 col-xs-12" id="datetimepickerReportedBy" style="padding-left:0px; padding-right:5px">
                                    @Html.TextBox("CurrentDateTime",DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"), new { @class = "form-control", @readonly = "readonly" })
                                </div>
                                <div class="col-sm-6 col-md-6 col-xs-12" style="padding-left:0px; padding-right:0px">
                                    @Html.TextBox("CurrentUser", User.Name, new { @class = "form-control", @readonly = "readonly" })
                                </div>
								</div>
							</div>
                        </div>
}
							</div>
                         </div>
                      </div>
					</div>
				</div>
			<div style="background-color:transparent; padding:0px;">
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="panel panel-default AppForm">
                            <div class="panel-heading clearfix">
                                <i class="icon-calendar"></i>
                                <h3 class="panel-title">More Details</h3>
                            </div>
                            <div class="panel-body">
@if(User.CanView("ApplicationFeedback","Summary"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.Summary) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.Summary, getHtmlAttributes("Summary"))
									@Html.ValidationMessageFor(model => model.Summary)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.Summary, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","Description"))
{
						<div class='col-sm-6 col-md-6 col-xs-12'>
							<div class='form-group'>
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.Description) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.Description, getHtmlAttributes("Description"))
									@Html.ValidationMessageFor(model => model.Description)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.Description, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","AttachImage") && User.CanView("Document"))
{
				  <div class='col-sm-6 col-md-6 col-xs-12'>
                            <div class='form-group'>
							@Html.TextBoxFor(model => model.AttachImage, new { @class = "hidden" })
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.AttachImage) </label>
                                     <div class="input-group col-sm-7 col-md-7 col-xs-12">
									 <div style="position:relative;">
										 <a class='btn btn-primary btnupload' href='javascript:;'>
											 Upload File
										 <input id="File_AttachImage" type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;width:105px;' name="File_AttachImage" onchange='$("#upload-file-infoFile_AttachImage").html($(this).val());'>
										</a>
										&nbsp;
										<span class='label uploadlblFix' id="upload-file-infoFile_AttachImage"></span>
										@if (!string.IsNullOrEmpty(Html.DisplayFor(model => model.AttachImage).ToString()))
										{
																					<img src='@(!string.IsNullOrEmpty(Html.DisplayFor(model => model.AttachImage).ToString()) ? Url.Content("~/Files/") + Url.Content(Html.DisplayFor(model => model.AttachImage).ToString()) : "")' alt="" class="picupload" />
										}
									</div> 
									</div>
                            </div>
                   </div>
} else { @Html.HiddenFor(model => model.AttachImage, new { @class = "form-control" })}
@if(User.CanView("ApplicationFeedback","AttachDocument") && User.CanView("Document"))
{
				  <div class='col-sm-6 col-md-6 col-xs-12'>
                            <div class='form-group'>
							@Html.TextBoxFor(model => model.AttachDocument, new { @class = "hidden" })
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.AttachDocument) </label>
                                     <div class="input-group col-sm-7 col-md-7 col-xs-12">
									 <div style="position:relative;">
										 <a class='btn btn-primary btnupload' href='javascript:;'>
											 Upload File
										 <input id="File_AttachDocument" type="file" style='position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0);-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";opacity:0;background-color:transparent;color:transparent;width:105px;' name="File_AttachDocument" onchange='$("#upload-file-infoFile_AttachDocument").html($(this).val());'>
										</a>
										&nbsp;
										<span class='label uploadlblFix' id="upload-file-infoFile_AttachDocument"></span>
									</div> 
									</div>
                            </div>
                   </div>
} else { @Html.HiddenFor(model => model.AttachDocument, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
					</div>
				</div>
</div>
   @Html.ActionLink("C", "Cancel", new { UrlReferrer = ViewData["ApplicationFeedbackParentUrl"] }, new { @id = "cancel", @style = "display:none;" })
   <input type="hidden" name="hdncommand" value=""/>
    </div>
 <br />
}
	<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
	</script>
@{
var busineesrule = User.businessrules.Where(p => p.EntityName == "ApplicationFeedback").ToList();
if ((busineesrule != null && busineesrule.Count > 0))
{
    <script>
    $(document).ready(function () {
        $.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetLockBusinessRules", "ApplicationFeedback")",
            data: $("form").serialize(),
        success: function (data) {
            if (data.length > 0) {
                $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            alert(JSON.stringify(jqXHR));
            alert(errorThrown);
        }
    });
   	$.ajax({
            async: false,
            type: "GET",
            url: "@Url.Action("GetReadOnlyProperties", "ApplicationFeedback")",
            data: $("form").serialize(),
            success: function (data) {
                for (var key in data) {
                    $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        });
    });
</script>
<script>
    $("form").submit(function () {
            var flag = true;
            $.ajax({
                async: false,
                type: "GET",
                url: "@Url.Action("GetMandatoryProperties", "ApplicationFeedback")",
                data: $(this).serialize(),
                success: function (data) {
				$('[businessrule="mandatory"]').each(function () {
                                $(this).removeAttr('required');
                            });
				 document.getElementById('ErrMsg').innerHTML = "";
                         for (var key in data) {
                             if ($.trim($('#' + key).val()).length == 0) {
                                 $('#' + key).attr('required', 'required');
								  $('#' + key).attr('businessrule', 'mandatory');
                                 flag = false;
                                 document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                             }
                         }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            });
			 if (flag)
                    $("form").find(':input').removeAttr('disabled');
            return flag;
    });
</script>
}
}


