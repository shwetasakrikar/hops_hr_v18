@model PagedList.IPagedList<GeneratorBase.MVC.Models.ApplicationFeedback>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
}
<div id="ApplicationFeedback">
    <style>
        .table-responsive > .fixed-column {
            position: absolute;
            display: block;
            width: auto;
            border: 0px solid transparent;
            border-top: 1px solid #c3ddec;
        }
        .fixed-column th {
            background: #fff;
        }
        .fixed-column td {
            background: #fff;
        }
    </style>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".pagination a").click(function (e) {
                //PaginationClick(e,'ApplicationFeedback')
                PaginationClick(e, 'ApplicationFeedback', '@User.JavaScriptEncodedName')
            })
            if ("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH") {
                $("#fsearchApplicationFeedback").addClass('in');
            }
            $("#SearchStringApplicationFeedback").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $("#ApplicationFeedbackSearch").bind("click", (function () {
                    }));
                    $('#ApplicationFeedbackSearch').trigger("click");
                    return false;
                }
            })
        });
    </script>
    @functions {
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = ViewBag.CurrentSort,
                    isAsc = ViewBag.IsAsc,
                    currentFilter = ViewBag.CurrentFilter,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    HostingEntityID = ViewData["HostingEntityID"],
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    associatedapplicationfeedbacktype = Request.QueryString["associatedapplicationfeedbacktype"],
                    associatedapplicationfeedbackstatus = Request.QueryString["associatedapplicationfeedbackstatus"],
                    applicationfeedbackpriority = Request.QueryString["applicationfeedbackpriority"],
                    applicationfeedbackseverity = Request.QueryString["applicationfeedbackseverity"],
                    applicationfeedbackresource = Request.QueryString["applicationfeedbackresource"],
                    CommentIdFrom = Request.QueryString["CommentIdFrom"],
                    CommentIdTo = Request.QueryString["CommentIdTo"],
                    ReportedByFrom = Request.QueryString["ReportedByFrom"],
                    ReportedByTo = Request.QueryString["ReportedByTo"],
                    search = Request.QueryString["search"],
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                    page = ViewBag.Pages,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    associatedapplicationfeedbacktype = Request.QueryString["associatedapplicationfeedbacktype"],
                    associatedapplicationfeedbackstatus = Request.QueryString["associatedapplicationfeedbackstatus"],
                    applicationfeedbackpriority = Request.QueryString["applicationfeedbackpriority"],
                    applicationfeedbackseverity = Request.QueryString["applicationfeedbackseverity"],
                    applicationfeedbackresource = Request.QueryString["applicationfeedbackresource"],
                    CommentIdFrom = Request.QueryString["CommentIdFrom"],
                    CommentIdTo = Request.QueryString["CommentIdTo"],
                    ReportedByFrom = Request.QueryString["ReportedByFrom"],
                    ReportedByTo = Request.QueryString["ReportedByTo"],
                    search = Request.QueryString["search"],
                };
            }
        }
    }
    <div class="row">
        <div class="col-md-12 col-sm-12 col-sx-12">
            <div class="panel panel-default">
                <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                    <div class="btn-group">
                        @if ( User.CanAdd("ApplicationFeedback"))
                        {
                            @*<button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Add" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Feedback','dvPopup','" + Url.Action("CreateQuick", "ApplicationFeedback", new { UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now }) + "')")">
                                <span class="fam-add"></span>
                            </button>*@
                            <button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "ApplicationFeedback", new { UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
                                <span class="fam-world-add"></span>
                            </button>
                        }
                    </div>
                    <div class="btn-group">
                        <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"ApplicationFeedback",getSortHtmlAttributes(null, false, null, true), null) + "');")>
                            <span class="fam-page-white-put"></span>
                        </div>
                    </div>
                    <div class="btn-group">
                      
                        @if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
                        {
                            <div class="btn-group">
                                <ul class="dropdown-menu" role="menu">
                                    <li>
                                        <a id="fltApplicationFeedbackType" data-placement="top" onclick=@Html.Raw("EntityFilter('ApplicationFeedback','" + Url.Action("GetAllValueForFilter", "ApplicationFeedbackType") + "','" + Html.Raw(Url.Action("Index", "ApplicationFeedback", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "ApplicationFeedbackType", AssociatedType = "AssociatedApplicationFeedbackType", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Type</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltApplicationFeedbackStatus" data-placement="top" onclick=@Html.Raw("EntityFilter('ApplicationFeedback','" + Url.Action("GetAllValueForFilter", "ApplicationFeedbackStatus") + "','" + Html.Raw(Url.Action("Index", "ApplicationFeedback", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "ApplicationFeedbackStatus", AssociatedType = "AssociatedApplicationFeedbackStatus", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Status</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltFeedbackPriority" data-placement="top" onclick=@Html.Raw("EntityFilter('ApplicationFeedback','" + Url.Action("GetAllValueForFilter", "FeedbackPriority") + "','" + Html.Raw(Url.Action("Index", "ApplicationFeedback", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "FeedbackPriority", AssociatedType = "ApplicationFeedbackPriority", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Priority</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltFeedbackSeverity" data-placement="top" onclick=@Html.Raw("EntityFilter('ApplicationFeedback','" + Url.Action("GetAllValueForFilter", "FeedbackSeverity") + "','" + Html.Raw(Url.Action("Index", "ApplicationFeedback", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "FeedbackSeverity", AssociatedType = "ApplicationFeedbackSeverity", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Severity</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltFeedbackResource" data-placement="top" onclick=@Html.Raw("EntityFilter('ApplicationFeedback','" + Url.Action("GetAllValueForFilter", "FeedbackResource") + "','" + Html.Raw(Url.Action("Index", "ApplicationFeedback", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "FeedbackResource", AssociatedType = "ApplicationFeedbackResource", ClearSearchTimeStamp = DateTime.Now })) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Assigned To</span>
                                        </a>
                                    </li>
                                    <li><span class="label label-primary pull-left filterLabel" style="margin-left:20px;">@Html.ActionLink("Clear", "Index")</span></li>
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="btn-group">
                        <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Bulk Actions" style="padding:3px 5px;" data-toggle="dropdown" href="#">
                            <span class="glyphicon glyphicon-trash"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu">
                            <li>
                                @if ( User.CanDelete("ApplicationFeedback"))
                                {
                                    <a onclick="PerformBulkOperation(this,'ApplicationFeedback','Bulk Delete','@Url.Action("DeleteBulk", "ApplicationFeedback")');">Delete</a>
                                }
                            </li>
                        </ul>
                    </div>
                    <div class="pull-right" style="width:250px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringApplicationFeedback", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                                <a id="ApplicationFeedbackSearch" onclick="SearchClick(event, 'ApplicationFeedback', '@Html.Raw(Url.Action("Index", "ApplicationFeedback", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
                                <a id="ApplicationFeedbackDeepSearch" onclick="SearchClick(event, 'ApplicationFeedback', '@Html.Raw(Url.Action("Index", "ApplicationFeedback", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = true, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName');" data-original-title="Detail Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom-in"></span></a>
                                @if (ViewData["HostingEntity"] == null)
                                {
                                    <a href="@(Url.Action("SetFSearch", "ApplicationFeedback")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-page-find"></span></a>
                                }
                                <button id="ApplicationFeedbackCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('ApplicationFeedback','@Html.Raw(Url.Action("Index", "ApplicationFeedback", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="ApplicationFeedbackSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('ApplicationFeedback','@Html.Raw(Url.Action("Index", "ApplicationFeedback", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-body" style="margin:0px; padding:8px;">
                    @if (ViewData["HostingEntity"] == null)
                    {
                        if (ViewBag.SearchResult != "")
                        {
                            <div id="fsearchApplicationFeedback" class="collapse MessageFSearch">
                                @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
                                <a href="@Url.Action("Index", "ApplicationFeedback")" style="float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
                            </div>
                        }
                    }
                    @Html.Partial("~/Views/ApplicationFeedback/ShowHideColumns.cshtml")
                    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
                        <table class="table table-striped table-bordered table-hover table-condensed">
                            <thead>
                                <tr>
                                    <th class="col2" style="width:20px;">
                                        <input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
                                        @Html.Hidden("SelectedItems")
                                    </th>
                                    <th class="col1" style="width:70px;">Actions</th>
                                    @if (User.CanView("ApplicationFeedback", "CommentId"))
                                    {
                                        <th class="col8">
                                            @Html.ActionLink("Comment Id", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("CommentId", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "CommentId")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "CommentId")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "Summary"))
                                    {
                                        <th class="col15">
                                            @Html.ActionLink("Summary", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("Summary", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Summary")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Summary")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "EntityName"))
                                    {
                                        <th class="col2">
                                            @Html.ActionLink("Entity Name", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("EntityName", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                        @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "EntityName")
                                        {<i class="fa fa-sort-desc"></i>}
                                        @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "EntityName")
                                        {<i class="fa fa-sort-asc"></i>}
                                    </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "PropertyName"))
                                    {
                                        <th class="col3">
                                            @Html.ActionLink("Property Name", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("PropertyName", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                        @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "PropertyName")
                                        {<i class="fa fa-sort-desc"></i>}
                                        @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "PropertyName")
                                        {<i class="fa fa-sort-asc"></i>}
                                    </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "PageName"))
                                    {
                                        <th class="col4">
                                            @Html.ActionLink("Page Name", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("PageName", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                        @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "PageName")
                                        {<i class="fa fa-sort-desc"></i>}
                                        @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "PageName")
                                        {<i class="fa fa-sort-asc"></i>}
                                    </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "UIControlName"))
                                    {
                                        <th class="col6">
                                            @Html.ActionLink("UI Control Name", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("UIControlName", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                        @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "UIControlName")
                                        {<i class="fa fa-sort-desc"></i>}
                                        @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "UIControlName")
                                        {<i class="fa fa-sort-asc"></i>}
                                    </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackTypeID"))
                                    {
                                        <th class="col9" @(Convert.ToString(ViewData["HostingEntity"]) == "ApplicationFeedbackType" && Convert.ToString(ViewData["AssociatedType"]) == "AssociatedApplicationFeedbackType" ? "hidden" : "")>
                                            @Html.ActionLink("Type", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("AssociatedApplicationFeedbackTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "AssociatedApplicationFeedbackTypeID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "AssociatedApplicationFeedbackTypeID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackStatusID"))
                                    {
                                        <th class="col10" @(Convert.ToString(ViewData["HostingEntity"]) == "ApplicationFeedbackStatus" && Convert.ToString(ViewData["AssociatedType"]) == "AssociatedApplicationFeedbackStatus" ? "hidden" : "")>
                                            @Html.ActionLink("Status", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("AssociatedApplicationFeedbackStatusID", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "AssociatedApplicationFeedbackStatusID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "AssociatedApplicationFeedbackStatusID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackPriorityID"))
                                    {
                                        <th class="col11" @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackPriority" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackPriority" ? "hidden" : "")>
                                            @Html.ActionLink("Priority", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("ApplicationFeedbackPriorityID", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "ApplicationFeedbackPriorityID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "ApplicationFeedbackPriorityID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackSeverityID"))
                                    {
                                        <th class="col12" @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackSeverity" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackSeverity" ? "hidden" : "")>
                                            @Html.ActionLink("Severity", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("ApplicationFeedbackSeverityID", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "ApplicationFeedbackSeverityID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "ApplicationFeedbackSeverityID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackResourceID"))
                                    {
                                        <th class="col13" @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackResource" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackResource" ? "hidden" : "")>
                                            @Html.ActionLink("Assigned To", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("ApplicationFeedbackResourceID", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "ApplicationFeedbackResourceID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "ApplicationFeedbackResourceID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("ApplicationFeedback", "ReportedBy"))
                                    {
                                        <th class="col14">
                                            @Html.ActionLink("Reported By", ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes("ReportedBy", false, null, false), new { @onclick = "SortLinkClick(event,'ApplicationFeedback');" })
                                        @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "ReportedBy")
                                        {<i class="fa fa-sort-desc"></i>}
                                        @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "ReportedBy")
                                        {<i class="fa fa-sort-asc"></i>}
                                    </th>
                                    }
                                </tr>
                                @foreach (var item in Model)
                                {
                                    <tr ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "ApplicationFeedback", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
                                        <td>
                                            <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
                                        </td>
                                        <td>
                                            <div style="width:60px; margin-top:-2px;">
                                                <div class="btn-group" style="position:absolute;">
                                                    <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                        Action
                                                        <span class="caret">    </span>
                                                    </button>
                                                    <ul class="dropdown-menu pull-left">
                                                        <li>
                                                            <a href="@Url.Action("Details", "ApplicationFeedback", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                                                        </li>
                                                        <li>
                                                            @if ( User.CanEdit("ApplicationFeedback"))
                                                            {
                                                                <a href="@Url.Action("Edit","ApplicationFeedback", new { id = item.Id,  UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                                                            }
                                                        </li>
                                                        <li>
                                                            @if ( User.CanDelete("ApplicationFeedback"))
                                                            {
                                                                <a href="@Url.Action("Delete", "ApplicationFeedback", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                                                            }
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                        @if (User.CanView("ApplicationFeedback", "CommentId"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.CommentId)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "Summary"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Summary)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "EntityName"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.EntityName)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "PropertyName"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.PropertyName)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "PageName"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.PageName)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "UIControlName"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.UIControlName)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackTypeID"))
                                        {
                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "ApplicationFeedbackType" && Convert.ToString(ViewData["AssociatedType"]) == "AssociatedApplicationFeedbackType" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.associatedapplicationfeedbacktype.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackStatusID"))
                                        {
                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "ApplicationFeedbackStatus" && Convert.ToString(ViewData["AssociatedType"]) == "AssociatedApplicationFeedbackStatus" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.associatedapplicationfeedbackstatus.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackPriorityID"))
                                        {
                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackPriority" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackPriority" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.applicationfeedbackpriority.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackSeverityID"))
                                        {
                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackSeverity" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackSeverity" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.applicationfeedbackseverity.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackResourceID"))
                                        {
                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackResource" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackResource" ? "hidden" : "")>
                                                @if (item.applicationfeedbackresource != null && !string.IsNullOrEmpty(item.applicationfeedbackresource.DisplayValue))
                                                {
                                                    @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.applicationfeedbackresource.DisplayValue).ToString()), "Details", "FeedbackResource", new { Id = Html.DisplayFor(modelItem => item.applicationfeedbackresource.Id).ToString() }, null)
                                                }
                                            </td>
                                        }
                                        @if (User.CanView("ApplicationFeedback", "ReportedBy"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.ReportedBy)
                                                @Html.DisplayFor(modelItem => item.ReportedByUser)
                                            </td>
                                        }
                                    </tr>
                                }
                        </table>
                    </div>
                    <ul id="Mob_List" class="list-group">
                        @foreach (var item in Model)
                        {
                            <li class="list-group-item">
                                @if (User.CanView("ApplicationFeedback", "EntityName"))
                                {
                                    <p>
                                        <span class="text-primary"> Entity Name </span> : <span>
                                            @Html.DisplayFor(modelItem => item.EntityName)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "PropertyName"))
                                {
                                    <p>
                                        <span class="text-primary"> Property Name </span> : <span>
                                            @Html.DisplayFor(modelItem => item.PropertyName)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "PageName"))
                                {
                                    <p>
                                        <span class="text-primary"> Page Name </span> : <span>
                                            @Html.DisplayFor(modelItem => item.PageName)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "PageUrlTitle"))
                                {
                                    <p>
                                        <span class="text-primary"> Page Url Title </span> : <span>
                                            @Html.DisplayFor(modelItem => item.PageUrlTitle)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "UIControlName"))
                                {
                                    <p>
                                        <span class="text-primary"> UI Control Name </span> : <span>
                                            @Html.DisplayFor(modelItem => item.UIControlName)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "PageUrl"))
                                {
                                    <p>
                                        <span class="text-primary"> Page Url </span> : <span>
                                            @Html.DisplayFor(modelItem => item.PageUrl)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "CommentId"))
                                {
                                    <p>
                                        <span class="text-primary"> Comment Id </span> : <span>
                                            @Html.DisplayFor(modelItem => item.CommentId)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackTypeID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "ApplicationFeedbackType" && Convert.ToString(ViewData["AssociatedType"]) == "AssociatedApplicationFeedbackType" ? "hidden" : "")>
                                        <span class="text-primary"> Associated Application Feedback Type </span> : <span>
                                            @Html.DisplayFor(modelItem => item.associatedapplicationfeedbacktype.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "AssociatedApplicationFeedbackStatusID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "ApplicationFeedbackStatus" && Convert.ToString(ViewData["AssociatedType"]) == "AssociatedApplicationFeedbackStatus" ? "hidden" : "")>
                                        <span class="text-primary"> Associated  Application Feedback Status </span> : <span>
                                            @Html.DisplayFor(modelItem => item.associatedapplicationfeedbackstatus.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackPriorityID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackPriority" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackPriority" ? "hidden" : "")>
                                        <span class="text-primary"> Application Feedback Priority </span> : <span>
                                            @Html.DisplayFor(modelItem => item.applicationfeedbackpriority.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackSeverityID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackSeverity" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackSeverity" ? "hidden" : "")>
                                        <span class="text-primary"> Application Feedback  Severity </span> : <span>
                                            @Html.DisplayFor(modelItem => item.applicationfeedbackseverity.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "ApplicationFeedbackResourceID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "FeedbackResource" && Convert.ToString(ViewData["AssociatedType"]) == "ApplicationFeedbackResource" ? "hidden" : "")>
                                        <span class="text-primary"> Application Feedback Resource </span> : <span>
                                            @if (item.applicationfeedbackresource != null && !string.IsNullOrEmpty(item.applicationfeedbackresource.DisplayValue))
                                            {
                                                @Html.ActionLink(Html.DisplayFor(modelItem => item.applicationfeedbackresource.DisplayValue).ToString(), "Details", "FeedbackResource", new { Id = Html.DisplayFor(modelItem => item.applicationfeedbackresource.Id).ToString() }, null)
                                            }
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "ReportedBy"))
                                {
                                    <p>
                                        <span class="text-primary"> Reported By </span> : <span>
                                            @Html.DisplayFor(modelItem => item.ReportedBy)
                                            @Html.DisplayFor(modelItem => item.ReportedByUser)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "Summary"))
                                {
                                    <p>
                                        <span class="text-primary"> Summary </span> : <span>
                                            @Html.DisplayFor(modelItem => item.Summary)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("ApplicationFeedback", "Description"))
                                {
                                    <p>
                                        <span class="text-primary"> Description </span> : <span>
                                            @Html.DisplayFor(modelItem => item.Description)
                                        </span>
                                    </p>
                                }
                                <span class="label label-primary text-linkwhite">
                                    @Html.ActionLink("View", "Details", "ApplicationFeedback", new { id = item.Id }, null)
                                </span>
                                <span class="label label-warning text-linkwhite">
                                    @if ( User.CanEdit("ApplicationFeedback"))
                                    {
                                        @Html.ActionLink("Edit", "Edit", "ApplicationFeedback", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                    }
                                </span>
                                <span class="label label-danger text-linkwhite">
                                    @if ( User.CanDelete("ApplicationFeedback"))
                                    {
                                        @Html.ActionLink("Delete", "Delete", "ApplicationFeedback", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                    }
                                </span>
                            </li>
                        }
                    </ul>
                    @if (Model.Count > 0)
                    {
                        <div id="pagination">
                            @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "ApplicationFeedback", getSortHtmlAttributes(null, true, page, false)))
                            <div class="fixPageSize">
                                Page Size :
                                @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelistApplicationFeedback",
                                @onchange = @Html.Raw("pagesizelistChange(event,'ApplicationFeedback','"
                                 + @User.JavaScriptEncodedName + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "ApplicationFeedback",
                                getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                                null, false), null))
                            })
                                <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="ShowGraphApplicationFeedback" tabindex="-1" role="dialog" aria-labelledby="ShowGraphApplicationFeedbackLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphApplicationFeedbackLabel">Dashboard Application Feedback</h4>
                </div>
                <div id="dvShowGraphApplicationFeedback" class="modal-body" data-url="@Url.Action("ShowGraph", "ApplicationFeedback")">
                </div>
            </div>
        </div>
    </div>
</div>
