@model PagedList.IPagedList<GeneratorBase.MVC.Models.EditUserViewModel>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
    var BackUrl = Request.Url;
    if (ViewData["HostingEntity"] != null && Request.QueryString["TabToken"] != null)
    {
        BackUrl = Request.UrlReferrer;
    }
    ApplicationContext db = new ApplicationContext(new GeneratorBase.MVC.Models.SystemUser());
}
<div id="Account">
    <style>
        .table-responsive > .fixed-column {
            position: absolute;
            display: block;
            width: auto;
            border: 0px solid transparent;
            border-top: 1px solid #c3ddec;
        }

        .fixed-column th {
            background: #fff;
        }

        .fixed-column td {
            background: #fff;
        }
    </style>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".pagination a").click(function (e) {
                PaginationClick(e, 'Account', '@User.JavaScriptEncodedName')
            })
            $("#SearchStringAccount").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $("#AccountSearch").bind("click", (function () {
                    }));
                    $('#AccountSearch').trigger("click");
                    return false;
                }
            })

        });
    </script>

    @functions {
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = ViewBag.CurrentSort,
                    isAsc = ViewBag.IsAsc,
                    currentFilter = ViewBag.CurrentFilter,
                    IsExport = IsExport,
                    search = Request.QueryString["search"],
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                    page = ViewBag.Pages,
                    IsExport = IsExport,
                    search = Request.QueryString["search"],
                };
            }
        }

    }
    <div class='col-sm-12 col-md-12 col-xs-12' style="padding:0px; margin:5px 0px 0px 0px;">
        <div class='form-group'>
            <div class="input-group col-sm-12 col-md-12 col-xs-12">
                @Html.TextBox("SearchStringAccount", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @placeholder = "Search" })
                <div class="input-group-btn">
                    <a id="AccountSearch" onclick="SearchClick(event, 'Account', '@Html.Raw(Url.Action("Index", "Account", new {searchString = "_SearchString",SearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName');"
                       data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fa fa-search"></span></a>
                    <button id="AccountCancel" type="button"
                            class="btn btn-default btn-default collapse-data-btn tip-top"
                            onclick="CancelSearch('Account','@Html.Raw(Url.Action("Index", "Account", new { ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                        <span class="fa fa-minus-circle"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-sx-12">
            <div class="panel panel-default ">
                <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                    @if (User.CanAddAdminFeature("User"))
                    {
                        <button class="btn btn-default tip-top" data-placement="top" data-original-title="Add New User" style="padding:3px 5px;" data-toggle="modal" data-target="#quickaddUser" onclick=@Html.Raw("OpenQuickQddPopUp('dvQAddquickaddUser');")>
                            <span class="fa fa-plus-circle"></span> Create User
                        </button>
			<button class="btn btn-default tip-top"  data-original-title="Import Users" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("UploadUser", "Account") + "');")>
                            <span class="fa fa-upload"></span> Import Excel
                        </button>
                        if (GeneratorBase.MVC.Models.CommonFunction.Instance.NeedSharedUserSystem() == "yes")
                        {
                            <a href="http://@GeneratorBase.MVC.Models.CommonFunction.Instance.Server()/Authentication/Account/Register?AppName=@Url.Action("Login","Account",null,Url.RequestContext.HttpContext.Request.Url.Scheme)" class="btn">Create User in Shared User System</a>
                        }
                    }
                </div>

                <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
                    <table class="table table-striped table-bordered table-hover table-condensed">
                        <tr>
                            <th>Action</th>
                            <th class="col2">
                                @Html.ActionLink("User Name", ActionNameUrl, "Account", getSortHtmlAttributes("UserName", false, null, false), new { @onclick = "SortLinkClick(event,'Account');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "UserName")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "UserName")
                                {<i class="fa fa-sort-asc"></i>}
                            </th>
                            <th class="col3">
                                @Html.ActionLink("First Name", ActionNameUrl, "Account", getSortHtmlAttributes("FirstName", false, null, false), new { @onclick = "SortLinkClick(event,'Account');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "FirstName")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "FirstName")
                                {<i class="fa fa-sort-asc"></i>}

                            </th>
                            <th class="col4">
                                @Html.ActionLink("Last Name", ActionNameUrl, "Account", getSortHtmlAttributes("LastName", false, null, false), new { @onclick = "SortLinkClick(event,'Account');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "LastName")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "LastName")
                                {<i class="fa fa-sort-asc"></i>}

                            </th>
                            <th class="col5">
                                @Html.ActionLink("Email", ActionNameUrl, "Account", getSortHtmlAttributes("Email", false, null, false), new { @onclick = "SortLinkClick(event,'Account');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Email")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Email")
                                {<i class="fa fa-sort-asc"></i>}
                            </th>
                            <th>Api Token</th>
                            <th>User's Status</th>
                        </tr>
                        @foreach (var item in Model)
                        {
                            var userId = item.Id;
                            var token = db.ApiTokens.FirstOrDefault(p => p.T_UsersID == userId);
                            <tr>
                                <td>

                                    <div style="width:60px; margin-top:-2px;">
                                        <div class="btn-group" style="position:absolute;">
                                            <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                Action
                                                <span class="caret">    </span>
                                            </button>
                                            @if (User.Name != item.UserName && !((GeneratorBase.MVC.Models.CustomPrincipal)User).IsAdminUser(item.UserName))
                                            {
                                                <ul class="dropdown-menu pull-left">
                                                    @if (User.CanViewAdminFeature("AssignUserRole"))
                                                    {
                                                        <li>
                                                            <a href="@Url.Action("UserRoles", "Account", new { id = item.Id})"><i class="glyphicon glyphicon-eye-open"></i>  Roles</a>
                                                        </li>
                                                    }
                                                    @if (User.CanEditAdminFeature("User"))
                                                    {
                                                        <li>
                                                            <a href="@Url.Action("Edit", "Account", new { id = item.Id }, null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                                                        </li>
                                                    }
                                                    @if (User.CanDeleteAdminFeature("User"))
                                                    {
                                                        <li>
                                                            <a href="@Url.Action("Delete", "Account", new { id = item.Id }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                                                        </li>
                                                    }
                                                    @if (item.LockoutEndDateUtc > DateTime.UtcNow || item.LockoutEndDateUtc != null)
                                                    {
                                                        if (User.CanEditAdminFeature("User"))
                                                        {
                                                            <li>
                                                                <a onclick="return confirm('Are you sure?')" href="@Url.Action("LockUnLockUser", "Account", new { id = item.Id,lockuser=false }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  UnLock User</a>
                                                            </li>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (User.CanEditAdminFeature("User"))
                                                        {
                                                            <li>
                                                                <a onclick="return confirm('Are you sure?')" href="@Url.Action("LockUnLockUser", "Account", new { id = item.Id,lockuser=true }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Lock User</a>
                                                            </li>
                                                        }
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    </div>

                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.UserName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.FirstName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.LastName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Email)
                                </td>
                                <td>
                                    @if (token != null)
                                    {
                                        <label>@token.T_AuthToken</label>
                                    }
                                </td>
                                <td>
                                    @if (item.LockoutEndDateUtc > DateTime.UtcNow || item.LockoutEndDateUtc != null)
                                    {
                                        @Html.Label("Locked")
                                    }
                                    else
                                    {
                                        @Html.Label("UnLocked")
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </div>

            </div>
            @if (Model.Count > 0)
            {
                <div id="pagination" class="MyPagination1">
                    @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "Account", getSortHtmlAttributes(null, true, page, false)))
                    <div class="fixPageSize">
                        Page Size :
                        @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelisAccount",
                                @onchange = @Html.Raw("pagesizelistChange(event,'Account','"
                                 + @User.JavaScriptEncodedName + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "Account",
                                getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                                null, false), null))
                            })
                        <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="modal fade" id="quickaddUser" tabindex="-1" role="dialog" aria-labelledby="quickaddUserLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="quickaddUserLabel"> Create User</h4>
                </div>
                <div id="dvQAddquickaddUser" class="modal-body" data-url="@Url.Action("CreateUser", "Account")">
                </div>
            </div>
        </div>
    </div>
</div>