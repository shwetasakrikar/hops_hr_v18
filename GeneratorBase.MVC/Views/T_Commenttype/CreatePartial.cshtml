@model GeneratorBase.MVC.Models.T_Commenttype
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CommenttypeIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CommenttypeIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CommenttypeIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CommenttypeIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CommenttypeIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_CommenttypeIsSetValueUIRule);
    }
}
@using (Html.BeginForm("Create", "T_Commenttype",new {UrlReferrer = Convert.ToString(ViewData["T_CommenttypeParentUrl"]), IsDDAdd = ViewBag.IsDDAdd }, FormMethod.Post, new { enctype = "multipart/form-data",id="frmT_Commenttype" }))
{
   @Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
	<input type="hidden" id="ErrMsg" />
	@*<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
    <div id="errorContainer" style="display: none">
        <div id="errorsMsg"></div>
        <div id="errors"></div>
    </div>
	 
	 <div id="divDisplayThresholdLimit" style="display:none;">
	</div>
	 <div id="divDisplayBRmsgMandatory" style="display:none;">
	</div>
	<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
	</div>
	<div id="divDisplayCodeFragment" style="display:none;">
	</div>

	<div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="AppForm">
                <div class="">
               					<div class="row">
				       
			 @if(User.CanView("T_Commenttype","T_Name"))
								{
     <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
                                <div class='form-group' title="">
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Name) <span class="text-danger-reg">*</span></label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
									
                                    @Html.TextBoxFor(model => model.T_Name, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.T_Name)
									</div>
                                </div>
					</div>
				}

					
						@if(User.CanView("T_Commenttype","T_Description"))
								{
						<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Description">
                                <div class='form-group' title="">
                                   <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Description) </label>
									<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    @Html.TextAreaFor(model => model.T_Description, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.T_Description)
									</div>
                                </div>
						</div>
						}
       </div>
                        </div>
                    </div>
                </div>
        </div>
		<a class="btn btn-default btn-sm" onclick="goBack('@Url.Action("Index","T_Commenttype")');" alt="Cancel" title="Cancel">Cancel</a>
          @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_CommenttypeParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" })*@
	<input type="submit" name="command" value="Create" class="btn btn-primary btn-sm" alt="Create" title="Create"/>
    if (ViewBag.IsDDAdd == null && User.CanEdit("T_Commenttype"))
    {
	<input type="submit" name="command" value="Create & Continue" class="btn btn-primary btn-sm" alt="Create & Continue" title="Create & Continue"/>
	}
	 <input type="hidden" name="hdncommand" value="" />
	<br/><br/>
}
	<script>
	    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	
@{
		var businessrule = User.businessrules.Where(p => p.EntityName == "T_Commenttype").ToList();
		
if ((businessrule != null && businessrule.Count > 0) )
    {
        <script>
            $("form").submit(function (event) {
			if (!$("#frmT_Commenttype").valid()) return;
			var flag = true;
							document.getElementById("ErrMsg").innerHTML = "";
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                //var form = $(this).serialize();
 form = $("#frmT_Commenttype").serialize();
  
                dataurl = "@Url.Action("businessruletype", "T_Commenttype", new { ruleType = "OnCreate"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "T_Commenttype", false, "ErrMsg", form);
				//business rules on inline associations
				if (flag) {
				                    $('input:hidden[name="hdncommand"]').val($(document.activeElement).val());

					 $("#frmT_Commenttype").find(':input').removeAttr('disabled');
                }
				return flag;
			 });	
        </script>
    }
    else
    {
	<script>
            $("input[type='submit']").click(function (event) {
			if (!$("#frmT_Commenttype").valid()) return;
                var $this = $(this);
                $('input:hidden[name="hdncommand"]').val($this.val());
            });
	</script>
           
    }
}


<script type='text/javascript'>
    $(document).ready(function () {
        try {
		 focusOnControl('frmT_Commenttype');
        }
        catch (ex) { }
    });
</script>
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                 $('#' + hostingEntityName + 'ID').attr("lock","true");
				  $('#' + hostingEntityName + 'ID').trigger("change");
            }
			
        }
        catch (ex) { }
		});
</script>

