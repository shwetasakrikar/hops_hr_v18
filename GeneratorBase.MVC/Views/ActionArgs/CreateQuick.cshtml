@model GeneratorBase.MVC.Models.ActionArgs
@{
    ViewBag.Title = "Create Action Args";
    Layout = null;
}
@Scripts.Render("~/bundles/jqueryval")
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Common2/bootstrap-multiselect.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/bootstrap-multiselect.css")" rel="stylesheet" type="text/css" />
<script type="text/javascript" language="javascript">
    $(document).ready(function () {
        if ("@ViewBag.MandatoryRule".toUpperCase() == "TRUE") {
            $('#ParameterValue').val("Set as Mandatory");
            $('#ParameterValue').attr('readonly', 'readonly');
        }
        if ("@ViewBag.ReadonlyRule".toUpperCase() == "TRUE") {
            $('#ParameterValue').val("Set as Readonly");
            $('#ParameterValue').attr('readonly', 'readonly');
        }
        // Sanjeev
        if ("@ViewBag.HiddenRule".toUpperCase() == "TRUE") {
            $('#ParameterValue').val("Set as Hidden");
            $('#ParameterValue').attr('readonly', 'readonly');
        }
        if ("@ViewBag.GroupsHiddenRule".toUpperCase() == "TRUE") {
            $('#ParameterValue').val("Set as Hidden Groups");
            $('#ParameterValue').attr('readonly', 'readonly');
        }
        //
    });
    if ("@ViewBag.Parameters" != null) {
        var pramname = "@ViewBag.Parameters".split(",");
        var PropNameEle = document.getElementById("PropertyListActionArg");
        for (i = 0; i < pramname.length; i++) {
            if (pramname[i] == "")
                break;
            for (var o = 0; o < PropNameEle.options.length; o++) {
                if (PropNameEle.options[o].value == pramname[i]) {
                    PropNameEle.options[o].setAttribute('selected', "selected");
                    //$("#ParameterName").val($("#ParameterName").val() + "," + PropNameEle.val());
                }
            }
        }
    }
    selectedProperties = ($('#PropertyListActionArg option:selected'));
    $(selectedProperties).each(function (index, prop) {
        $("#ParameterName").val($("#ParameterName").val() + "," + [$(this).val()]);
    });
</script>
@using (Html.BeginForm("CreateQuick", "ActionArgs", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken();
                            Html.ValidationSummary(true);
                            Html.EnableClientValidation();
                            <div class="row">
                                <div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default AppForm">
                                        <div class="panel-body">
                                            <div class="row">
                                                <div class='col-sm-6'>
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.ParameterName) <span class="text-danger-reg">*</span></label>
                                                        <div class="input-group" id="dvPropList" name="PropList">
                                                            @Html.DropDownList("PropertyListActionArg", null, new { @multiple = "multiple" })
                                                            @Html.TextBoxFor(model => model.ParameterName, new { style = "border:none !important;Width:0px !important;" })
                                                            @Html.ValidationMessageFor(model => model.ParameterName)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class='col-sm-6'>
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.ParameterValue) <span class="text-danger-reg">*</span></label>
                                                        @Html.TextBoxFor(model => model.ParameterValue, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ParameterValue)
                                                    </div>
                                                </div>
                                                <div class='col-sm-6' style="visibility:hidden;">
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.ActionArgumentsID) </label>
                                                        <div class="input-group">
                                                            @Html.DropDownList("ActionArgumentsID", null, "--Select Action--",
                                        new
                                        {
                                            @class = "chosen-select form-control",
                                            @HostingName = "RuleAction",
                                            @dataurl = Url.Action("GetAllValue", "RuleAction", null),
                                        })
                                                            @Html.ValidationMessageFor(model => model.ActionArgumentsID)
                                                            <div class="input-group-btn">
                                                                <a class="btn btn-default btn ie8fix" href="#">
                                                                    <span class="glyphicon glyphicon-plus-sign"></span>
                                                                </a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
                            @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["ActionArgsParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" })*@
                            <input type="submit" value="Create" class="btn btn-primary btn-sm" />
}
@Scripts.Render("~/bundles/jqueryval")
<script src="@Url.Content("~/Scripts/Common2/bootstrap-multiselect.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/bootstrap-multiselect.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Common2/bootstrap-multiselect.js")" type="text/javascript"></script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
<script>
    $(document).ready(function () {
        $('#PropertyListActionArg').multiselect({
            buttonWidth: '100%'
        });
    });
</script>
<script>
    $("form").submit(function () {
        $('div[name=PropList]').each(function (e) {
            $("#ParameterName").val('');
            catname = $(this).attr('id');
            var selectedProperties = ($('#PropertyListActionArg option:selected'));
            var firstInput = $("#" + catname).find('input[type=text],input[type=password],input[type=radio],input[type=checkbox],textarea,select').filter(':visible:first');
            var firstButton = $("#" + catname).find('button').filter(':first');
            var txtid = firstInput.attr('id');
            var btntitle = firstButton.attr('title');
            if (firstButton != null) {
                if (btntitle != 'None selected') {
                    $(selectedProperties).each(function (index, prop) {
                        $("#" + txtid).val($("#" + txtid).val() + "," + [$(this).val()]);
                    });
                }
                else
                    $("#" + txtid).val('');
            }
        });
        if ($(this).find('.input-validation-error').length == 0) {
            $(this).find(':submit').attr('disabled', 'disabled');
        }
    });
</script>
