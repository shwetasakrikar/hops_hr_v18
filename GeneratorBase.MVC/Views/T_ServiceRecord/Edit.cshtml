@model GeneratorBase.MVC.Models.T_ServiceRecord
@using PagedList;
@{
    ViewBag.Title = "Edit Service Record";
	var EditPermission = User.CanEditItem("T_ServiceRecord", Model, User);
	var DeletePermission = User.CanDeleteItem("T_ServiceRecord", Model, User);
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_ServiceRecord");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Service Record";
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_ThreeMonthDue")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_SixMonthDue")
		 return new { @class = "form-control", @readonly = "readonly" };
		if(Property=="T_TwelveMonthDue")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_ServiceRecord", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
             if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				// $('#' + hostingEntityName + 'ID').trigger("change");
				  $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
			if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			}
			 
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_ServiceRecordIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_ServiceRecordIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_ServiceRecordIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_ServiceRecordIsGroupsHiddenRule);
    }
}

@{
    if (!string.IsNullOrEmpty(ViewBag.T_ServiceRecordIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_ServiceRecordIsSetValueUIRule);
    }
}
	<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title" >
            <i class="glyphicon glyphicon-edit text-primary"></i> @EntityDisplayName  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>

			   <div class="btn-group pull-right" style="margin-top:3px;">
			  


            <a data-toggle="dropdown" class="btn btn-xs dropdown-toggle" alt="Action" title="Action">
                Action
                <span class="caret" style="margin-bottom:2px">    </span>
            </a>
			<ul class="dropdown-menu pull-left">
			
				<li>
                    @if (EditPermission)
                    {
                        <a href="@Url.Action("Edit","T_ServiceRecord", new { id = Model.Id,  UrlReferrer = Request.UrlReferrer, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (EditPermission && User.CanDelete("T_ServiceRecord"))
                    {
                        <a href="@Url.Action("Delete", "T_ServiceRecord", new {UrlReferrer = Request.UrlReferrer, id = Model.Id, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu pull-left" id="AddAssociationdropmenuT_ServiceRecord">
	 @{ var dropmenu = false; }
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if (User.CanAdd("T_Comment"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_ServiceRecordComments", 
							HostingEntityName = "T_ServiceRecord",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Comment
						</a>
					</li>
				}
			</ul>
</li>
@if(!dropmenu)
{
    <script>
        $("#AddAssociationdropmenuT_ServiceRecord").hide();
    </script>
}
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu pull-left">
	<a tabindex="-1" href="#" style="margin-bottom:10px;">Find Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "FileDocument", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Document</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Licenses", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Licenses</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Comment", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Comment</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_DrugAlcoholTest", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Drug & Alcohol Test</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_UnitX", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">UnitX</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_JobAssignment", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Job Assignment</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_LeaveProfile", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Leave</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_EmployeeInjury", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Employee Injury</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_BackgroundCheck", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Background Check</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Education", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Education</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Accommodation", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Accommodation</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_PayDetails", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">Pay Details </a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_AllFacilitiesUnit", new {sourceEntity="T_ServiceRecord",id=Model.Id}, null)">All Facilities Unit</a>
</li>
</ul>
</li>
			</ul>
		</div>

        </h1>

     <h2 class="text-primary" style="padding:0px 5px 15px 0px">
	  <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
			@if (EditPermission)
			{	
				<div class="pull-right" style="margin-top:-3px">
					<button class="btn btn-default btn-xs pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('T_ServiceRecord',event,'hdnNextPrevId')")" alt="Next" title="Next">Next >></button>
					@Html.DropDownList("EntityT_ServiceRecordDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('T_ServiceRecord','frmT_ServiceRecord','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 22px;width: 170px; font-size:12px; color:#333;" })
					<button class="btn btn-default btn-xs pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('T_ServiceRecord',event,'hdnNextPrevId')")" alt="Prev" title="Prev"><< Prev</button>
				</div>
			}
	 </h2>
		
    </div>
    <!-- /.col-lg-12 -->
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>

<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
 <div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">Details</a></li>
		 <li @(!User.CanView("T_Comment") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_ServiceRecordComments','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_Comment", new {RenderPartial=true, HostingEntity ="T_ServiceRecord", HostingEntityID = @Model.Id, AssociatedType = "T_ServiceRecordComments",TabToken = DateTime.Now.Ticks,}))')" href="#T_ServiceRecordComments" data-toggle="tab" alt="Comment" title="Comment">Comment
		 <span class="badge bg-blue"><div id="dvcnt_T_ServiceRecordComments">@ViewBag.T_ServiceRecordCommentsCount</div></span>
		 </a></li>
		 <li @(!User.CanView("JournalEntry")?"style=display:none;":"")><a onclick="LoadTab('JournalEntryToT_ServiceRecordRelation','@User.JavaScriptEncodedName@Model.Id','@Url.Action("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_ServiceRecord", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry", TabToken = DateTime.Now.Ticks })')" href="#JournalEntryToT_ServiceRecordRelation" data-toggle="tab" alt="Service Record Journal" title="Service Record Journal">
		 Service Record Journal
		 </a></li>

    </ul>
		<div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
@using (Html.BeginForm("Edit","T_ServiceRecord",new {UrlReferrer =Convert.ToString(ViewData["T_ServiceRecordParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data",@id="frmT_ServiceRecord" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48893">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
											
									<h3 class="panel-title" alt="Basic Profile" title="Basic Profile">Basic Profile</h3>
								</div>
                                <div class="panel-body">
				@if(User.CanView("T_ServiceRecord","T_EmployeeEmploymentProfileID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeEmploymentProfileID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeEmploymentProfileID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_ServiceRecord", "T_EmployeeEmploymentProfileID"))
		{
			@Html.DropDownList("T_EmployeeEmploymentProfileID", null, "-- Select --", new {@lock="true" ,   @required ="required",      @class = "chosen-select form-control", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeEmploymentProfileID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeEmploymentProfileID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeEmploymentProfileID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_Employee", @dataurl = Url.Action("GetAllValue", "T_Employee",new { caller = "T_EmployeeEmploymentProfileID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeEmploymentProfileID)
									@if (User.CanAdd("T_Employee"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_Employee"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee','dvPopup','" + Url.Action("CreateQuick", "T_Employee", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_Employee"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_Employee" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_Employee" target="_blank" href="@Url.Action(User.CanEdit("T_Employee") ? "Edit" : "Details", "T_Employee", new { Id = Html.DisplayFor(model => model.t_employeeemploymentprofile.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeeemploymentprofile == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_Employee").attr("title", '@Model.t_employeeemploymentprofile.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeEmploymentProfileID, new { @class = "form-control" })}
				@if(User.CanView("T_ServiceRecord","T_EmploymentRecordEmployeeTypeID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmploymentRecordEmployeeTypeID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmploymentRecordEmployeeTypeID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_ServiceRecord", "T_EmploymentRecordEmployeeTypeID"))
		{
			@Html.DropDownList("T_EmploymentRecordEmployeeTypeID", null, "-- Select --", new {  @required ="required",      @class = "chosen-select form-control", @HostingName = "T_EmployeeType", @dataurl = Url.Action("GetAllValue", "T_EmployeeType",new { caller = "T_EmploymentRecordEmployeeTypeID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmploymentRecordEmployeeTypeID, new { @class = "form-control" })
			@Html.DropDownList("T_EmploymentRecordEmployeeTypeID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_EmployeeType", @dataurl = Url.Action("GetAllValue", "T_EmployeeType",new { caller = "T_EmploymentRecordEmployeeTypeID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmploymentRecordEmployeeTypeID)
									@if (User.CanAdd("T_EmployeeType"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_EmployeeType"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Employee Type','dvPopup','" + Url.Action("CreateQuick", "T_EmployeeType", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_EmployeeType"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_EmployeeType" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_EmployeeType" target="_blank" href="@Url.Action(User.CanEdit("T_EmployeeType") ? "Edit" : "Details", "T_EmployeeType", new { Id = Html.DisplayFor(model => model.t_employmentrecordemployeetype.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employmentrecordemployeetype == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_EmployeeType").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_EmployeeType").attr("title", '@Model.t_employmentrecordemployeetype.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmploymentRecordEmployeeTypeID, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_IsCurrent"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_IsCurrent">
						<div class="form-group" title="Current Active Service Record">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_IsCurrent) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_IsCurrent", Model.T_IsCurrent.HasValue ? Model.T_IsCurrent : false)
                            @Html.ValidationMessageFor(model => model.T_IsCurrent)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_IsCurrent, new { @class = "form-control" })}
				@if(User.CanView("T_ServiceRecord","T_EmploymentRecordHiredAtFacilityID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmploymentRecordHiredAtFacilityID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmploymentRecordHiredAtFacilityID) <span class="text-danger-reg">*</span></label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_ServiceRecord", "T_EmploymentRecordHiredAtFacilityID"))
		{
			@Html.DropDownList("T_EmploymentRecordHiredAtFacilityID", null, "-- Select --", new {  @required ="required",      @class = "chosen-select form-control", @HostingName = "T_AllFacilities", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmploymentRecordHiredAtFacilityID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmploymentRecordHiredAtFacilityID, new { @class = "form-control" })
			@Html.DropDownList("T_EmploymentRecordHiredAtFacilityID", null, "-- Select --", new {  @required ="required",     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_AllFacilities", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmploymentRecordHiredAtFacilityID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmploymentRecordHiredAtFacilityID)
									@if (User.CanAdd("T_AllFacilities"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_AllFacilities"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Hired At Facility','dvPopup','" + Url.Action("CreateQuick", "T_AllFacilities", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_AllFacilities"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_AllFacilities" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_AllFacilities" target="_blank" href="@Url.Action(User.CanEdit("T_AllFacilities") ? "Edit" : "Details", "T_AllFacilities", new { Id = Html.DisplayFor(model => model.t_employmentrecordhiredatfacility.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employmentrecordhiredatfacility == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").attr("title", '@Model.t_employmentrecordhiredatfacility.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmploymentRecordHiredAtFacilityID, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_HireDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_HireDate">
							  <div class="form-group" title="Hire  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_HireDate) <span class="text-danger-reg">*</span></label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_HireDate">
 @Html.TextBoxFor(model => model.T_HireDate, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_HireDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_HireDate)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_HireDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_HireDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_HireDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_HireDate, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_TerminationDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_TerminationDate">
							  <div class="form-group" title="Separation Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_TerminationDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_TerminationDate">
 @Html.TextBoxFor(model => model.T_TerminationDate, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_TerminationDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_TerminationDate)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_TerminationDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_TerminationDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_TerminationDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_TerminationDate, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48891">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
											
									<h3 class="panel-title" alt="Probation Details" title="Probation Details">Probation Details</h3>
								</div>
                                <div class="panel-body">
@if(User.CanView("T_ServiceRecord","T_ThreeMonthDue"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ThreeMonthDue">
							  <div class="form-group" title="Three Month Due">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_ThreeMonthDue) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_ThreeMonthDue">
 @Html.TextBoxFor(model => model.T_ThreeMonthDue, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_ThreeMonthDue") ? (object)new {@readonly = "readonly", @class = "form-control",@actualvalue = Model.T_ThreeMonthDue.HasValue ? Model.T_ThreeMonthDue.Value : DateTime.UtcNow,@format = "hh:mm" } : (object)new { @class = "form-control", @readonly="readonly",@actualvalue = Model.T_ThreeMonthDue.HasValue ? Model.T_ThreeMonthDue.Value : DateTime.UtcNow,@format = "hh:mm"})

									
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');">
											<span class="fam-arrow-refresh"></span>
                                        </a>
                                    </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_ThreeMonthDue)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_ThreeMonthDue"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_ThreeMonthDue').datetimepicker({ pickDate:false, minuteStepping: 15 });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_ThreeMonthDue, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_ThreeMonthReviewCompleted"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ThreeMonthReviewCompleted">
						<div class="form-group" title="Three Month Review Completed">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_ThreeMonthReviewCompleted) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_ThreeMonthReviewCompleted", Model.T_ThreeMonthReviewCompleted.HasValue ? Model.T_ThreeMonthReviewCompleted : false)
                            @Html.ValidationMessageFor(model => model.T_ThreeMonthReviewCompleted)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_ThreeMonthReviewCompleted, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_SixMonthDue"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_SixMonthDue">
							  <div class="form-group" title="Six Month Due">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_SixMonthDue) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_SixMonthDue">
 @Html.TextBoxFor(model => model.T_SixMonthDue, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_SixMonthDue") ? (object)new {@readonly = "readonly", @class = "form-control",@actualvalue = Model.T_SixMonthDue.HasValue ? Model.T_SixMonthDue.Value : DateTime.UtcNow,@format = "hh:mm" } : (object)new { @class = "form-control", @readonly="readonly",@actualvalue = Model.T_SixMonthDue.HasValue ? Model.T_SixMonthDue.Value : DateTime.UtcNow,@format = "hh:mm"})

									
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');">
											<span class="fam-arrow-refresh"></span>
                                        </a>
                                    </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_SixMonthDue)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_SixMonthDue"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_SixMonthDue').datetimepicker({ pickDate:false, minuteStepping: 15 });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_SixMonthDue, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_SixMonthReviewCompleted"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_SixMonthReviewCompleted">
						<div class="form-group" title="Six  Month  Review  Completed">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_SixMonthReviewCompleted) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_SixMonthReviewCompleted", Model.T_SixMonthReviewCompleted.HasValue ? Model.T_SixMonthReviewCompleted : false)
                            @Html.ValidationMessageFor(model => model.T_SixMonthReviewCompleted)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_SixMonthReviewCompleted, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_TwelveMonthDue"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_TwelveMonthDue">
							  <div class="form-group" title="Twelve Month Due">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_TwelveMonthDue) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_TwelveMonthDue">
 @Html.TextBoxFor(model => model.T_TwelveMonthDue, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_TwelveMonthDue") ? (object)new {@readonly = "readonly", @class = "form-control",@actualvalue = Model.T_TwelveMonthDue.HasValue ? Model.T_TwelveMonthDue.Value : DateTime.UtcNow,@format = "hh:mm" } : (object)new { @class = "form-control", @readonly="readonly",@actualvalue = Model.T_TwelveMonthDue.HasValue ? Model.T_TwelveMonthDue.Value : DateTime.UtcNow,@format = "hh:mm"})

									
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" onclick="GetCalculationValue(event,'@Url.Action("GetCalculationValues")');">
											<span class="fam-arrow-refresh"></span>
                                        </a>
                                    </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_TwelveMonthDue)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_TwelveMonthDue"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_TwelveMonthDue').datetimepicker({ pickDate:false, minuteStepping: 15 });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_TwelveMonthDue, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_TwelveMonthReviewCompleted"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_TwelveMonthReviewCompleted">
						<div class="form-group" title="Twelve  Month  Review  Completed">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_TwelveMonthReviewCompleted) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_TwelveMonthReviewCompleted", Model.T_TwelveMonthReviewCompleted.HasValue ? Model.T_TwelveMonthReviewCompleted : false)
                            @Html.ValidationMessageFor(model => model.T_TwelveMonthReviewCompleted)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_TwelveMonthReviewCompleted, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_ProbationaryExtensionDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ProbationaryExtensionDate">
							  <div class="form-group" title="Probationary  Extension  Date">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_ProbationaryExtensionDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_ProbationaryExtensionDate">
 @Html.TextBoxFor(model => model.T_ProbationaryExtensionDate, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_ProbationaryExtensionDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_ProbationaryExtensionDate)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_ProbationaryExtensionDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_ProbationaryExtensionDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_ProbationaryExtensionDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_ProbationaryExtensionDate, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_ExtensionReviewCompleted"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ExtensionReviewCompleted">
						<div class="form-group" title="Extension Review Completed">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_ExtensionReviewCompleted) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_ExtensionReviewCompleted", Model.T_ExtensionReviewCompleted.HasValue ? Model.T_ExtensionReviewCompleted : false)
                            @Html.ValidationMessageFor(model => model.T_ExtensionReviewCompleted)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_ExtensionReviewCompleted, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48892">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
											
									<h3 class="panel-title" alt="Separation Details" title="Separation Details">Separation Details</h3>
								</div>
                                <div class="panel-body">
				@if(User.CanView("T_ServiceRecord","T_EmployeeTerminationReasonID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeTerminationReasonID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeTerminationReasonID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_ServiceRecord", "T_EmployeeTerminationReasonID"))
		{
			@Html.DropDownList("T_EmployeeTerminationReasonID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_TerminationReason", @dataurl = Url.Action("GetAllValue", "T_TerminationReason",new { caller = "T_EmployeeTerminationReasonID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeTerminationReasonID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeTerminationReasonID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_TerminationReason", @dataurl = Url.Action("GetAllValue", "T_TerminationReason",new { caller = "T_EmployeeTerminationReasonID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeTerminationReasonID)
									@if (User.CanAdd("T_TerminationReason"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_TerminationReason"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Separation Reason','dvPopup','" + Url.Action("CreateQuick", "T_TerminationReason", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_TerminationReason"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_TerminationReason" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_TerminationReason" target="_blank" href="@Url.Action(User.CanEdit("T_TerminationReason") ? "Edit" : "Details", "T_TerminationReason", new { Id = Html.DisplayFor(model => model.t_employeeterminationreason.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeeterminationreason == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_TerminationReason").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_TerminationReason").attr("title", '@Model.t_employeeterminationreason.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeTerminationReasonID, new { @class = "form-control" })}
				@if(User.CanView("T_ServiceRecord","T_EmployeeRecordTerminationFacilityID"))
				{
									 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EmployeeRecordTerminationFacilityID">
                        <div class='form-group'>
                            <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_EmployeeRecordTerminationFacilityID) </label>
							<div class="input-group col-sm-7 col-md-7 col-xs-12">
							<div class="input-group" style="width:100%;">									
									@if (User.CanEdit("T_ServiceRecord", "T_EmployeeRecordTerminationFacilityID"))
		{
			@Html.DropDownList("T_EmployeeRecordTerminationFacilityID", null, "-- Select --", new {      @class = "chosen-select form-control", @HostingName = "T_AllFacilities", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmployeeRecordTerminationFacilityID" }) })
		}
		else
		{
			@Html.HiddenFor(model => model.T_EmployeeRecordTerminationFacilityID, new { @class = "form-control" })
			@Html.DropDownList("T_EmployeeRecordTerminationFacilityID", null, "-- Select --", new {     @class = "chosen-select form-control", @disabled="disabled", @HostingName = "T_AllFacilities", @dataurl = Url.Action("GetAllValue", "T_AllFacilities",new { caller = "T_EmployeeRecordTerminationFacilityID" }) })
		}
									@Html.ValidationMessageFor(model => model.T_EmployeeRecordTerminationFacilityID)
									@if (User.CanAdd("T_AllFacilities"))
                                    {
									<div class="input-group-btn">
										<a class="btn btn-default btn ie8fix" id="addT_AllFacilities"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','After Termination Joined Facility','dvPopup','" + Url.Action("CreateQuick", "T_AllFacilities", new { UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop=true }) + "')")">
											<span class="glyphicon glyphicon-plus-sign"></span>
										</a>
									</div>
									}
								

								                                            
											 @if (User.CanView("T_AllFacilities"))
                                                    {
                                                        <div class="input-group-btn" id="dvLinkToT_AllFacilities" title="">
                                                            <a class="btn btn-default btn ie8fix" id="aLinkToT_AllFacilities" target="_blank" href="@Url.Action(User.CanEdit("T_AllFacilities") ? "Edit" : "Details", "T_AllFacilities", new { Id = Html.DisplayFor(model => model.t_employeerecordterminationfacility.Id).ToString(), UrlReferrer=Request.UrlReferrer}, null)"><i class="glyphicon glyphicon-eye-open"></i></a>
                                                        </div>
                                                        if (Model.t_employeerecordterminationfacility == null)
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").hide();
                                                                });
                                                            </script>
                                                        }
                                                        else
                                                        {
                                                            <script>
                                                                $(function () {
                                                                    $("#dvLinkToT_AllFacilities").attr("title", '@Model.t_employeerecordterminationfacility.DisplayValue');
                                                                });
                                                            </script>
                                                        }
                                                    }
                                        							</div>
							</div>
                        </div>
                    </div>


                   
					} else { @Html.HiddenFor(model => model.T_EmployeeRecordTerminationFacilityID, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_TwoWeekNoticeGiven"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_TwoWeekNoticeGiven">
						<div class="form-group" title="Two  Week  Notice  Given">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_TwoWeekNoticeGiven) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_TwoWeekNoticeGiven", Model.T_TwoWeekNoticeGiven.HasValue ? Model.T_TwoWeekNoticeGiven : false)
                            @Html.ValidationMessageFor(model => model.T_TwoWeekNoticeGiven)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_TwoWeekNoticeGiven, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_NoticeGivenDate"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_NoticeGivenDate">
							  <div class="form-group" title="">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_NoticeGivenDate) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_NoticeGivenDate">
 @Html.TextBoxFor(model => model.T_NoticeGivenDate, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_NoticeGivenDate") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_NoticeGivenDate)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_NoticeGivenDate"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_NoticeGivenDate').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_NoticeGivenDate').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_NoticeGivenDate, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_ThirtyDaysSinceTermination"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ThirtyDaysSinceTermination">
							  <div class="form-group" title="Thirty Days Since Separation">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_ThirtyDaysSinceTermination) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_ThirtyDaysSinceTermination">
 @Html.TextBoxFor(model => model.T_ThirtyDaysSinceTermination, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_ThirtyDaysSinceTermination") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_ThirtyDaysSinceTermination)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_ThirtyDaysSinceTermination"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_ThirtyDaysSinceTermination').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_ThirtyDaysSinceTermination').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_ThirtyDaysSinceTermination, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_ThirteenWeeksSinceTermination"))
{

						 <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ThirteenWeeksSinceTermination">
							  <div class="form-group" title="Thirteen Weeks Since Separation">
                                <label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_ThirteenWeeksSinceTermination) </label>
								<div class="input-group col-sm-7 col-md-7 col-xs-12">
                                    <div class="input-group date" id="datetimepickerT_ThirteenWeeksSinceTermination">
 @Html.TextBoxFor(model => model.T_ThirteenWeeksSinceTermination, "{0:MM/dd/yyyy}", User.CanEdit("T_ServiceRecord", "T_ThirteenWeeksSinceTermination") ? (object)new { @class = "form-control" } : (object)new { @class = "form-control", @readonly="readonly"})

									<span class="input-group-addon btn-default calendar">
                                           <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.T_ThirteenWeeksSinceTermination)

								</div>
                                </div>
								@if(User.CanEdit("T_ServiceRecord", "T_ThirteenWeeksSinceTermination"))
								{
                                <script type="text/javascript">
                                    $(function () {
										$('#T_ThirteenWeeksSinceTermination').datetimepicker({ pickTime:false });
                                        $('#datetimepickerT_ThirteenWeeksSinceTermination').datetimepicker({ pickTime:false });
  
                                    });
                                </script>
								}
                            </div>
						

                           
} else { @Html.HiddenFor(model => model.T_ThirteenWeeksSinceTermination, new { @class = "form-control" })}



@if(User.CanView("T_ServiceRecord","T_EligibleForRehire"))
{
								<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EligibleForRehire">
						<div class="form-group" title="Not  Eligible  For  Rehire">
                        <label class="col-sm-5 col-md-5 col-xs-12" >
                            @Html.LabelFor(model => model.T_EligibleForRehire) 
                        </label>
						<div class="input-group col-sm-7 col-md-7 col-xs-12">
                         
							@Html.CheckBox("T_EligibleForRehire", Model.T_EligibleForRehire.HasValue ? Model.T_EligibleForRehire : false)
                            @Html.ValidationMessageFor(model => model.T_EligibleForRehire)
                        </div>
						</div>
                    </div>
				                            

} else { @Html.HiddenFor(model => model.T_EligibleForRehire, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default" id="dvGroup48894">
                                        <div class="panel-heading clearfix">
                                            <i class="icon-calendar"></i>
											
									<h3 class="panel-title" alt="Notes" title="Notes">Notes</h3>
								</div>
                                <div class="panel-body">
@if(User.CanView("T_ServiceRecord","T_ProbationNotes"))
{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ProbationNotes">
							<div class='form-group' title="Probation  Notes">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_ProbationNotes) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.T_ProbationNotes, getHtmlAttributes("T_ProbationNotes"))
									@Html.ValidationMessageFor(model => model.T_ProbationNotes)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_ProbationNotes, new { @class = "form-control" })}
@if(User.CanView("T_ServiceRecord","T_TerminationNotes"))
{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_TerminationNotes">
							<div class='form-group' title="Separation Notes">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_TerminationNotes) </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
								@Html.TextAreaFor(model => model.T_TerminationNotes, getHtmlAttributes("T_TerminationNotes"))
									@Html.ValidationMessageFor(model => model.T_TerminationNotes)
								</div>
                             </div>
						</div>
} else { @Html.HiddenFor(model => model.T_TerminationNotes, new { @class = "form-control" })}
							</div>
                         </div>
                      </div>
       </div>
            </div>
        </div>
		</div>
		 @Html.AntiForgeryToken();
		 <a class="btn btn-default btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index","T_ServiceRecord")');" alt="Cancel" title="Cancel">Cancel</a>
		 @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_ServiceRecordParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix", @alt="Cancel", @title="Cancel" })*@
		 if (EditPermission)
         {
 				<input type="submit" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix"  alt="Save" title="Save"/>
				<input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev"/>
				<input type="submit" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay"/>
		}	
				<input type="hidden" name="hdncommand" value="" />
				<input type="hidden" name="hdnNextPrevId" value="" />
}
 @{ var dropmenubottom = false; }
<div class="dropdown pull-left formbuttonfix"  id="AddAssociationdropmenubottomT_ServiceRecord">
<button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
            Add Association
            <span class="caret"></span>
        </button>
		 <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1">
			@if (User.CanAdd("T_Comment"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_ServiceRecordComments", 
						HostingEntityName = "T_ServiceRecord",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Comment
                </a>
				</li>
            }

			
</ul>
</div>
@if(!dropmenubottom || !EditPermission)
{
    <script>
        $("#AddAssociationdropmenubottomT_ServiceRecord").hide();
    </script>
}
<div class="clearfix" style="clear:both; margin-bottom:8px"></div>
</div>
 <div class="tab-pane fade in" id="T_ServiceRecordComments">
	@if (User.CanView("T_Comment"))
	{
	  // Html.RenderAction("Index", "T_Comment", new {RenderPartial=true, HostingEntity = "T_ServiceRecord", HostingEntityID = @Model.Id, AssociatedType = "T_ServiceRecordComments" }); 
	}
  </div>
 <div class="tab-pane fade in" id="JournalEntryToT_ServiceRecordRelation">
			 @if (User.CanView("JournalEntry"))
			 {
			  // Html.RenderAction("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_ServiceRecord", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry" });
			 }
  </div>

</div> <!-- /tab-content --><br />

<br/>
</div>
	<script>
	</script>
	

@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_ServiceRecord").ToList();

if ((businessrule != null && businessrule.Count > 0) )
{
var ruleids = businessrule.Select(q => q.Id).ToList();
var typelist  = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());

    <script>
		$(document).ready(function () {
				document.getElementById("ErrMsg").innerHTML = "";
				var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";

 form = $("#frmT_ServiceRecord").serialize();
				dataurl = "@Url.Action("businessruletype", "T_ServiceRecord", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_ServiceRecord", false, "ErrMsg", form);
				//business rules on inline associations

    });
</script>
<script>
    $("form").submit(function (event) {
	if (!$("#frmT_ServiceRecord").valid()) return;
			document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
            var dataurl = "";
            var form = "";
            var inlinecount = "0";
 form = $("#frmT_ServiceRecord").serialize();
    
				 dataurl = "@Url.Action("businessruletype", "T_ServiceRecord", new { ruleType = "OnEdit"})";
                 flag = ApplyBusinessRuleOnSubmit(dataurl, "T_ServiceRecord", false, "ErrMsg", form);

  				 //business rules on inline associations
               
			 if (flag)
				{
								GetCalculationValue(event,'@Url.Action("GetCalculationValues")');
                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
					if ($(document.activeElement).attr('id') == "nextEdit" || $(document.activeElement).attr('id') == "prevEdit")
			         $('input:hidden[name="hdncommand"]').val("SaveNextPrev");
					 $("#frmT_ServiceRecord").find(':input').removeAttr('disabled');
					}
            return flag;
		});
</script>
}
 else
    {
       <script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmT_ServiceRecord").valid()) return;
        var $this = $(this);
				GetCalculationValue(event,'@Url.Action("GetCalculationValues")');
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
    });
	</script>
    }
 
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
		focusOnControl('frmT_ServiceRecord');
        }
        catch (ex) { }
    });
	 $(document).ready(function () {
		var RecIdEdit = $("#frmT_ServiceRecord").find("input:hidden[name='Id']").val();
        $("#EntityT_ServiceRecordDisplayValueEdit").val(RecIdEdit);

		var textedit = $("option:selected", $("#EntityT_ServiceRecordDisplayValueEdit")).text();
		$("#EntityT_ServiceRecordDisplayValueEdit").attr('data-toggle', 'tooltip')
		$("#EntityT_ServiceRecordDisplayValueEdit").attr('title', textedit);

        var lastOptionValEdit = $('#EntityT_ServiceRecordDisplayValueEdit option:last-child').val();
        var fristOptionValEdit = $('#EntityT_ServiceRecordDisplayValueEdit option:first-child').val();
        if (lastOptionValEdit == RecIdEdit) {
            $('#nextEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
        }
        if (fristOptionValEdit == RecIdEdit)
            $('#prevEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
    });
</script>


