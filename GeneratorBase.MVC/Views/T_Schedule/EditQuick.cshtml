@model GeneratorBase.MVC.Models.T_Schedule
@using PagedList;
@{
    ViewBag.Title = "Edit Schedule";
    var EditPermission = User.CanEditItem("T_Schedule", Model, User);
    var DeletePermission = User.CanDeleteItem("T_Schedule", Model, User);
    Layout = null;
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("T_Schedule", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
                $('#' + hostingEntityName + 'ID').trigger("change");
            }
        }
        catch (ex) { }
    });
</script>
<script type="text/javascript">

    $(document).ready(function () {
      //  ChangeScheduleType();
        // ChangeEndType();
        $('#T_RecurringTaskEndTypeID').val('@Model.T_RecurringTaskEndTypeID');
        $('select[multiple="multiple"]').each(function () {
            $(this).multiselect({ buttonWidth: '100%' });
        });
    });
    function RepeatTypeChange() {
        var $obj = $('#T_AssociatedRecurringScheduleDetailsTypeID');
        var value = $obj.val();
        text = ($('#T_AssociatedRecurringScheduleDetailsTypeID :selected').text());
        $("#RepeatOnWeekly").hide();
        $("#dvT_RepeatByID").hide();
        if (text == "Weekly") {
            $("#RepeatOnWeekly").show();
        }
        if (text == "Monthly") {
            $("#dvT_RepeatByID").show();
        }
    }
    function ChangeScheduleType() {
        var $obj = $('input:radio[name="T_AssociatedScheduleTypeID"]:checked');
        var SelectedVal = $obj.val();
        var text = $obj.next('span:first').html()
        $("#dvRepeat").hide();
        $('#T_RecurringTaskEndTypeID').removeAttr("Required");
        if (text == "Repeat") {
            $("#dvRepeat").show();
            $('#T_RecurringTaskEndTypeID').attr("Required", "Required");
            RepeatTypeChange();
            ChangeEndType();
        }
    }
    function ChangeEndType() {
        var $obj = $('#T_RecurringTaskEndTypeID');
        var SelectedVal = $obj.val();
        text = ($('#T_RecurringTaskEndTypeID :selected').text());
        $("#dvT_EndDate").hide();
        $("#dvT_OccurrenceLimitCount").hide();
        $('#T_EndDate').removeAttr("Required");
        $('#T_OccurrenceLimitCount').removeAttr("Required");
        if (text == "After Specified Occurrences") {
            $("#dvT_OccurrenceLimitCount").show();
            $('#T_OccurrenceLimitCount').attr("Required", "Required");
        }
        if (text == "On Specified Date") {
            $("#dvT_EndDate").show();
            $('#T_EndDate').attr("Required", "Required");
        }
    }
</script>
<script type='text/javascript'>
    $(document).ready(function () {
        $("span.input-group-addon.btn-default.calendar").next("input").each(function (i, obj) {
            $(this).on('keydown', function (e) {
                if (this.selectionStart || this.selectionStart == 0) {
                    // selectionStart won't work in IE < 9
                    var key = e.which;
                    var prevDefault = true;
                    var thouSep = ",";  // your seperator for thousands
                    var deciSep = ".";  // your seperator for decimals
                    var deciNumber = 2; // how many numbers after the comma
                    var thouReg = new RegExp(thouSep, "g");
                    var deciReg = new RegExp(deciSep, "g");
                    function spaceCaretPos(val, cPos) {
                        /// get the right caret position without the spaces
                        if (cPos > 0 && val.substring((cPos - 1), cPos) == thouSep)
                            cPos = cPos - 1;
                        if (val.substring(0, cPos).indexOf(thouSep) >= 0) {
                            cPos = cPos - val.substring(0, cPos).match(thouReg).length;
                        }
                        return cPos;
                    }
                    function spaceFormat(val, pos) {
                        /// add spaces for thousands
                        if (val.indexOf(deciSep) >= 0) {
                            var comPos = val.indexOf(deciSep);
                            var int = val.substring(0, comPos);
                            var dec = val.substring(comPos);
                        } else {
                            var int = val;
                            var dec = "";
                        }
                        var ret = [val, pos];
                        if (int.length > 3) {
                            var newInt = "";
                            var spaceIndex = int.length;
                            while (spaceIndex > 3) {
                                spaceIndex = spaceIndex - 3;
                                newInt = thouSep + int.substring(spaceIndex, spaceIndex + 3) + newInt;
                                if (pos > spaceIndex) pos++;
                            }
                            ret = [int.substring(0, spaceIndex) + newInt + dec, pos];
                        }
                        return ret;
                    }
                    $(this).on('keyup', function (ev) {
                        if (ev.which == 8) {
                            // reformat the thousands after backspace keyup
                            var value = this.value;
                            var caretPos = this.selectionStart;
                            caretPos = spaceCaretPos(value, caretPos);
                            value = value.replace(thouReg, '');
                            var newValues = spaceFormat(value, caretPos);
                            this.value = newValues[0];
                            this.selectionStart = newValues[1];
                            this.selectionEnd = newValues[1];
                        }
                    });
                    if ((e.ctrlKey && (key == 65 || key == 67 || key == 86 || key == 88 || key == 89 || key == 90)) || (e.shiftKey && key == 9)) // You don't want to disable your shortcuts!
                        prevDefault = false;
                    if ((key < 37 || key > 40) && key != 8 && key != 9 && key != 13 && key != 46 && prevDefault) {
                        e.preventDefault();
                        if (!e.altKey && !e.shiftKey && !e.ctrlKey) {
                            var value = this.value;
                            if ((key > 95 && key < 106) || (key > 47 && key < 58) ||
                              (deciNumber > 0 && (key == 110 || key == 188 || key == 190))) {
                                var keys = { // reformat the keyCode
                                    48: 0, 49: 1, 50: 2, 51: 3, 52: 4, 53: 5, 54: 6, 55: 7, 56: 8, 57: 9,
                                    96: 0, 97: 1, 98: 2, 99: 3, 100: 4, 101: 5, 102: 6, 103: 7, 104: 8, 105: 9,
                                    110: deciSep, 188: deciSep, 190: deciSep
                                };
                                var caretPos = this.selectionStart;
                                var caretEnd = this.selectionEnd;
                                if (caretPos != caretEnd) // remove selected text
                                    value = value.substring(0, caretPos) + value.substring(caretEnd);
                                caretPos = spaceCaretPos(value, caretPos);
                                value = value.replace(thouReg, '');
                                var before = value.substring(0, caretPos);
                                var after = value.substring(caretPos);
                                var newPos = caretPos + 1;
                                if (keys[key] == deciSep && value.indexOf(deciSep) >= 0) {
                                    if (before.indexOf(deciSep) >= 0) { newPos--; }
                                    before = before.replace(deciReg, '');
                                    after = after.replace(deciReg, '');
                                }
                                var newValue = before + keys[key] + after;
                                if (newValue.substring(0, 1) == deciSep) {
                                    newValue = "0" + newValue;
                                    newPos++;
                                }
                                while (newValue.length > 1 &&
                                  newValue.substring(0, 1) == "0" && newValue.substring(1, 2) != deciSep) {
                                    newValue = newValue.substring(1);
                                    newPos--;
                                }
                                if (newValue.indexOf(deciSep) >= 0) {
                                    var newLength = newValue.indexOf(deciSep) + deciNumber + 1;
                                    if (newValue.length > newLength) {
                                        newValue = newValue.substring(0, newLength);
                                    }
                                }
                                newValues = spaceFormat(newValue, newPos);
                                this.value = newValues[0];
                                this.selectionStart = newValues[1];
                                this.selectionEnd = newValues[1];
                            }
                        }
                    }
                    $(this).on('blur', function (e) {
                        if (deciNumber > 0) {
                            var value = this.value;
                            var noDec = "";
                            for (var i = 0; i < deciNumber; i++)
                                noDec += "0";
                            if (value == "0" + deciSep + noDec)
                                this.value = ""; //<-- put your default value here
                            else
                                if (value.length > 0) {
                                    if (value.indexOf(deciSep) >= 0) {
                                        var newLength = value.indexOf(deciSep) + deciNumber + 1;
                                        if (value.length < newLength) {
                                            while (value.length < newLength) { value = value + "0"; }
                                            this.value = value.substring(0, newLength);
                                        }
                                    }
                                    else this.value = value + deciSep + noDec;
                                }
                        }
                    });
                }
            });
        });
        $("span.input-group-addon.btn-default.calendar").next("input").each(function (i, obj) {
            $(this).inputdigits();
        });
    });
    function removecurrencycomma() {
        $("span.input-group-addon.btn-default.calendar").next("input").each(function (i, obj) {
            $(this).inputremove();
        });
    }
    $.fn.inputremove = function () {
        return this.each(function () {
            $(this).val($(this).val().replace(/[^-\d\.]/g, ''));
        })
    }
    $.fn.inputdigits = function () {
        return this.each(function () {
            var amountSpn = $(this).val();
            if (amountSpn != '') {
                amountSpn = (Math.round(amountSpn * 100) / 100).toFixed(2);
            }
            $(this).val(amountSpn.toString().replace(/[,$]/g, '').replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,").replace(/(\.\d{1})$/, "$1" + "0"));
        })
    }
    $.fn.digits = function () {
        return this.each(function () {
            var amountSpn = $(this).text();
            if (amountSpn != '') {
                amountSpn = (Math.round(amountSpn * 100) / 100).toFixed(2);
            }
            $(this).text(amountSpn.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,").replace(/(\.\d{1})$/, "$1" + "0"));
        })
    }</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_ScheduleIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_ScheduleIsHiddenRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<div class="row">
    <div class="col-lg-12">
        <label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
        <div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
        <h2 class="text-primary">
            <span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
        </h2>
    </div>
    <!-- /.col-lg-12 -->
</div>
@using (Html.BeginForm("EditQuick", "T_Schedule", new { UrlReferrer = Convert.ToString(ViewData["T_ScheduleParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.ConcurrencyKey)
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
            <div class="panel panel-default AppForm">
                <div class="panel-body">
                    @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
                    <div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix">
                                    <i class="icon-calendar"></i>
                                    <h3 class="panel-title">Basic Details</h3>
                                </div>
                                <div class="panel-body">
                                    @Html.HiddenFor(model=>model.T_Name)
                                    @Html.HiddenFor(model => model.T_Description)
                                    @Html.HiddenFor(model => model.T_EntityName)
                                    <div class='col-sm-8 col-md-8  col-xs-12' id="dvT_AssociatedScheduleTypeID">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_AssociatedScheduleTypeID)  <span class="text-danger-reg">*</span></label>
                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                            <div class="input-group radiocontainer">
                                                @Html.RadioButtonListFor(model => model.T_AssociatedScheduleTypeID, (SelectList)ViewBag.T_AssociatedScheduleTypeID, new { @onclick = "ChangeScheduleType();", @required = "required", @dataurl = Url.Action("GetAllValueForRB", "T_Scheduletype", new { caller = "T_AssociatedScheduleTypeID" }) })
                                                @Html.ValidationMessageFor(model => model.T_AssociatedScheduleTypeID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_StartDateTime">
                                        <label class="col-sm-5 col-md-5 col-xs-12"> Start Date <span class="text-danger-reg">*</span></label>
                                        <div class="form-group" title="Start Date Time">
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                <div class="input-group date" id="datetimepickerT_StartDateTime">
                                                    @Html.TextBoxFor(model => model.T_StartDateTime, "{0:MM/dd/yyyy}", new { @id = "T_StartDateTime", @class = "form-control" })
                                                    <span class="input-group-addon btn-default calendar">
                                                        <i class="fa fa-calendar"></i>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.T_StartDateTime)
                                            </div>
                                        </div>
                                        <script type="text/javascript">
                                            $(function () {
                                                $('#datetimepickerT_StartDateTime').datetimepicker({ pickTime: false });
                                                $('#T_StartDateTime').datetimepicker({ pickTime: false });
                                            });
                                        </script>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_StartTime">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_StartTime) <span class="text-danger-reg">*</span> </label>
                                        <div class="form-group" title="Start Time">
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                <div class="input-group date" id="datetimepickerT_StartTime">
                                                    @Html.TextBoxFor(model => model.T_StartTime, "{0:HH:mm}", User.CanEdit("T_Schedule", "T_StartTime") ? (object)new { @id = "T_StartTime", @class = "form-control", @format = "hh:mm" } : (object)new { @id = "T_StartTime", @class = "form-control", @readonly = "readonly", @format = "hh:mm" })
                                                    <span class="input-group-addon btn-default calendar">
                                                        <i class="fa fa-calendar"></i>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.T_StartTime)
                                            </div>
                                        </div>
                                        <script type="text/javascript">
                                            $(function () {
                                                $('#T_StartTime').datetimepicker({ pickDate: false, minuteStepping: 15 });
                                                $('#datetimepickerT_StartTime').datetimepicker({ pickDate: false, minuteStepping: 15 });
                                            });
                                        </script>
                                    </div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EndTime">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_EndTime) <span class="text-danger-reg">*</span> </label>
                                        <div class="form-group" title="Start Time">
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                <div class="input-group date" id="datetimepickerT_EndTime">
                                                    @Html.TextBoxFor(model => model.T_EndTime, "{0:HH:mm}", User.CanEdit("T_Schedule", "T_EndTime") ? (object)new { @id = "T_EndTime", @class = "form-control", @format = "hh:mm" } : (object)new { @id = "T_EndTime", @class = "form-control", @readonly = "readonly", @format = "hh:mm" })
                                                    <span class="input-group-addon btn-default calendar">
                                                        <i class="fa fa-calendar"></i>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.T_EndTime)
                                            </div>
                                        </div>
                                        <script type="text/javascript">
                                            $(function () {
                                                $('#T_EndTime').datetimepicker({ pickDate: false, minuteStepping: 15 });
                                                $('#datetimepickerT_EndTime').datetimepicker({ pickDate: false, minuteStepping: 15 });
                                            });
                                        </script>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="dvRepeat" style="display:none;">
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel panel-default">
                                <div class="panel-heading clearfix">
                                    <i class="icon-calendar"></i>

                                    <h3 class="panel-title">Recurrence Detail</h3>
                                </div>
                                <div class="panel-body">
                                    <div class='col-sm-6 col-md-6  col-xs-12' id="dvT_AssociatedRecurringScheduleDetailsTypeID">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_AssociatedRecurringScheduleDetailsTypeID)  </label>
                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                            <div class="input-group" style="width:100%;">
                                                @Html.DropDownListFor(model => model.T_AssociatedRecurringScheduleDetailsTypeID, (SelectList)ViewBag.T_AssociatedRecurringScheduleDetailsTypeID, new { @class = "form-control", @onchange = "RepeatTypeChange();", @dataurl = Url.Action("GetAllValueForRB", "T_RecurringScheduleDetailstype", new { caller = "T_AssociatedRecurringScheduleDetailsTypeID" }) })
                                                @Html.ValidationMessageFor(model => model.T_AssociatedRecurringScheduleDetailsTypeID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_RecurringRepeatFrequencyID">
                                        <div class='form-group'>
                                            <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_RecurringRepeatFrequencyID) </label>
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                <div class="input-group" style="width:100%;">
                                                    @Html.DropDownListFor(model => model.T_RecurringRepeatFrequencyID, (SelectList)ViewBag.T_RecurringRepeatFrequencyID, new { @class = "chosen-select form-control", @HostingName = "T_RecurringFrequency", @dataurl = Url.Action("GetAllValue", "T_RecurringFrequency", new { caller = "T_RecurringRepeatFrequencyID" }) })
                                                    @Html.ValidationMessageFor(model => model.T_RecurringRepeatFrequencyID)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6 col-md-6  col-xs-12' id="dvT_RepeatByID">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_RepeatByID)  </label>
                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                            <div class="input-group" style="width:100%;">
                                                @Html.DropDownListFor(model => model.T_RepeatByID, (SelectList)ViewBag.T_RepeatByID, new { @class = "form-control", @dataurl = Url.Action("GetAllValueForRB", "T_MonthlyRepeatType", new { caller = "T_RepeatByID" }) })
                                                @Html.ValidationMessageFor(model => model.T_RepeatByID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6 col-md-6  col-xs-12' id="dvT_RecurringTaskEndTypeID">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_RecurringTaskEndTypeID)  </label>
                                        <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                            <div class="input-group" style="width:100%;">
                                                @Html.DropDownListFor(model => model.T_RecurringTaskEndTypeID, (SelectList)ViewBag.T_RecurringTaskEndTypeID,"--Select--", new { @class = "form-control", @onchange = "ChangeEndType()", @dataurl = Url.Action("GetAllValueForRB", "T_RecurringEndType", new { caller = "T_RecurringTaskEndTypeID" }) })
                                                @Html.ValidationMessageFor(model => model.T_RecurringTaskEndTypeID)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EndDate">
                                        <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_EndDate) </label>
                                        <div class="form-group" title="End Date">
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                <div class="input-group date" id="datetimepickerT_EndDate">
                                                    @Html.TextBoxFor(model => model.T_EndDate, new { @id = "T_EndDate", @class = "form-control" })
                                                    <span class="input-group-addon btn-default calendar">
                                                        <i class="fa fa-calendar"></i>
                                                    </span>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.T_EndDate)
                                            </div>
                                        </div>
                                        <script type="text/javascript">
                                            $(function () {
                                                $('#datetimepickerT_EndDate').datetimepicker({ pickTime: false });
                                                $('#T_EndDate').datetimepicker({ pickTime: false });
                                            });
                                        </script>
                                    </div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_OccurrenceLimitCount">
                                        <div class='form-group' title="Occurrence Limit Count">
                                            <label class="col-sm-5 col-md-5 col-xs-12">Occurrence Count</label>
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                                @Html.TextBoxFor(model => model.T_OccurrenceLimitCount, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.T_OccurrenceLimitCount)
                                            </div>
                                        </div>
                                    </div>
                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Summary" style="display:none;">
                                        <div class='form-group' title="Summary">
                                            <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.T_Summary) </label>
                                            <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                @Html.TextAreaFor(model => model.T_Summary, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.T_Summary)
                                            </div>
                                        </div>
                                    </div>
                                    <div id="RepeatOnWeekly" style="display:none;">
                                        <div class="col-sm-6 col-md-6 col-sx-12" id="dvT_Schedule">

                                            <label class="col-sm-5 col-md-5 col-xs-12">
                                                Recurrence Days
                                            </label>
                                            <div>
                                                @Html.DropDownList("SelectedT_RecurrenceDays_T_RepeatOn", (MultiSelectList)ViewBag.SelectedT_RecurrenceDays_T_RepeatOn, new { @multiple = "multiple", @HostingName = "T_RecurrenceDays", @dataurl = Url.Action("GetAllMultiSelectValue", "T_RecurrenceDays", null) })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken();
                            var busineesrule1 = User.businessrules.Where(p => p.EntityName == "T_Schedule").ToList();
                            <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
    if (EditPermission)
    {
        <input type="submit" name="command" value="Save" class="btn btn-primary btn-sm" onclick="removecurrencycomma(); QuickEditFromGrid(event,true,'T_Schedule','@ViewData["AssociatedType"]',false,'@busineesrule1',@busineesrule1.Count);" />
        <input type="hidden" name="hdncommand" value="" />
    }
}
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/Common3/chosen.jquery.js" type="text/javascript"></script>
<script type="text/javascript">
    $(document).ready(function () {
        ChangeScheduleType();              
    });
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
<script>
    $("input[type='submit']").click(function () {
        var $this = $(this);
        SetCalendarStartDate('T_StartDateTime', 'T_StartTime')
       // SetCalendarStartDate('T_StartDateTime', 'T_StartTime')
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
</script>
@{
    var busineesrule = User.businessrules.Where(p => p.EntityName == "T_Schedule").ToList();
    if ((busineesrule != null && busineesrule.Count > 0))
    {
        <script>
            $(document).ready(function () {
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetLockBusinessRules", "T_Schedule")",
                    data: $("form").serialize(),
                    success: function (data) {
                        if (data.length > 0) {
                            $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                            document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetReadOnlyProperties", "T_Schedule")",
                    data: $("form").closest(this).serialize(),
                    success: function (data) {
                        for (var key in data) {
                            $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                            $("input[type='radio'][name='" + key + "']").attr('disabled', 'disabled').attr('readonly', 'readonly');
                            $('form').append('<input type="hidden" name="' + key + '" id="' + key + '" value="' + $('#' + key).val() + '" />');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            });
        </script>
        <script>
            $("form").submit(function () {
                var flag = true;
            });
        </script>
    }
    else
    {
    }
}
