@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Schedule>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
    var BackUrl = Request.Url;
    if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
    {
        BackUrl = Request.UrlReferrer;
    }
}
<div id="T_Schedule">
    <style>
        .table-responsive > .fixed-column {
            position: absolute;
            display: block;
            width: auto;
            border: 0px solid transparent;
            border-top: 1px solid #c3ddec;
        }

        .fixed-column th {
            background: #fff;
        }

        .fixed-column td {
            background: #fff;
        }
    </style>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".pagination a").click(function (e) {
                //PaginationClick(e,'T_Schedule')
                PaginationClick(e, 'T_Schedule', '@User.JavaScriptEncodedName')
            })
            if ("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH") {
                $("#fsearchT_Schedule").addClass('in');
                if ('@ViewData["HostingEntity"]'.length > 0) {
                    $("#" + "@ViewData["HostingEntity"]" + "_T_Schedule").hide();
                }
            }
            $("#SearchStringT_Schedule").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $("#T_ScheduleSearch").bind("click", (function () {
                    }));
                    $('#T_ScheduleSearch').trigger("click");
                    return false;
                }
            })
            $("#btnShowHideT_Schedule").mouseup(function () {
                if (document.getElementById('ColumnShowHideT_Schedule').className == 'collapse') {
                    $('#lblT_Schedule').css('display', 'none');
                }
            })
        });
    </script>
    @functions {
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = ViewBag.CurrentSort,
                    isAsc = ViewBag.IsAsc,
                    currentFilter = ViewBag.CurrentFilter,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    HostingEntityID = ViewData["HostingEntityID"],
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),

                    t_associatedscheduletype = Request.QueryString["t_associatedscheduletype"],
                    t_associatedrecurringscheduledetailstype = Request.QueryString["t_associatedrecurringscheduledetailstype"],
                    t_recurringrepeatfrequency = Request.QueryString["t_recurringrepeatfrequency"],
                    t_repeatby = Request.QueryString["t_repeatby"],
                    t_recurringtaskendtype = Request.QueryString["t_recurringtaskendtype"],
                    T_StartDateTimeFrom = Request.QueryString["T_StartDateTimeFrom"],
                    T_StartDateTimeTo = Request.QueryString["T_StartDateTimeTo"],
                    T_EndDateFrom = Request.QueryString["T_EndDateFrom"],
                    T_EndDateTo = Request.QueryString["T_EndDateTo"],
                    T_OccurrenceLimitCountFrom = Request.QueryString["T_OccurrenceLimitCountFrom"],
                    T_OccurrenceLimitCountTo = Request.QueryString["T_OccurrenceLimitCountTo"],
                    search = Request.QueryString["search"],
                    viewtype = ViewBag.TemplatesName,
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                    page = ViewBag.Pages,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    t_associatedscheduletype = Request.QueryString["t_associatedscheduletype"],
                    t_associatedrecurringscheduledetailstype = Request.QueryString["t_associatedrecurringscheduledetailstype"],
                    t_recurringrepeatfrequency = Request.QueryString["t_recurringrepeatfrequency"],
                    t_repeatby = Request.QueryString["t_repeatby"],
                    t_recurringtaskendtype = Request.QueryString["t_recurringtaskendtype"],
                    T_StartDateTimeFrom = Request.QueryString["T_StartDateTimeFrom"],
                    T_StartDateTimeTo = Request.QueryString["T_StartDateTimeTo"],
                    T_EndDateFrom = Request.QueryString["T_EndDateFrom"],
                    T_EndDateTo = Request.QueryString["T_EndDateTo"],
                    T_OccurrenceLimitCountFrom = Request.QueryString["T_OccurrenceLimitCountFrom"],
                    T_OccurrenceLimitCountTo = Request.QueryString["T_OccurrenceLimitCountTo"],
                    search = Request.QueryString["search"],
                    viewtype = ViewBag.TemplatesName,

                };
            }
        }
    }
    <div class="row">
        <div class="col-md-12 col-sm-12 col-sx-12">
            <div class="panel panel-default">
                <div class="panel-heading clearfix" style="margin:0px; padding:2px;">
                    <div class="btn-group" id='@ViewData["HostingEntity"]_T_Schedule'>
                        @if (User.CanAdd("T_Schedule"))
                        {

                            <button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Add" style="padding:3px 5px;display:none;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Schedule','dvPopup','" + Url.Action("CreateQuick", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
                                <span class="fam-add"></span>
                            </button>
                            <button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:4px 5px;display:none;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');")>
                                <span class="fam-world-add"></span> Add
                            </button>

                            <button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Add Wizard" data-placement="top" style="padding:4px 5px;display:none;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("CreateWizard", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
                                <span class="fam-chart-organisation-add"></span>
                            </button>
                        }
                        @if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
                        {
                            <button class="btn btn-default tip-top" data-placement="top" data-original-title="Associate Schedule with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" style="padding:3px 5px;display:none;" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Schedule','dvPopupBulkOperation','" + Url.Action("Index", "T_Schedule", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
                                <span class="fam-chart-organisation"></span>
                            </button>
                        }
                    </div>
                    <div class="btn-group">
                        @if (User.CanAdd("T_Schedule"))
                        {
                            if (ViewData["HostingEntity"] == null)
                            {
                                <button type="button" class="btn btn-default btn-default tip-top" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;display:none;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_Schedule") + "');")>
                                    <span class="fam-page-excel"></span>
                                </button>
                            }
                        }
                        <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_Schedule",getSortHtmlAttributes(null, false, null, true), null) + "');")>
                            <span class="fam-page-white-put"></span>
                        </div>
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-default tip-top" data-placement="top" data-original-title="Show Graph" style="padding:3px 5px;display:none;" data-toggle="modal" data-target="#ShowGraphT_Schedule" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_Schedule');")>
                            <span class="fam-chart-bar"></span>
                        </button>
                        <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideT_Schedule" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;display:none;" onclick=@Html.Raw("showhideColumns(event,'T_Schedule');")>
                            <span class="fam-table-row-delete"></span>
                        </button>
                        @if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
                        {
                            <div class="btn-group">
                                <a class="btn btn-default btn-default dropdown-toggle tip-top" data-original-title="Filter-Groupby" style="padding:3px 5px;" data-toggle="dropdown" href="#">
                                    <span class="glyphicon glyphicon-filter"></span>
                                </a>
                                <ul class="dropdown-menu" role="menu">
                                    <li>
                                        <a id="fltT_Scheduletype" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Scheduletype');EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_Scheduletype") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Scheduletype", AssociatedType = "T_AssociatedScheduleType", ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Schedule Type</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltT_RecurringScheduleDetailstype" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_RecurringScheduleDetailstype');EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_RecurringScheduleDetailstype") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_RecurringScheduleDetailstype", AssociatedType = "T_AssociatedRecurringScheduleDetailsType", ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Repeat Type</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltT_RecurringFrequency" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_RecurringFrequency');EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_RecurringFrequency") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_RecurringFrequency", AssociatedType = "T_RecurringRepeatFrequency", ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Repeat Every</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltT_MonthlyRepeatType" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_MonthlyRepeatType');EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_MonthlyRepeatType") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_MonthlyRepeatType", AssociatedType = "T_RepeatBy", ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Repeat By</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a id="fltT_RecurringEndType" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_RecurringEndType');EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_RecurringEndType") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_RecurringEndType", AssociatedType = "T_RecurringTaskEndType", ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
                                            <span>Ends</span>
                                        </a>
                                    </li>
                                    <li><span class="label label-primary pull-left filterLabel" style="margin-left:20px;">@Html.ActionLink("Clear", "Index", new { viewtype = Convert.ToString(ViewBag.TemplatesName) }, new { onclick = "ClearFilterCookies();" })</span></li>
                                </ul>
                            </div>
                        }
                    </div>


                    <div class="btn-group">
                        <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Templates" style="padding:3px 5px;display:none;" data-toggle="dropdown">
                            <span class="fa fa fa-table"></span>
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px;display:none;">
                            <li>
                                <a data-placement="top" style="cursor:pointer;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Schedule','" + Url.Action("Index", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Schedule','" + Url.Action("Index", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialList" }) + "')")">
                                    <span class="fa fa-list"></span> List
                                </a>
                            </li>
                        </ul>
                    </div>


                    <div class="pull-right" style="width:250px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_Schedule", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                                <a id="T_ScheduleSearch" onclick="SearchClick(event, 'T_Schedule', '@Html.Raw(Url.Action("Index", "T_Schedule", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
                                @if (ViewData["HostingEntity"] == null)
                                {
                                    <a href="@(Url.Action("SetFSearch", "T_Schedule")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-page-find"></span></a>
                                }
                                <button id="T_ScheduleCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Schedule','@Html.Raw(Url.Action("Index", "T_Schedule", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="T_ScheduleSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Schedule','@Html.Raw(Url.Action("Index", "T_Schedule", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-body" style="margin:0px; padding:8px;">
                    @if (ViewData["HostingEntity"] == null)
                    {
                        if (ViewBag.SearchResult != "")
                        {
                            <div id="fsearchT_Schedule" class="collapse MessageFSearch">
                                @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
                                <a href="@Url.Action("Index", "T_Schedule",new{viewtype = Convert.ToString(ViewBag.TemplatesName)})" style="margin-left:5px;float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
                                <a href="@(Url.Action("SetFSearch", "T_Schedule")+Request.Url.Query)" style="float:right"><span class="glyphicon glyphicon-edit"></span> Modify</a>
                            </div>
                        }
                    }
                    @Html.Partial("~/Views/T_Schedule/ShowHideColumns.cshtml")
                    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
                        <table class="table table-striped table-bordered table-hover table-condensed">
                            <thead>
                                <tr>
                                    <th class="col0" style="width:20px;">
                                        <input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
                                        @Html.Hidden("SelectedItems")
                                    </th>
                                    <th class="col1" style="width:70px;">Actions</th>
                                    @if (User.CanView("T_Schedule", "T_Name"))
                                    {
                                        <th class="col2">
                                            @Html.ActionLink("Name", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_Name", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Name")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Name")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_Description"))
                                    {
                                        <th class="col3">
                                            @Html.ActionLink("Description", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_Description", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Description")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Description")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_AssociatedScheduleTypeID"))
                                    {
                                        <th class="col4" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Scheduletype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedScheduleType" ? "hidden" : "")>
                                            @Html.ActionLink("Schedule Type", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_AssociatedScheduleTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AssociatedScheduleTypeID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AssociatedScheduleTypeID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_StartDateTime"))
                                    {
                                        <th class="col5">
                                            @Html.ActionLink("Start Date Time", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_StartDateTime", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_StartDateTime")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_StartDateTime")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_AssociatedRecurringScheduleDetailsTypeID"))
                                    {
                                        <th class="col6" @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringScheduleDetailstype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedRecurringScheduleDetailsType" ? "hidden" : "")>
                                            @Html.ActionLink("Repeat Type", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_AssociatedRecurringScheduleDetailsTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AssociatedRecurringScheduleDetailsTypeID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AssociatedRecurringScheduleDetailsTypeID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_RecurringRepeatFrequencyID"))
                                    {
                                        <th class="col7" @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringFrequency" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringRepeatFrequency" ? "hidden" : "")>
                                            @Html.ActionLink("Repeat Every", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_RecurringRepeatFrequencyID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_RecurringRepeatFrequencyID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_RecurringRepeatFrequencyID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_RepeatByID"))
                                    {
                                        <th class="col8" @(Convert.ToString(ViewData["HostingEntity"]) == "T_MonthlyRepeatType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RepeatBy" ? "hidden" : "")>
                                            @Html.ActionLink("Repeat By", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_RepeatByID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_RepeatByID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_RepeatByID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_RecurringTaskEndTypeID"))
                                    {
                                        <th class="col9" @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringEndType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringTaskEndType" ? "hidden" : "")>
                                            @Html.ActionLink("Ends", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_RecurringTaskEndTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_RecurringTaskEndTypeID")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_RecurringTaskEndTypeID")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_EndDate"))
                                    {
                                        <th class="col10">
                                            @Html.ActionLink("End Date", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_EndDate", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EndDate")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EndDate")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_OccurrenceLimitCount"))
                                    {
                                        <th class="col11">
                                            @Html.ActionLink("Occurrence Limit Count", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_OccurrenceLimitCount", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_OccurrenceLimitCount")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_OccurrenceLimitCount")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("T_Schedule", "T_Summary"))
                                    {
                                        <th class="col12">
                                            @Html.ActionLink("Summary", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_Summary", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Summary")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Summary")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    <th class="col13">
                                        Recurrence Days
                                    </th>
                                </tr>
                                @foreach (var item in Model)
                                {
                                    <tr ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "T_Schedule", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
                                        <td>
                                            <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
                                        </td>
                                        <td>
                                            <div style="width:60px; margin-top:-2px;">
                                                <div class="btn-group" style="position:absolute;">
                                                    <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                        Action
                                                        <span class="caret">    </span>
                                                    </button>
                                                    <ul class="dropdown-menu pull-left">
                                                        <li>
                                                            <a href="@Url.Action("Details", "T_Schedule", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                                                        </li>
                                                        @if (User.CanDeleteItem("T_Schedule", item, User))
                                                        {
                                                            <li class="divider" style="clear:both"></li>
                                                            <li>
                                                                <a href="@Url.Action("Delete", "T_Schedule", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="glyphicon glyphicon-remove-sign" style="color: #E7574B;"></i> Delete</a>
                                                            </li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                        @if (User.CanView("T_Schedule", "T_Name"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.T_Name)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_Description"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.T_Description)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_AssociatedScheduleTypeID"))
                                        {


                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "T_Scheduletype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedScheduleType" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.t_associatedscheduletype.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_StartDateTime"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.T_StartDateTime)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_AssociatedRecurringScheduleDetailsTypeID"))
                                        {


                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringScheduleDetailstype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedRecurringScheduleDetailsType" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.t_associatedrecurringscheduledetailstype.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_RecurringRepeatFrequencyID"))
                                        {


                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringFrequency" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringRepeatFrequency" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.t_recurringrepeatfrequency.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_RepeatByID"))
                                        {


                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "T_MonthlyRepeatType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RepeatBy" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.t_repeatby.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_RecurringTaskEndTypeID"))
                                        {


                                            <td @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringEndType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringTaskEndType" ? "hidden" : "")>
                                                @Html.DisplayFor(modelItem => item.t_recurringtaskendtype.DisplayValue)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_EndDate"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.T_EndDate)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_OccurrenceLimitCount"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.T_OccurrenceLimitCount)
                                            </td>
                                        }
                                        @if (User.CanView("T_Schedule", "T_Summary"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.T_Summary)
                                            </td>
                                        }
                                        <td>
                                            @foreach (var chkitem in item.T_RecurrenceDays_T_RepeatOn)
                                            {
                                                if (item.SelectedT_RecurrenceDays_T_RepeatOn != null && (item.SelectedT_RecurrenceDays_T_RepeatOn.Contains(chkitem.Id)))
                                                {
                                                    <input type="checkbox" disabled name="SelectedT_RecurrenceDays_T_RepeatOn" value="@chkitem.Id" checked /> @chkitem.DisplayValue
                                                    <br />
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                        </table>
                    </div>
                    <ul id="Mob_List" class="list-group">
                        @foreach (var item in Model)
                        {
                            <li class="list-group-item">
                                @if (User.CanView("T_Schedule", "T_Name"))
                                {
                                    <p>
                                        <span class="text-primary"> Name </span> : <span>
                                            @Html.DisplayFor(modelItem => item.T_Name)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_Description"))
                                {
                                    <p>
                                        <span class="text-primary"> Description </span> : <span>
                                            @Html.DisplayFor(modelItem => item.T_Description)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_AssociatedScheduleTypeID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Scheduletype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedScheduleType" ? "hidden" : "")>
                                        <span class="text-primary"> Associated  Schedule Type </span> : <span>
                                            @Html.DisplayFor(modelItem => item.t_associatedscheduletype.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_StartDateTime"))
                                {
                                    <p>
                                        <span class="text-primary"> Start Date Time </span> : <span>
                                            @Html.DisplayFor(modelItem => item.T_StartDateTime)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_AssociatedRecurringScheduleDetailsTypeID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringScheduleDetailstype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedRecurringScheduleDetailsType" ? "hidden" : "")>
                                        <span class="text-primary"> Associated  RecurringScheduleDetails Type </span> : <span>
                                            @Html.DisplayFor(modelItem => item.t_associatedrecurringscheduledetailstype.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_RecurringRepeatFrequencyID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringFrequency" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringRepeatFrequency" ? "hidden" : "")>
                                        <span class="text-primary"> Recurring Repeat Frequency </span> : <span>
                                            @Html.DisplayFor(modelItem => item.t_recurringrepeatfrequency.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_RepeatByID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "T_MonthlyRepeatType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RepeatBy" ? "hidden" : "")>
                                        <span class="text-primary"> Repeat By </span> : <span>
                                            @Html.DisplayFor(modelItem => item.t_repeatby.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_RecurringTaskEndTypeID"))
                                {
                                    <p @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringEndType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringTaskEndType" ? "hidden" : "")>
                                        <span class="text-primary"> Recurring Task End Type </span> : <span>
                                            @Html.DisplayFor(modelItem => item.t_recurringtaskendtype.DisplayValue)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_EndDate"))
                                {
                                    <p>
                                        <span class="text-primary"> End Date </span> : <span>
                                            @Html.DisplayFor(modelItem => item.T_EndDate)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_OccurrenceLimitCount"))
                                {
                                    <p>
                                        <span class="text-primary"> Occurrence Limit Count </span> : <span>
                                            @Html.DisplayFor(modelItem => item.T_OccurrenceLimitCount)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("T_Schedule", "T_Summary"))
                                {
                                    <p>
                                        <span class="text-primary"> Summary </span> : <span>
                                            @Html.DisplayFor(modelItem => item.T_Summary)
                                        </span>
                                    </p>
                                }
                                <span class="label label-primary text-linkwhite">
                                    @Html.ActionLink("View", "Details", "T_Schedule", new { id = item.Id }, null)
                                </span>
                                <span class="label label-warning text-linkwhite">
                                    @if (User.CanEditItem("T_Schedule", item, User))
                                    {
                                        @Html.ActionLink("Edit", "Edit", "T_Schedule", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                    }
                                </span>
                                <span class="label label-danger text-linkwhite">
                                    @if (User.CanDeleteItem("T_Schedule", item, User))
                                    {
                                        @Html.ActionLink("Delete", "Delete", "T_Schedule", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                    }
                                </span>
                            </li>
                        }
                    </ul>
                    @if (Model.Count > 0)
                    {
                        <div id="pagination">
                            @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Schedule", getSortHtmlAttributes(null, true, page, false)))
                            <div class="fixPageSize">
                                Page Size :
                                @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelistT_Schedule",
                                @onchange = @Html.Raw("pagesizelistChange(event,'T_Schedule','"
                              + @User.JavaScriptEncodedName + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Schedule",
                             getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                             null, false), null))
                            })
                                <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="ShowGraphT_Schedule" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_ScheduleLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:80%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphT_ScheduleLabel">Dashboard Schedule</h4>
                </div>
                <div class="modal-body">
                    <div id="dvShowGraphT_Schedule" data-url="@Url.Action("ShowGraph", "T_Schedule")">
                    </div>
                    <div style="clear:both"></div>
                </div>

            </div>
        </div>
    </div>
</div>
