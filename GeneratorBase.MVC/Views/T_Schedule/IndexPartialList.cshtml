@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Schedule>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	 if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	}
<div id="T_Schedule">
<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_Schedule')
			PaginationClick(e, 'T_Schedule','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_Schedule").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_T_Schedule").hide();
	        }
        }
	    $("#SearchStringT_Schedule").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_ScheduleSearch").bind("click", (function () {
                        }));
                $('#T_ScheduleSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_Schedule").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_Schedule').className == 'collapse') {
				 $('#lblT_Schedule').css('display', 'none');
            }
        })
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
 t_associatedscheduletype = Request.QueryString["t_associatedscheduletype"],
 t_associatedrecurringscheduledetailstype = Request.QueryString["t_associatedrecurringscheduledetailstype"],
 t_recurringrepeatfrequency = Request.QueryString["t_recurringrepeatfrequency"],
 t_repeatby = Request.QueryString["t_repeatby"],
 t_recurringtaskendtype = Request.QueryString["t_recurringtaskendtype"],
  T_StartDateTimeFrom = Request.QueryString["T_StartDateTimeFrom"],
  T_StartDateTimeTo = Request.QueryString["T_StartDateTimeTo"],
  T_EndDateFrom = Request.QueryString["T_EndDateFrom"],
  T_EndDateTo = Request.QueryString["T_EndDateTo"],
  T_OccurrenceLimitCountFrom = Request.QueryString["T_OccurrenceLimitCountFrom"],
  T_OccurrenceLimitCountTo = Request.QueryString["T_OccurrenceLimitCountTo"],
				search=Request.QueryString["search"],
				viewtype = ViewBag.TemplatesName,
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_associatedscheduletype = Request.QueryString["t_associatedscheduletype"],
 t_associatedrecurringscheduledetailstype = Request.QueryString["t_associatedrecurringscheduledetailstype"],
 t_recurringrepeatfrequency = Request.QueryString["t_recurringrepeatfrequency"],
 t_repeatby = Request.QueryString["t_repeatby"],
 t_recurringtaskendtype = Request.QueryString["t_recurringtaskendtype"],
  T_StartDateTimeFrom = Request.QueryString["T_StartDateTimeFrom"],
  T_StartDateTimeTo = Request.QueryString["T_StartDateTimeTo"],
  T_EndDateFrom = Request.QueryString["T_EndDateFrom"],
  T_EndDateTo = Request.QueryString["T_EndDateTo"],
  T_OccurrenceLimitCountFrom = Request.QueryString["T_OccurrenceLimitCountFrom"],
  T_OccurrenceLimitCountTo = Request.QueryString["T_OccurrenceLimitCountTo"],
		search=Request.QueryString["search"],
		viewtype = ViewBag.TemplatesName,
            };
        }
    }
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
        <div class="panel panel-default">
            <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_Schedule'>

				  @if ( User.CanAdd("T_Schedule"))
				  {
						
					<button class="btn btn-default tip-top" data-placement="top" data-original-title="Quick Add" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Schedule','dvPopup','" + Url.Action("CreateQuick", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = @Convert.ToString(ViewBag.TemplatesName) }) + "')")">
						<span class="fam-add"></span>
                    </button>
					<button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = @Convert.ToString(ViewBag.TemplatesName) }, null) + "');")>
						<span class="fam-world-add"></span> Add
					</button>
	
					<button class="btn btn-xs  btn-default tip-top" type="button" data-original-title="Add Wizard" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("CreateWizard", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
						<span class="fam-chart-organisation-add"></span>
					</button>		
				}
			@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<button class="btn btn-default tip-top" data-placement="top" data-original-title="Associate Schedule with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" style="padding:3px 5px;" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Schedule','dvPopupBulkOperation','" + Url.Action("Index", "T_Schedule", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
					<span class="fam-chart-organisation"></span>
				</button>
			}
                </div>
				<div class="btn-group">
			@if ( User.CanAdd("T_Schedule"))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <button type="button" class="btn btn-default btn-default tip-top" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_Schedule") + "');")>
                        <span class="fam-page-excel"></span>               
                 </button>
				}
			}
				 <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_Schedule",getSortHtmlAttributes(null, false, null, true), null) + "');")>
				    <span class="fam-page-white-put"></span>
                </div>
		 </div>
		<div class="btn-group">
                            <button class="btn btn-default tip-top" data-placement="top" data-original-title="Show Graph" style="padding:3px 5px;" data-toggle="modal" data-target="#ShowGraphT_Schedule" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_Schedule');")>
                                <span class="fam-chart-bar"></span>
                            </button>
             <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideT_Schedule" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("showhideColumns(event,'T_Schedule');")>
                        <span class="fam-table-row-delete"></span>
                    </button>
	@if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
	{
		<div class="btn-group">
		<a class="btn btn-default btn-default dropdown-toggle tip-top" data-original-title="Filter-Groupby" style="padding:3px 5px;" data-toggle="dropdown" href="#">
		<span class="glyphicon glyphicon-filter"></span>
		</a>
		<ul class="dropdown-menu" role="menu">
            <li>
                <a id="fltT_Scheduletype" data-placement="top" onclick=@Html.Raw("EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_Scheduletype") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Scheduletype", AssociatedType = "T_AssociatedScheduleType", ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) })) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Schedule Type</span>
                </a>
            </li>
            <li>
                <a id="fltT_RecurringScheduleDetailstype" data-placement="top" onclick=@Html.Raw("EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_RecurringScheduleDetailstype") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_RecurringScheduleDetailstype", AssociatedType = "T_AssociatedRecurringScheduleDetailsType", ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) })) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Repeat Type</span>
                </a>
            </li>
            <li>
                <a id="fltT_RecurringFrequency" data-placement="top" onclick=@Html.Raw("EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_RecurringFrequency") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_RecurringFrequency", AssociatedType = "T_RecurringRepeatFrequency", ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) })) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Repeat Every</span>
                </a>
            </li>
            <li>
                <a id="fltT_MonthlyRepeatType" data-placement="top" onclick=@Html.Raw("EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_MonthlyRepeatType") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_MonthlyRepeatType", AssociatedType = "T_RepeatBy", ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) })) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Repeat By</span>
                </a>
            </li>
            <li>
                <a id="fltT_RecurringEndType" data-placement="top" onclick=@Html.Raw("EntityFilter('T_Schedule','" + Url.Action("GetAllValueForFilter", "T_RecurringEndType") + "','" + Html.Raw(Url.Action("Index", "T_Schedule", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_RecurringEndType", AssociatedType = "T_RecurringTaskEndType", ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) })) + "','" + User.JavaScriptEncodedName + "');")>
                    <span>Ends</span>
                </a>
            </li>
       <li><span class="label label-primary pull-left filterLabel" style="margin-left:20px;">@Html.ActionLink("Clear", "Index",new{ viewtype = Convert.ToString(ViewBag.TemplatesName)})</span></li>
		</ul>
		</div>
	}
                </div>
 <div class="btn-group">
    <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Bulk Actions" style="padding:3px 5px;" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	<li>
	@if ( User.CanEdit("T_Schedule") && User.CanUseVerb("BulkUpdate", "T_Schedule", User))
	{
		<a data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Schedule','dvPopup','" + Url.Action("BulkUpdate", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">Update</a>
	}
	</li>
 <li>
	 @if ( User.CanDelete("T_Schedule") && User.CanUseVerb("BulkDelete", "T_Schedule", User))
     {
		<a style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_Schedule','Bulk Delete','@Url.Action("DeleteBulk", "T_Schedule")');">Delete</a>
	 } </li>
                        </ul>
                    </div>

					  <div class="btn-group">
                        <a class="btn btn-default dropdown-toggle tip-top" data-original-title="Templates" style="padding:3px 5px;" data-toggle="dropdown" >
                            <span class="fa fa-th-list"></span>
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px">
                            <li>
                                <a data-placement="top" style="cursor:pointer;" 
                                   onclick="@Html.Raw("LoadTabTemplate('T_Schedule','" + Url.Action("Index", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Schedule','" + Url.Action("Index", "T_Schedule", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartial" }) + "')")">
                                    <span class="fa fa-table"></span> Table
                                </a>
                            </li>
                        </ul>
                    </div>

				<div class="pull-right" style="width:250px;">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_Schedule", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_ScheduleSearch" onclick="SearchClick(event, 'T_Schedule', '@Html.Raw(Url.Action("Index", "T_Schedule", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
 @if (ViewData["HostingEntity"]==null)
	{ 
			 <a href="@(Url.Action("SetFSearch", "T_Schedule")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-page-find"></span></a>
	}
								<button id="T_ScheduleCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Schedule','@Html.Raw(Url.Action("Index", "T_Schedule", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-delete"></span>
                                </button>
                                <button id="T_ScheduleSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('T_Schedule','@Html.Raw(Url.Action("Index", "T_Schedule", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now, viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                    <span class="fam-arrow-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="panel-body" style="margin:0px; padding:8px;">
 @if (ViewData["HostingEntity"]==null)
	{ 
	if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_Schedule" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
						 <a href="@Url.Action("Index", "T_Schedule",new{ viewtype = Convert.ToString(ViewBag.TemplatesName)})" style="margin-left:5px;float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
						  <a href="@(Url.Action("SetFSearch", "T_Schedule")+Request.Url.Query)" style="float:right" ><span class="glyphicon glyphicon-edit"></span> Modify</a>
            </div>
	}
}
					@Html.Partial("~/Views/T_Schedule/ShowHideColumns.cshtml") 
                    @if (Model.Count > 0)
                    {
                        <div class="ViewMessage" style="margin-top: 0px;">
                            <label><input type="checkbox" value="" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);"> Select All</label>
                            @Html.Hidden("SelectedItems")
                        </div>
                    }
			
 @if (Model.Count > 0)
        {
foreach (var item in Model) 
{
<div  class="col-sm-12 GenappList">
  
   <div class='col-sm-11' style='margin:0px; margin-left:-10px; padding:0px; text-align:left'>
	 <h4>@item.DisplayValue</h4>
  			@if(User.CanView("T_Schedule","T_Name"))
			{
			
			 <div class="col-sm-2 overflow GenappListFix" title='Name'>
            <strong>@Html.ActionLink("Name :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_Name", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Name")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Name")
				{<i class="fa fa-sort-asc"></i>}</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.T_Name)'>
                                        @Html.DisplayFor(modelItem => item.T_Name)
                                        </div>
			}
						@if(User.CanView("T_Schedule","T_Description"))
			{
			
			 <div class="col-sm-2 overflow GenappListFix" title='Description'>
            <strong>@Html.ActionLink("Description :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_Description", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Description")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Description")
				{<i class="fa fa-sort-asc"></i>}</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.T_Description)'>
                                        @Html.DisplayFor(modelItem => item.T_Description)
                                        </div>
			}
							@if(User.CanView("T_Schedule","T_AssociatedScheduleTypeID"))
				{
				 <div class="col-sm-2 overflow GenappListFix" title='Associated  Schedule Type'  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Scheduletype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedScheduleType"?"hidden":"")>
                                            <strong>
                                               @Html.ActionLink("Associated  Schedule Type :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_AssociatedScheduleTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AssociatedScheduleTypeID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AssociatedScheduleTypeID")
				{<i class="fa fa-sort-asc"></i>}
                                            </strong>
                                        </div>
                                       

										<div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.t_associatedscheduletype.DisplayValue)' >
                    @Html.DisplayFor(modelItem => item.t_associatedscheduletype.DisplayValue)
                </div>
          
			}
			@if(User.CanView("T_Schedule","T_StartDateTime"))
			{
			
			 <div class="col-sm-2 overflow GenappListFix" title='Start Date Time'>
            <strong>@Html.ActionLink("Start Date Time :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_StartDateTime", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_StartDateTime")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_StartDateTime")
				{<i class="fa fa-sort-asc"></i>}</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.T_StartDateTime)'>
                                        @Html.DisplayFor(modelItem => item.T_StartDateTime)
                                        </div>
			}
							@if(User.CanView("T_Schedule","T_AssociatedRecurringScheduleDetailsTypeID"))
				{
				 <div class="col-sm-2 overflow GenappListFix" title='Associated  RecurringScheduleDetails Type'  @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringScheduleDetailstype" && Convert.ToString(ViewData["AssociatedType"]) == "T_AssociatedRecurringScheduleDetailsType"?"hidden":"")>
                                            <strong>
                                               @Html.ActionLink("Associated  RecurringScheduleDetails Type :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_AssociatedRecurringScheduleDetailsTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AssociatedRecurringScheduleDetailsTypeID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AssociatedRecurringScheduleDetailsTypeID")
				{<i class="fa fa-sort-asc"></i>}
                                            </strong>
                                        </div>
                                       

										<div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.t_associatedrecurringscheduledetailstype.DisplayValue)' >
                    @Html.DisplayFor(modelItem => item.t_associatedrecurringscheduledetailstype.DisplayValue)
                </div>
          
			}
				@if(User.CanView("T_Schedule","T_RecurringRepeatFrequencyID"))
				{
				 <div class="col-sm-2 overflow GenappListFix" title='Recurring Repeat Frequency'  @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringFrequency" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringRepeatFrequency"?"hidden":"")>
                                            <strong>
                                               @Html.ActionLink("Recurring Repeat Frequency :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_RecurringRepeatFrequencyID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_RecurringRepeatFrequencyID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_RecurringRepeatFrequencyID")
				{<i class="fa fa-sort-asc"></i>}
                                            </strong>
                                        </div>
                                       

										<div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.t_recurringrepeatfrequency.DisplayValue)' >
                    @Html.DisplayFor(modelItem => item.t_recurringrepeatfrequency.DisplayValue)
                </div>
          
			}
				@if(User.CanView("T_Schedule","T_RepeatByID"))
				{
				 <div class="col-sm-2 overflow GenappListFix" title='Repeat By'  @(Convert.ToString(ViewData["HostingEntity"]) == "T_MonthlyRepeatType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RepeatBy"?"hidden":"")>
                                            <strong>
                                               @Html.ActionLink("Repeat By :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_RepeatByID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_RepeatByID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_RepeatByID")
				{<i class="fa fa-sort-asc"></i>}
                                            </strong>
                                        </div>
                                       

										<div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.t_repeatby.DisplayValue)' >
                    @Html.DisplayFor(modelItem => item.t_repeatby.DisplayValue)
                </div>
          
			}
				@if(User.CanView("T_Schedule","T_RecurringTaskEndTypeID"))
				{
				 <div class="col-sm-2 overflow GenappListFix" title='Recurring Task End Type'  @(Convert.ToString(ViewData["HostingEntity"]) == "T_RecurringEndType" && Convert.ToString(ViewData["AssociatedType"]) == "T_RecurringTaskEndType"?"hidden":"")>
                                            <strong>
                                               @Html.ActionLink("Recurring Task End Type :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_RecurringTaskEndTypeID", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_RecurringTaskEndTypeID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_RecurringTaskEndTypeID")
				{<i class="fa fa-sort-asc"></i>}
                                            </strong>
                                        </div>
                                       

										<div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.t_recurringtaskendtype.DisplayValue)' >
                    @Html.DisplayFor(modelItem => item.t_recurringtaskendtype.DisplayValue)
                </div>
          
			}
			@if(User.CanView("T_Schedule","T_EndDate"))
			{
			
			 <div class="col-sm-2 overflow GenappListFix" title='End Date'>
            <strong>@Html.ActionLink("End Date :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_EndDate", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EndDate")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EndDate")
				{<i class="fa fa-sort-asc"></i>}</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.T_EndDate)'>
                                        @Html.DisplayFor(modelItem => item.T_EndDate)
                                        </div>
			}
						@if(User.CanView("T_Schedule","T_OccurrenceLimitCount"))
			{
			
			 <div class="col-sm-2 overflow GenappListFix" title='Occurrence Limit Count'>
            <strong>@Html.ActionLink("Occurrence Limit Count :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_OccurrenceLimitCount", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_OccurrenceLimitCount")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_OccurrenceLimitCount")
				{<i class="fa fa-sort-asc"></i>}</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.T_OccurrenceLimitCount)'>
                                        @Html.DisplayFor(modelItem => item.T_OccurrenceLimitCount)
                                        </div>
			}
						@if(User.CanView("T_Schedule","T_Summary"))
			{
			
			 <div class="col-sm-2 overflow GenappListFix" title='Summary'>
            <strong>@Html.ActionLink("Summary :", ActionNameUrl, "T_Schedule", getSortHtmlAttributes("T_Summary", false, null, false), new { @onclick = "SortLinkClick(event,'T_Schedule');", @Style = "text-decoration: none;color: inherit;" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Summary")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Summary")
				{<i class="fa fa-sort-asc"></i>}</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix" title='@Html.DisplayFor(modelItem => item.T_Summary)'>
                                        @Html.DisplayFor(modelItem => item.T_Summary)
                                        </div>
			}
			

 <div class="col-sm-2 overflow GenappListFix" title='T_RecurrenceDays_Repeat On'>
            <strong>T_RecurrenceDays_Repeat On :</strong>
                                        </div>
                                        <div class="col-sm-2 overflow GenappListFix">
                @foreach (var chkitem in item.T_RecurrenceDays_T_RepeatOn)
				{
					<input type="checkbox" disabled name="SelectedT_RecurrenceDays_T_RepeatOn" value="@chkitem.Id" @(item.SelectedT_RecurrenceDays_T_RepeatOn.Contains(chkitem.Id) ? "checked" : "") /> @chkitem.DisplayValue
					<br/>
				}
                                        </div>
			<table>
                <tr>
                    <td>
                        <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
                    </td>
                </tr>
            </table>
  </div>
    <div class="col-sm-1 GenappListFix">
                                    <div class="btn-group-vertical" >
									<div class="dropup" >
   <a data-toggle="dropdown" class="btn btn-default dropdown-toggle" style="display:block; text-align:left; border-bottom-left-radius:0px; border-bottom-right-radius:0px;">
	
    <span class="caret"></span> Action
 </a>
                        <ul class="dropdown-menu pull-left">
                            <li >
                                <a href="@Url.Action("Details", "T_Schedule", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)" style="display:block; margin:0px;"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                            </li>
                            @if (User.CanEditItem("T_Schedule", item, User))
                            {
                                <li >

                                    <a id='aBtnQuickEditT_Schedule_@item.Id' data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Schedule','dvPopup','" + Url.Action("EditQuick", "T_Schedule",
															new {
																				id = item.Id,
																				UrlReferrer = Request.Url,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")"><i class="fa fa-pencil"></i> Quick Edit</a>

                                </li>
                            }
                         
                           
				@if (User.CanEditItem("T_Schedule", item, User))
                {
				<li>
                        <a href="@Url.Action("Edit","T_Schedule", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    
                </li> 
				}
				@if (User.CanEditItem("T_Schedule", item, User))
				 {
				 <li >
							<a href="@Url.Action("EditWizard","T_Schedule", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-share"></i>  Wizard</a>
					</li>
				 }
			@if (User.CanDeleteItem("T_Schedule", item, User))
                 {
				<li>
                    <a href="@Url.Action("Delete", "T_Schedule", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="glyphicon glyphicon-remove-sign" style="color: #E7574B;"></i> Delete</a>
                </li>
				 }
                        </ul>
                    </div>
	
			
                        <a title="View" href="@Url.Action("Details", "T_Schedule",
                        new { id = item.Id, AssociatedType = ViewData["AssociatedType"],
                            HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
                            HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName)  },
                            null)"  class="btn btn-default" style="text-align: left">
                            <span class="glyphicon glyphicon-eye-open icon-listbut"></span> View
                           
                        </a>
@if (User.CanEditItem("T_Schedule", item, User))
                                                        {
                        <a title="Quick Edit"  class="btn btn-default" style="text-align: left" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Edit Schedule','dvPopup','" + Url.Action("EditQuick", "T_Schedule", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")" >
                            <span class="fa fa-pencil icon-listbut"></span> Quick Edit
                        </a>
}
@if (User.CanEditItem("T_Schedule", item, User))
                                                        {
                        <a title="Full Edit" href="@Url.Action("Edit","T_Schedule",
                        new { id = item.Id,  UrlReferrer = BackUrl,
                            AssociatedType=ViewData["AssociatedType"],
                            HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
                            HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },
                            null)"  class="btn btn-default" style="text-align: left">
                            <span class="glyphicon glyphicon-edit icon-listbut"></span> Edit
                            
                        </a>
}
 <a href="" class="btn btn-default" style="text-align:left;" ><span class="fa fa-chevron-circle-down"></span> more</a>
					</div>
</div>


  </div>
							  <div style="clear:both"></div>
						   //model loop end    
                            }
					}
					else
								{
								  <div class="ViewMessage"> <i class="fa fa-info-circle"></i> No Record Available!</div>
					}
                      
               
  			   @if (Model.Count > 0)
                {
                    <div id="pagination">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Schedule", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_Schedule",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_Schedule','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Schedule",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                        </div>
                    </div>
                }
				</div>
            </div>
        </div>
    
    <div class="modal fade" id="ShowGraphT_Schedule" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_ScheduleLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:80%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="ShowGraphT_ScheduleLabel">Dashboard Schedule</h4>
                </div>
				 <div  class="modal-body" >
						<div id="dvShowGraphT_Schedule" data-url="@Url.Action("ShowGraph", "T_Schedule")">
						</div>
						<div style="clear:both"></div>
                </div>
                
            </div>
        </div>
    </div>
</div>
<script>

    $(document).ready(function () {

        loadGallery(true, 'a.thumbnail');

        //This function disables buttons when needed
        function disableButtons(counter_max, counter_current) {
            $('#show-previous-image, #show-next-image').show();
            if (counter_max == counter_current) {
                $('#show-next-image').hide();
            } else if (counter_current == 1) {
                $('#show-previous-image').hide();
            }
        }



        function loadGallery(setIDs, setClickAttr) {
            var current_image,
                selector,
                counter = 0;

            $('#show-next-image, #show-previous-image').click(function () {
                if ($(this).attr('id') == 'show-previous-image') {
                    current_image--;
                } else {
                    current_image++;
                }

                selector = $('[data-image-id="' + current_image + '"]');
                updateGallery(selector);
            });

            function updateGallery(selector) {
                var $sel = selector;
                current_image = $sel.data('image-id');
                $('#image-gallery-caption').text($sel.data('caption'));
                $('#image-gallery-title').text($sel.data('title'));
                $('#image-gallery-image').attr('src', $sel.data('image'));
                disableButtons(counter, $sel.data('image-id'));
            }

            if (setIDs == true) {
                $('[data-image-id]').each(function () {
                    counter++;
                    $(this).attr('data-image-id', counter);
                });
            }
            $(setClickAttr).on('click', function () {
                updateGallery($(this));
            });
        }
    });

</script>

