@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_Comment>
@using PagedList.Mvc;
@{
	
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer;
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Comment");
}

<div id="T_Comment">

<style>
    .table-responsive > .fixed-column {
        position: absolute;
        display: block;
        width: auto;
        border: 0px solid transparent;
        border-top: 1px solid #c3ddec;
    }
    .fixed-column th {
        background: #fff;
    }
    .fixed-column td {
        background: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_Comment')
			PaginationClick(e, 'T_Comment','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_Comment").addClass('in');
			if('@ViewData["HostingEntity"]'.length>0)
	        {
                $("#" + "@ViewData["HostingEntity"]" + "_T_Comment").hide();
	        }
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'T_Comment');
        }
	    $("#SearchStringT_Comment").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_CommentSearch").bind("click", (function () {
                        }));
                $('#T_CommentSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_Comment").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_Comment').className == 'collapse') {
				 $('#lblT_Comment').css('display', 'none');
            }
        })
		if ($("#ErrmsgLockRecord").length > 0 && $("#ErrmsgLockRecord").text().length > 0) {
                    $(".pull-left.actionbar").hide();
		}
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
 t_employeecomments = Request.QueryString["t_employeecomments"],
 t_accommodationcomments = Request.QueryString["t_accommodationcomments"],
 t_drugalcoholtestcomments = Request.QueryString["t_drugalcoholtestcomments"],
 t_educationcomments = Request.QueryString["t_educationcomments"],
 t_injurycomments = Request.QueryString["t_injurycomments"],
 t_jobassignmentcomments = Request.QueryString["t_jobassignmentcomments"],
 t_leavecomments = Request.QueryString["t_leavecomments"],
 t_licensescomments = Request.QueryString["t_licensescomments"],
 t_salarycomments = Request.QueryString["t_salarycomments"],
 t_preemploymentcomments = Request.QueryString["t_preemploymentcomments"],
 t_servicerecordcomments = Request.QueryString["t_servicerecordcomments"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = ViewBag.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = ViewBag.GroupByColumn,
				 FilterCondition = ViewBag.FilterCondition,
				 inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
 t_employeecomments = Request.QueryString["t_employeecomments"],
 t_accommodationcomments = Request.QueryString["t_accommodationcomments"],
 t_drugalcoholtestcomments = Request.QueryString["t_drugalcoholtestcomments"],
 t_educationcomments = Request.QueryString["t_educationcomments"],
 t_injurycomments = Request.QueryString["t_injurycomments"],
 t_jobassignmentcomments = Request.QueryString["t_jobassignmentcomments"],
 t_leavecomments = Request.QueryString["t_leavecomments"],
 t_licensescomments = Request.QueryString["t_licensescomments"],
 t_salarycomments = Request.QueryString["t_salarycomments"],
 t_preemploymentcomments = Request.QueryString["t_preemploymentcomments"],
 t_servicerecordcomments = Request.QueryString["t_servicerecordcomments"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
		 inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria
            };
        }
    }
}
<div class="row">
   <div class="col-md-12 col-sm-12 col-sx-12">
      <div style="display:block; padding:0px 0px 5px 0px;">
	    
	   
	    @if (ViewData["IsdrivedTab"]==null)
                { 
            <div class="pull-left actionbar">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_Comment'>
				 
				  @if (User.CanAdd("T_Comment"))
				  {
						<a class="btn btn-sm" type="button" data-original-title="Full Add" data-placement="top" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_Comment", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');") alt="Full Add" title="Full Add">
						<i class="fa fa-plus-circle" style="margin-right:3px"></i> Add
					</a>
					<a class="btn btn-sm" data-placement="top" id="addT_Comment" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Comment','dvPopup','" + Url.Action("CreateQuick", "T_Comment", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")" alt="Quick Add" title="Quick Add">
						<i class="fa fa-plus-circle" style="margin-right:3px"></i> Quick Add
                    </a>
			}
			
                </div>
				
		<div class="btn-group">

   	@if (ViewData["HostingEntity"] == null || Convert.ToBoolean(ViewData["IsFilter"]) == true)
	{
	if (User.CanView("T_Employee") || User.CanView("T_Accommodation") || User.CanView("T_DrugAlcoholTest") || User.CanView("T_Education") || User.CanView("T_EmployeeInjury") || User.CanView("T_JobAssignment") || User.CanView("T_LeaveProfile") || User.CanView("T_Licenses") || User.CanView("T_PayDetails") || User.CanView("T_BackgroundCheck") || User.CanView("T_ServiceRecord"))
	{ 
			<div class="btn-group">
		<a class="btn btn-sm dropdown-toggle" data-original-title="Filter-Groupby" data-toggle="dropdown" href="#" alt="Filter" title="Filter">
		<i class="fa fa-filter" style="margin-right:3px"></i> Filter
		</a>
		<ul class="dropdown-menu" role="menu">
			@if (User.CanView("T_Employee"))
			{
				<li>
					<a id="fltT_Employee" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Employee');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_Employee") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Employee", AssociatedType = "T_EmployeeComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Employee </span>
					</a>
				</li>
			}
			@if (User.CanView("T_Accommodation"))
			{
				<li>
					<a id="fltT_Accommodation" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Accommodation');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_Accommodation") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Accommodation", AssociatedType = "T_AccommodationComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Accommodation</span>
					</a>
				</li>
			}
			@if (User.CanView("T_DrugAlcoholTest"))
			{
				<li>
					<a id="fltT_DrugAlcoholTest" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_DrugAlcoholTest');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_DrugAlcoholTest") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_DrugAlcoholTest", AssociatedType = "T_DrugAlcoholTestComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Drug & Alcohol Test</span>
					</a>
				</li>
			}
			@if (User.CanView("T_Education"))
			{
				<li>
					<a id="fltT_Education" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Education');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_Education") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Education", AssociatedType = "T_EducationComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Education</span>
					</a>
				</li>
			}
			@if (User.CanView("T_EmployeeInjury"))
			{
				<li>
					<a id="fltT_EmployeeInjury" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_EmployeeInjury');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_EmployeeInjury") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_EmployeeInjury", AssociatedType = "T_InjuryComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Employee Injury</span>
					</a>
				</li>
			}
			@if (User.CanView("T_JobAssignment"))
			{
				<li>
					<a id="fltT_JobAssignment" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_JobAssignment');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_JobAssignment") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_JobAssignment", AssociatedType = "T_JobAssignmentComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Job Assignment</span>
					</a>
				</li>
			}
			@if (User.CanView("T_LeaveProfile"))
			{
				<li>
					<a id="fltT_LeaveProfile" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_LeaveProfile');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_LeaveProfile") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_LeaveProfile", AssociatedType = "T_LeaveComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Leave</span>
					</a>
				</li>
			}
			@if (User.CanView("T_Licenses"))
			{
				<li>
					<a id="fltT_Licenses" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_Licenses');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_Licenses") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_Licenses", AssociatedType = "T_LicensesComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Licenses</span>
					</a>
				</li>
			}
			@if (User.CanView("T_PayDetails"))
			{
				<li>
					<a id="fltT_PayDetails" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_PayDetails');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_PayDetails") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_PayDetails", AssociatedType = "T_SalaryComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Pay Details </span>
					</a>
				</li>
			}
			@if (User.CanView("T_BackgroundCheck"))
			{
				<li>
					<a id="fltT_BackgroundCheck" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_BackgroundCheck');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_BackgroundCheck") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_BackgroundCheck", AssociatedType = "T_PreemploymentComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Pre Employment Checks</span>
					</a>
				</li>
			}
			@if (User.CanView("T_ServiceRecord"))
			{
				<li>
					<a id="fltT_ServiceRecord" data-placement="top" onclick=@Html.Raw("SetCookieFlt('fltT_ServiceRecord');EntityFilter('T_Comment','" + Url.Action("GetAllValueForFilter", "T_ServiceRecord") + "','" + Html.Raw(Url.Action("Index", "T_Comment", new {FirstCall=true,FilterHostingEntityID = ViewData["HostingEntityID"], IsFilter = true, HostingEntity = "T_ServiceRecord", AssociatedType = "T_ServiceRecordComments", ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)})) + "','" + User.JavaScriptEncodedName + "');")>
						<span>Service Record</span>
					</a>
				</li>
			}
     <li>
@Html.ActionLink("Clear", "Index", new { viewtype = Convert.ToString(ViewBag.TemplatesName) }, new { onclick = "ClearFilterCookies();", @class = "label label-primary pull-left filterLabel", @Style = "margin-left:20px;color: white" })</li>
		</ul>
		</div>
		}
			} 
	
                </div>
@if ((User.CanEdit("T_Comment") && User.CanUseVerb("BulkUpdate", "T_Comment", User)) || (User.CanDelete("T_Comment") && User.CanUseVerb("BulkDelete", "T_Comment", User)))
{
 <div class="btn-group">
    <a class="btn btn-sm dropdown-toggle" data-original-title="Bulk Actions" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	
	@if ( User.CanEdit("T_Comment")&&  User.CanUseVerb("BulkUpdate","T_Comment",User))
	{
	<li>
		<a data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Comment','dvPopup','" + Url.Action("BulkUpdate", "T_Comment", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "','T_Comment')")">Update</a>
	</li>
	
	}
	
 
	 @if ( User.CanDelete("T_Comment") && User.CanUseVerb("BulkDelete","T_Comment",User))
     {
	 <li>
		<a style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_Comment','Bulk Delete','@Url.Action("DeleteBulk", "T_Comment")');">Delete</a>
	 </li>
	
	 }
                        </ul>
                    </div>
					}
					 <div class="btn-group">
                        <a class="btn btn-sm dropdown-toggle tip-top" data-original-title="View As" style="padding:3px 5px;" data-toggle="dropdown">
                            <span class="fa fa fa-table"></span> View As
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px">
                            <li>
                                <a data-placement="top" style="cursor:pointer;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Comment','" + Url.Action("Index", "T_Comment", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_Comment','" + Url.Action("Index", "T_Comment", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialList" }) + "')")">
                                    <span class="fa fa-list"></span> List
                                </a>
                            </li>
                        </ul>
                    </div>

<div class="btn-group">
                            <a class="btn btn-sm dropdown-toggle tip-top" data-toggle="dropdown" alt="Tools" title="Tools">
                                Tools
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu" role="menu" style="min-width:110px">
							 <li>

		@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<a id="showAssociateBtn"  data-placement="top" data-original-title="Associate Comment with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Comment','dvPopupBulkOperation','" + Url.Action("Index", "T_Comment", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
					<i class="fa fa-plus-circle" ></i> Add Association
				</a>
			<script>
				if($("#HostingEntityDisplayValue").attr('id')==undefined)
				$("#showAssociateBtn").hide();
			</script>
			}
                               
              
                                    
                                </li>
                                <li>
								
			@if ( User.CanAdd("T_Comment") && User.CanUseVerb("ImportExcel", "T_Comment", User))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <a  onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_Comment") + "');") alt="Import Excel" title="Import Excel">
                        <i class="fa fa-upload" style="margin-right:3px"></i>    Import Excel
                                         
                 </a>
				}
			}

                                  
                                </li>

                                <li>
	     		@if (User.CanView("T_Comment") && User.CanUseVerb("ExportExcel", "T_Comment", User))
                {
					<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_Comment",getSortHtmlAttributes(null, false, null, true), null) + "');") alt="Export Excel" title="Export Excel">
						<i class="fa fa-download" style="margin-right:3px"></i>  Export Excel
                    
					</a>
				}
                                   
                                </li>
	                              
                            </ul>
                        </div>

</div>					

				<div class="pull-right" style="width:300px; padding-top:4px; ">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_Comment", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_CommentSearch" onclick="SearchClick(event, 'T_Comment', '@Html.Raw(Url.Action("Index", "T_Comment", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn tip-top" style="padding:3px 5px; border:1px solid #ccc"  alt="Grid Search" title="Search"><span class="fa fa-search"></span></a>
								<a id="T_CommentCancel" type="button" class="btn collapse-data-btn tip-top" onclick="CancelSearch('T_Comment','@Html.Raw(Url.Action("Index", "T_Comment", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px; border:1px solid #ccc" alt="Clear Search" title="Clear Search">
                                    <span class="fa fa-minus-circle"></span>
                                </a>
                                <a id="T_CommentSearchCancel" type="button" class="btn collapse-data-btn tip-top" onclick="CancelSearch('T_Comment','@Html.Raw(Url.Action("Index", "T_Comment", new {IsFilter=ViewData["IsFilter"], itemsPerPage=Convert.ToInt32(ViewBag.PageSize),HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px; border:1px solid #ccc" alt="Refresh Grid" title="Refresh Grid">
                                    <span class="fa fa-refresh"></span>
                                </a>
                            </div>
                        </div>
                    </div>
            
}
			 <div style="clear:both"></div>
            
 @if (ViewData["HostingEntity"]==null)
	{ 
	if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_Comment" class="collapse MessageFSearch">
                        @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
						 <a href="@Url.Action("Index", "T_Comment",new{viewtype = Convert.ToString(ViewBag.TemplatesName)})" style="margin-left:5px;float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
						  <a href="@(Url.Action("SetFSearch", "T_Comment")+Request.Url.Query)" style="float:right" ><span class="glyphicon glyphicon-edit"></span> Modify</a>
            </div>
	}
}
	@Html.Partial("~/Views/T_Comment/ShowHideColumns.cshtml") 
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto; margin-top:3px">
        <table class="table table-striped table-bordered table-hover table-condensed">
            <thead>
                <tr>

	 <th class="col0" style="width:20px;" scope="col">
		<input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
        @Html.Hidden("SelectedItems")
	</th>

					<th  scope="col" class="col1" style="width:42px;" alt="Actions" title="Actions">Actions</th>
@if(User.CanView("T_Comment","T_WhoandWhen"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_WhoandWhen");
			<th scope="col" class="col2">
				@Html.ActionLink(SortPropertyName.DisplayName,ActionNameUrl,"T_Comment",getSortHtmlAttributes("T_WhoandWhen", false, null, false),new { @onclick = "SortLinkClick(event,'T_Comment');" })
				  @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_WhoandWhen")
                  {<i class="fa fa-sort-desc"></i>}
                  @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_WhoandWhen")
                  {<i class="fa fa-sort-asc"></i>}
			 </th>
	 }
@if(User.CanView("T_Comment","T_EmployeeCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EmployeeCommentsID");
			<th scope="col"  class="col3" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employee" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_EmployeeCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EmployeeCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EmployeeCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_Summary") )
{	
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_Summary");
			<th scope="col" class="col4">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_Summary", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Summary")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Summary")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_Comment","T_AccommodationCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_AccommodationCommentsID");
			<th scope="col"  class="col5" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Accommodation" && Convert.ToString(ViewData["AssociatedType"]) == "T_AccommodationComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_AccommodationCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AccommodationCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AccommodationCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_DrugAlcoholTestCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_DrugAlcoholTestCommentsID");
			<th scope="col"  class="col6" @(Convert.ToString(ViewData["HostingEntity"]) == "T_DrugAlcoholTest" && Convert.ToString(ViewData["AssociatedType"]) == "T_DrugAlcoholTestComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_DrugAlcoholTestCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_DrugAlcoholTestCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_DrugAlcoholTestCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_EducationCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_EducationCommentsID");
			<th scope="col"  class="col7" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Education" && Convert.ToString(ViewData["AssociatedType"]) == "T_EducationComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_EducationCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EducationCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EducationCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_InjuryCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_InjuryCommentsID");
			<th scope="col"  class="col8" @(Convert.ToString(ViewData["HostingEntity"]) == "T_EmployeeInjury" && Convert.ToString(ViewData["AssociatedType"]) == "T_InjuryComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_InjuryCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_InjuryCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_InjuryCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_JobAssignmentCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_JobAssignmentCommentsID");
			<th scope="col"  class="col9" @(Convert.ToString(ViewData["HostingEntity"]) == "T_JobAssignment" && Convert.ToString(ViewData["AssociatedType"]) == "T_JobAssignmentComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_JobAssignmentCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_JobAssignmentCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_JobAssignmentCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_LeaveCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_LeaveCommentsID");
			<th scope="col"  class="col10" @(Convert.ToString(ViewData["HostingEntity"]) == "T_LeaveProfile" && Convert.ToString(ViewData["AssociatedType"]) == "T_LeaveComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_LeaveCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_LeaveCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_LeaveCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_LicensesCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_LicensesCommentsID");
			<th scope="col"  class="col11" @(Convert.ToString(ViewData["HostingEntity"]) == "T_Licenses" && Convert.ToString(ViewData["AssociatedType"]) == "T_LicensesComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_LicensesCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_LicensesCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_LicensesCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_SalaryCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_SalaryCommentsID");
			<th scope="col"  class="col12" @(Convert.ToString(ViewData["HostingEntity"]) == "T_PayDetails" && Convert.ToString(ViewData["AssociatedType"]) == "T_SalaryComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_SalaryCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_SalaryCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_SalaryCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_PreemploymentCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_PreemploymentCommentsID");
			<th scope="col"  class="col13" @(Convert.ToString(ViewData["HostingEntity"]) == "T_BackgroundCheck" && Convert.ToString(ViewData["AssociatedType"]) == "T_PreemploymentComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_PreemploymentCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_PreemploymentCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_PreemploymentCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
@if(User.CanView("T_Comment","T_ServiceRecordCommentsID"))
{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_ServiceRecordCommentsID");
			<th scope="col"  class="col14" @(Convert.ToString(ViewData["HostingEntity"]) == "T_ServiceRecord" && Convert.ToString(ViewData["AssociatedType"]) == "T_ServiceRecordComments"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_Comment",getSortHtmlAttributes("T_ServiceRecordCommentsID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_Comment');" })
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_ServiceRecordCommentsID")
				{<i class="fa fa-sort-desc"></i>}
				@if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_ServiceRecordCommentsID")
				{<i class="fa fa-sort-asc"></i>}
			 </th>
}
   </tr>
</thead>
    
@{ bool isFirst = true; var oldKey = string.Empty; }
                                @foreach (var item in Model)
                                {
                                    if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || (string.IsNullOrEmpty(oldKey)))
                                        {
                                            isFirst = false;
											//var groupCnt = Model.Where(grp => grp.m_DisplayValue == groupKey).Count();
                                            string groupString = string.Empty;
                                            //if (groupCnt > 1)
                                            //{
                                              //  groupString = "(" + groupCnt + " Records)";
                                            //}
                                            //else
                                            //{
                                             //   groupString = "(" + groupCnt + " Record)";
                                            //}
                                            <tr>
                                                <td colspan="15" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                                            </tr>
                                        }
                                    }
      <tr scope="row" ondblclick="DoubleClickRow(@item.Id,'@Url.Action(User.CanEdit("T_Comment") ? "Edit" : "Details", "T_Comment", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
	
	 <td>
			 <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
	</td>
	
		   <td>
	   <div style="width:42px; margin-top:-2px;">
		<div class="btn-group" style="position:absolute;">

		@if (User.CanEdit("T_Comment"))
        {
				
            <a href="@Url.Action("Edit","T_Comment", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },null)" class="btn btn-xs dropdown-toggle btn-primary2" alt="Edit" title="Edit"> 
			<i class="fa fa-pencil"></i>  </a>
               
		}
		@if (!User.CanEdit("T_Comment"))
        {
            <a href="@Url.Action("Details", "T_Comment", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)" class="btn btn-xs dropdown-toggle btn-primary2" >
                <i class="glyphicon glyphicon-eye-open"></i>
            </a>
        }

                                                <a data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default" style="padding-left:6px; padding-right:6px" alt="More Options" title="More Options">
                                                <i class="fa fa-caret-down"></i>
                                            </a>
			<ul class="dropdown-menu pull-left">
			@if (!User.CanEdit("T_Comment"))
                    {
						<li>
                    <a href="@Url.Action("Details", "T_Comment", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)" alt="View" title="View"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                </li>
}
				@if (User.CanEdit("T_Comment"))
                {
				<li>
                        <a href="@Url.Action("Edit","T_Comment", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    
                </li>             
				}
			@if (User.CanDelete("T_Comment"))
                 {
				 <li class="divider" style="clear:both"></li>
				<li>
                    <a href="@Url.Action("Delete", "T_Comment", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="glyphicon glyphicon-remove-sign" style="color: #E7574B;"></i> Delete</a>
                </li>
				}
 <li class="divider" style="clear:both"></li>
 <li class="dropdown-submenu">
	<a tabindex="-1" href="#"><i class="fam-zoom small"></i> Search Matching</a>
    <ul class="dropdown-menu pull-left">
<li>
		<a href="@Url.Action("FindFSearch", "FileDocument", new {sourceEntity="T_Comment",id=item.Id}, null)">Document</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Licenses", new {sourceEntity="T_Comment",id=item.Id}, null)">Licenses</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_ServiceRecord", new {sourceEntity="T_Comment",id=item.Id}, null)">Service Record</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_DrugAlcoholTest", new {sourceEntity="T_Comment",id=item.Id}, null)">Drug & Alcohol Test</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_UnitX", new {sourceEntity="T_Comment",id=item.Id}, null)">UnitX</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_JobAssignment", new {sourceEntity="T_Comment",id=item.Id}, null)">Job Assignment</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_LeaveProfile", new {sourceEntity="T_Comment",id=item.Id}, null)">Leave</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_EmployeeInjury", new {sourceEntity="T_Comment",id=item.Id}, null)">Employee Injury</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_BackgroundCheck", new {sourceEntity="T_Comment",id=item.Id}, null)">Background Check</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Education", new {sourceEntity="T_Comment",id=item.Id}, null)">Education</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_Accommodation", new {sourceEntity="T_Comment",id=item.Id}, null)">Accommodation</a>
</li>
<li>
		<a href="@Url.Action("FindFSearch", "T_PayDetails", new {sourceEntity="T_Comment",id=item.Id}, null)">Pay Details </a>
</li>
</ul>
</li>
			</ul>
		</div>
		</div>
	</td>
	@if(User.CanView("T_Comment","T_WhoandWhen"))
{
			<td >
			   @item.T_WhoandWhen
			   @Html.DisplayFor(modelItem => item.T_WhoandWhenUser)
			</td>
}
@if(User.CanView("T_Comment","T_EmployeeCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employee" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeComments"?"hidden":"") >
            @Html.DisplayFor(modelItem => item.t_employeecomments.DisplayValue)
			        </td>
}
@if(User.CanView("T_Comment","T_Summary"))
{
		<td >
            @Html.DisplayFor(modelItem => item.T_Summary)
        </td>
}
@if(User.CanView("T_Comment","T_AccommodationCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Accommodation" && Convert.ToString(ViewData["AssociatedType"]) == "T_AccommodationComments"?"hidden":"")>
@if (item.t_accommodationcomments != null  && !string.IsNullOrEmpty(item.t_accommodationcomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_accommodationcomments.DisplayValue).ToString()), User.CanEdit("T_Accommodation") ? "Edit" : "Details", "T_Accommodation", new { Id = Html.DisplayFor(modelItem => item.t_accommodationcomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_DrugAlcoholTestCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_DrugAlcoholTest" && Convert.ToString(ViewData["AssociatedType"]) == "T_DrugAlcoholTestComments"?"hidden":"")>
@if (item.t_drugalcoholtestcomments != null  && !string.IsNullOrEmpty(item.t_drugalcoholtestcomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_drugalcoholtestcomments.DisplayValue).ToString()), User.CanEdit("T_DrugAlcoholTest") ? "Edit" : "Details", "T_DrugAlcoholTest", new { Id = Html.DisplayFor(modelItem => item.t_drugalcoholtestcomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_EducationCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Education" && Convert.ToString(ViewData["AssociatedType"]) == "T_EducationComments"?"hidden":"")>
@if (item.t_educationcomments != null  && !string.IsNullOrEmpty(item.t_educationcomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_educationcomments.DisplayValue).ToString()), User.CanEdit("T_Education") ? "Edit" : "Details", "T_Education", new { Id = Html.DisplayFor(modelItem => item.t_educationcomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_InjuryCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_EmployeeInjury" && Convert.ToString(ViewData["AssociatedType"]) == "T_InjuryComments"?"hidden":"")>
@if (item.t_injurycomments != null  && !string.IsNullOrEmpty(item.t_injurycomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_injurycomments.DisplayValue).ToString()), User.CanEdit("T_EmployeeInjury") ? "Edit" : "Details", "T_EmployeeInjury", new { Id = Html.DisplayFor(modelItem => item.t_injurycomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_JobAssignmentCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_JobAssignment" && Convert.ToString(ViewData["AssociatedType"]) == "T_JobAssignmentComments"?"hidden":"")>
@if (item.t_jobassignmentcomments != null  && !string.IsNullOrEmpty(item.t_jobassignmentcomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_jobassignmentcomments.DisplayValue).ToString()), User.CanEdit("T_JobAssignment") ? "Edit" : "Details", "T_JobAssignment", new { Id = Html.DisplayFor(modelItem => item.t_jobassignmentcomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_LeaveCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_LeaveProfile" && Convert.ToString(ViewData["AssociatedType"]) == "T_LeaveComments"?"hidden":"")>
@if (item.t_leavecomments != null  && !string.IsNullOrEmpty(item.t_leavecomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_leavecomments.DisplayValue).ToString()), User.CanEdit("T_LeaveProfile") ? "Edit" : "Details", "T_LeaveProfile", new { Id = Html.DisplayFor(modelItem => item.t_leavecomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_LicensesCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_Licenses" && Convert.ToString(ViewData["AssociatedType"]) == "T_LicensesComments"?"hidden":"")>
@if (item.t_licensescomments != null  && !string.IsNullOrEmpty(item.t_licensescomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_licensescomments.DisplayValue).ToString()), User.CanEdit("T_Licenses") ? "Edit" : "Details", "T_Licenses", new { Id = Html.DisplayFor(modelItem => item.t_licensescomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_SalaryCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_PayDetails" && Convert.ToString(ViewData["AssociatedType"]) == "T_SalaryComments"?"hidden":"")>
@if (item.t_salarycomments != null  && !string.IsNullOrEmpty(item.t_salarycomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_salarycomments.DisplayValue).ToString()), User.CanEdit("T_PayDetails") ? "Edit" : "Details", "T_PayDetails", new { Id = Html.DisplayFor(modelItem => item.t_salarycomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_PreemploymentCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_BackgroundCheck" && Convert.ToString(ViewData["AssociatedType"]) == "T_PreemploymentComments"?"hidden":"")>
@if (item.t_preemploymentcomments != null  && !string.IsNullOrEmpty(item.t_preemploymentcomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_preemploymentcomments.DisplayValue).ToString()), User.CanEdit("T_BackgroundCheck") ? "Edit" : "Details", "T_BackgroundCheck", new { Id = Html.DisplayFor(modelItem => item.t_preemploymentcomments.Id).ToString() },null)
}
        </td>
}
@if(User.CanView("T_Comment","T_ServiceRecordCommentsID"))
{
		
		
					<td  @(Convert.ToString(ViewData["HostingEntity"]) == "T_ServiceRecord" && Convert.ToString(ViewData["AssociatedType"]) == "T_ServiceRecordComments"?"hidden":"")>
@if (item.t_servicerecordcomments != null  && !string.IsNullOrEmpty(item.t_servicerecordcomments.DisplayValue))
{
		 @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.t_servicerecordcomments.DisplayValue).ToString()), User.CanEdit("T_ServiceRecord") ? "Edit" : "Details", "T_ServiceRecord", new { Id = Html.DisplayFor(modelItem => item.t_servicerecordcomments.Id).ToString() },null)
}
        </td>
}

                                </tr>
                            }
                    </table>
                </div>
				 <ul id="Mob_List" class="list-group">
                    @foreach (var item in Model)
                    {
                        <li class="list-group-item">
@if(User.CanView("T_Comment","T_WhoandWhen"))
{
		<p><span class="text-primary"> Who and When </span> : <span>
            @Html.DisplayFor(modelItem => item.T_WhoandWhen)
			@Html.DisplayFor(modelItem => item.T_WhoandWhenUser)
       </span> </p>		
	   }
@if(User.CanView("T_Comment","T_EmployeeCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Employee" && Convert.ToString(ViewData["AssociatedType"]) == "T_EmployeeComments"?"hidden":"")>
		<span class="text-primary"> Employee Comments </span> : <span>
		            @Html.DisplayFor(modelItem => item.t_employeecomments.DisplayValue)
         </span> </p>
		 }
@if(User.CanView("T_Comment","T_Summary"))
{
		<p><span class="text-primary"> Notes </span> : <span>
            @Html.DisplayFor(modelItem => item.T_Summary)
         </span> </p>	
		 }
@if(User.CanView("T_Comment","T_AccommodationCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Accommodation" && Convert.ToString(ViewData["AssociatedType"]) == "T_AccommodationComments"?"hidden":"")>
		<span class="text-primary"> Accommodation Comments </span> : <span>
		@if (item.t_accommodationcomments != null  && !string.IsNullOrEmpty(item.t_accommodationcomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_accommodationcomments.DisplayValue).ToString(), User.CanEdit("T_Accommodation") ? "Edit" : "Details", "T_Accommodation", new { Id = Html.DisplayFor(modelItem => item.t_accommodationcomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_DrugAlcoholTestCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_DrugAlcoholTest" && Convert.ToString(ViewData["AssociatedType"]) == "T_DrugAlcoholTestComments"?"hidden":"")>
		<span class="text-primary"> Drug Alcohol Test Comments </span> : <span>
		@if (item.t_drugalcoholtestcomments != null  && !string.IsNullOrEmpty(item.t_drugalcoholtestcomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_drugalcoholtestcomments.DisplayValue).ToString(), User.CanEdit("T_DrugAlcoholTest") ? "Edit" : "Details", "T_DrugAlcoholTest", new { Id = Html.DisplayFor(modelItem => item.t_drugalcoholtestcomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_EducationCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Education" && Convert.ToString(ViewData["AssociatedType"]) == "T_EducationComments"?"hidden":"")>
		<span class="text-primary"> Education Comments </span> : <span>
		@if (item.t_educationcomments != null  && !string.IsNullOrEmpty(item.t_educationcomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_educationcomments.DisplayValue).ToString(), User.CanEdit("T_Education") ? "Edit" : "Details", "T_Education", new { Id = Html.DisplayFor(modelItem => item.t_educationcomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_InjuryCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_EmployeeInjury" && Convert.ToString(ViewData["AssociatedType"]) == "T_InjuryComments"?"hidden":"")>
		<span class="text-primary"> Injury Comments </span> : <span>
		@if (item.t_injurycomments != null  && !string.IsNullOrEmpty(item.t_injurycomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_injurycomments.DisplayValue).ToString(), User.CanEdit("T_EmployeeInjury") ? "Edit" : "Details", "T_EmployeeInjury", new { Id = Html.DisplayFor(modelItem => item.t_injurycomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_JobAssignmentCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_JobAssignment" && Convert.ToString(ViewData["AssociatedType"]) == "T_JobAssignmentComments"?"hidden":"")>
		<span class="text-primary"> Job Assignment Comments </span> : <span>
		@if (item.t_jobassignmentcomments != null  && !string.IsNullOrEmpty(item.t_jobassignmentcomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_jobassignmentcomments.DisplayValue).ToString(), User.CanEdit("T_JobAssignment") ? "Edit" : "Details", "T_JobAssignment", new { Id = Html.DisplayFor(modelItem => item.t_jobassignmentcomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_LeaveCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_LeaveProfile" && Convert.ToString(ViewData["AssociatedType"]) == "T_LeaveComments"?"hidden":"")>
		<span class="text-primary"> Leave Comments </span> : <span>
		@if (item.t_leavecomments != null  && !string.IsNullOrEmpty(item.t_leavecomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_leavecomments.DisplayValue).ToString(), User.CanEdit("T_LeaveProfile") ? "Edit" : "Details", "T_LeaveProfile", new { Id = Html.DisplayFor(modelItem => item.t_leavecomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_LicensesCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_Licenses" && Convert.ToString(ViewData["AssociatedType"]) == "T_LicensesComments"?"hidden":"")>
		<span class="text-primary"> Licenses Comments </span> : <span>
		@if (item.t_licensescomments != null  && !string.IsNullOrEmpty(item.t_licensescomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_licensescomments.DisplayValue).ToString(), User.CanEdit("T_Licenses") ? "Edit" : "Details", "T_Licenses", new { Id = Html.DisplayFor(modelItem => item.t_licensescomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_SalaryCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_PayDetails" && Convert.ToString(ViewData["AssociatedType"]) == "T_SalaryComments"?"hidden":"")>
		<span class="text-primary"> Salary Comments </span> : <span>
		@if (item.t_salarycomments != null  && !string.IsNullOrEmpty(item.t_salarycomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_salarycomments.DisplayValue).ToString(), User.CanEdit("T_PayDetails") ? "Edit" : "Details", "T_PayDetails", new { Id = Html.DisplayFor(modelItem => item.t_salarycomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_PreemploymentCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_BackgroundCheck" && Convert.ToString(ViewData["AssociatedType"]) == "T_PreemploymentComments"?"hidden":"")>
		<span class="text-primary"> Preemployment Comments </span> : <span>
		@if (item.t_preemploymentcomments != null  && !string.IsNullOrEmpty(item.t_preemploymentcomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_preemploymentcomments.DisplayValue).ToString(), User.CanEdit("T_BackgroundCheck") ? "Edit" : "Details", "T_BackgroundCheck", new { Id = Html.DisplayFor(modelItem => item.t_preemploymentcomments.Id).ToString() },null)
}
		          </span> </p>
		 }
@if(User.CanView("T_Comment","T_ServiceRecordCommentsID"))
{
		<p @(Convert.ToString(ViewData["HostingEntity"]) == "T_ServiceRecord" && Convert.ToString(ViewData["AssociatedType"]) == "T_ServiceRecordComments"?"hidden":"")>
		<span class="text-primary"> Service Record Comments </span> : <span>
		@if (item.t_servicerecordcomments != null  && !string.IsNullOrEmpty(item.t_servicerecordcomments.DisplayValue))
{
		 @Html.ActionLink(Html.DisplayFor(modelItem => item.t_servicerecordcomments.DisplayValue).ToString(), User.CanEdit("T_ServiceRecord") ? "Edit" : "Details", "T_ServiceRecord", new { Id = Html.DisplayFor(modelItem => item.t_servicerecordcomments.Id).ToString() },null)
}
		          </span> </p>
		 }
<span class="label label-primary text-linkwhite"> 
@Html.ActionLink("View", "Details","T_Comment", new { id = item.Id },null)
</span>
<span class="label label-warning text-linkwhite"> 
@if (User.CanEdit("T_Comment"))
				 {
					@Html.ActionLink("Edit", "Edit","T_Comment", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)  
				 }
				 </span>
				<span class="label label-danger text-linkwhite"> 
				@if (User.CanDelete("T_Comment"))
				 {
					@Html.ActionLink("Delete", "Delete", "T_Comment", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)    
				 }
				 </span>
				   </li>
                    }
                </ul>
  			   @if (Model.Count > 0)
                {
                    <div id="pagination" class="MyPagination1">
                        @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_Comment", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_Comment",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_Comment','"
							 + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_Comment",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_Comment"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
				@Html.DropDownList("EntityT_CommentDisplayValue", null,null, new { @Style = "display:none;" })
            
        </div>
    </div> 
 </div>
</div>


