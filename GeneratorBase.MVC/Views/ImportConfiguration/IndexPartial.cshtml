@model PagedList.IPagedList<GeneratorBase.MVC.Models.ImportConfiguration>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
}
<div id="ImportConfiguration">
    @if (ViewBag.ImportError != null)
    {
        @Html.Partial("~/Views/Shared/ImportError.cshtml", "ImportConfiguration")
    }
    @if (ViewBag.ColumnMapping != null)
    {
        @Html.Partial("~/Views/Shared/ImportColumnMapping.cshtml", "ImportConfiguration")
    }
    @if (ViewBag.ConfirmImportData != null)
    {
        @Html.Partial("~/Views/Shared/ImportData.cshtml", "ImportConfiguration")
    }
    @if (ViewBag.ColumnMapping == null && ViewBag.ImportError == null && ViewBag.ConfirmImportData == null)
    {
        <style>
            .table-responsive > .fixed-column {
                position: absolute;
                display: block;
                width: auto;
                border: 0px solid transparent;
                border-top: 1px solid #c3ddec;
            }
            .fixed-column th {
                background: #fff;
            }
            .fixed-column td {
                background: #fff;
            }
        </style>
        <script type="text/javascript">
            $(document).ready(function () {
                $(".pagination a").click(function (e) {
                    PaginationClick(e, 'ImportConfiguration')
                })
                if ("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH") {
                    $("#fsearchImportConfiguration").addClass('in');
                }
                $("#SearchStringImportConfiguration").keypress(function (e) {
                    if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                        $("#ImportConfigurationSearch").bind("click", (function () {
                        }));
                        $('#ImportConfigurationSearch').trigger("click");
                        return false;
                    }
                })
                $("#btnShowHideImportConfiguration").mouseup(function () {
                    if (document.getElementById('ColumnShowHideImportConfiguration').className == 'collapse') {
                        $('#lblImportConfiguration').css('display', 'none');
                    }
                })
            });
        </script>
        @functions {
            object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
            {
                if (IsPaging)
                {
                    return new
                    {
                        page,
                        sortBy = ViewBag.CurrentSort,
                        isAsc = ViewBag.IsAsc,
                        currentFilter = ViewBag.CurrentFilter,
                        HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                        AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                        HostingEntityID = ViewData["HostingEntityID"],
                        IsExport = IsExport,
                        FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                        IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                        LastUpdateFrom = Request.QueryString["LastUpdateFrom"],
                        LastUpdateTo = Request.QueryString["LastUpdateTo"],
                        search = Request.QueryString["search"],
                    };
                }
                else
                {
                    return new
                    {
                        sortBy = sortby,
                        currentFilter = Request.QueryString["currentFilter"],
                        searchString = Request.QueryString["searchString"],
                        isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                        page = ViewBag.Pages,
                        HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                        HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                        AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                        IsExport = IsExport,
                        FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                        IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                        LastUpdateFrom = Request.QueryString["LastUpdateFrom"],
                        LastUpdateTo = Request.QueryString["LastUpdateTo"],
                        search = Request.QueryString["search"],
                    };
                }
            }
        }
        <div class="row">
            <div class="col-md-12 col-sm-12 col-sx-12">
                <div class="panel panel-default">
                    <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                        <div class="btn-group">
                            @if ( User.CanAdd("ImportConfiguration"))
                            {
                                <button class="btn btn-xs  btn-default  tip-top" type="button" data-original-title="Full Add" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "ImportConfiguration", new { UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
                                    <span class="fam-world-add"></span>
                                </button>
                                <button class="btn btn-xs  btn-default  tip-top" type="button" data-original-title="Add Wizard" data-placement="top" style="padding:4px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("CreateWizard", "ImportConfiguration", new { UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
                                    <span class="fam-chart-organisation-add"></span>
                                </button>
                                if (ViewData["HostingEntity"] == null)
                                {
                                    <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnImportExcelImportConfiguration" data-original-title="Import Excel" data-placement="top" style="padding:3px 5px;" data-toggle="collapse" href="#ImportExcelImportConfiguration">
                                        <span class="fam-page-white-put"></span>
                                    </button>
                                }
                            }
                            <div class="btn btn-default  btn-default tip-top" data-original-title="Export Excel" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"ImportConfiguration",getSortHtmlAttributes(null, false, null, true), null) + "');")>
                                <span class="fam-page-excel"></span>
                            </div>
                            <button type="button" class="btn btn-default btn-default collapse-data-btn tip-top" id="btnShowHideImportConfiguration" data-original-title="Show/Hide Column" data-placement="top" style="padding:3px 5px;" onclick=@Html.Raw("showhideColumns(event,'ImportConfiguration');")>
                                <span class="fam-table-row-delete"></span>
                            </button>
                            @if (ViewData["HostingEntity"] == null)
                            {
                                <a href="@(Url.Action("SetFSearch", "ImportConfiguration")+Request.Url.Query)" data-original-title="Faceted Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom-in"></span></a>
                            }
                        </div>
                        <div class="pull-right" style="width:200px;">
                            <div class="input-group">
                                @Html.TextBox("SearchStringImportConfiguration", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @placeholder = "Search" })
                                <div class="input-group-btn">
                                    <a id="ImportConfigurationSearch" onclick="SearchClick(event, 'ImportConfiguration', '@Html.Raw(Url.Action("Index", "ImportConfiguration", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom"></span></a>
                                    <a id="ImportConfigurationDeepSearch" onclick="SearchClick(event, 'ImportConfiguration', '@Html.Raw(Url.Action("Index", "ImportConfiguration", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = true, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))');" data-original-title="Detail Search" class="btn btn-default btn-default tip-top" style="padding:3px 5px;"><span class="fam-zoom-in"></span></a>
                                    <button id="ImportConfigurationCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('ImportConfiguration','@Html.Raw(Url.Action("Index", "ImportConfiguration", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))')" data-original-title="Clear Search" data-placement="top" style="padding:3px 5px;">
                                        <span class="fam-delete"></span>
                                    </button>
                                    <button id="ImportConfigurationSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearch('ImportConfiguration','@Html.Raw(Url.Action("Index", "ImportConfiguration", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))')" data-original-title="Refresh Grid" data-placement="top" style="padding:3px 5px;">
                                        <span class="fam-arrow-refresh"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body" style="margin:0px; padding:8px;">
                        @if (ViewData["HostingEntity"] == null)
                        {
                            if (ViewBag.SearchResult != "")
                            {
                                <div id="fsearchImportConfiguration" class="collapse MessageFSearch">
                                    @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
                                    <a href="@Url.Action("Index", "ImportConfiguration")" style="float:right"><span class="glyphicon glyphicon-remove-sign"></span> Clear</a>
                                </div>
                            }
                        }
                        @Html.Partial("~/Views/ImportConfiguration/ShowHideColumns.cshtml")
                        @if (ViewData["HostingEntity"] == null)
                        {
                            <div id="ImportExcelImportConfiguration" class="collapse">
                                @using (Html.BeginForm("Upload", "ImportConfiguration", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    @Html.Partial("~/Views/Shared/FileUpload.cshtml")
                                }
                            </div>
                        }
                        <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
                            <table class="table table-striped table-bordered table-hover table-condensed">
                                <thead>
                                    <tr>
                                        <th class="col1">Actions</th>
                                        @if (User.CanView("ImportConfiguration", "TableColumn"))
                                        {
                                            <th class="col2">
                                                @Html.ActionLink("Table Column", ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes("TableColumn", false, null, false), new { @onclick = "SortLinkClick(event,'ImportConfiguration');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "TableColumn")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "TableColumn")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                        }
                                        @if (User.CanView("ImportConfiguration", "SheetColumn"))
                                        {
                                            <th class="col3">
                                                @Html.ActionLink("Sheet Column", ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes("SheetColumn", false, null, false), new { @onclick = "SortLinkClick(event,'ImportConfiguration');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "SheetColumn")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "SheetColumn")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                        }
                                        @if (User.CanView("ImportConfiguration", "UniqueColumn"))
                                        {
                                            <th class="col4">
                                                @Html.ActionLink("Unique Column", ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes("UniqueColumn", false, null, false), new { @onclick = "SortLinkClick(event,'ImportConfiguration');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "UniqueColumn")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "UniqueColumn")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                        }
                                        @if (User.CanView("ImportConfiguration", "Name"))
                                        {
                                            <th class="col5">
                                                @Html.ActionLink("Name", ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes("Name", false, null, false), new { @onclick = "SortLinkClick(event,'ImportConfiguration');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Name")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Name")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                        }
                                        @if (User.CanView("ImportConfiguration", "MappingName"))
                                        {
                                            <th class="col5">
                                                @Html.ActionLink("MappingName", ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes("MappingName", false, null, false), new { @onclick = "SortLinkClick(event,'ImportConfiguration');" })
                                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "MappingName")
                                                {<i class="fa fa-sort-desc"></i>}
                                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "MappingName")
                                                {<i class="fa fa-sort-asc"></i>}
                                            </th>
                                        }@if (User.CanView("ImportConfiguration", "IsDefaultMapping"))
                                        {
                                            <th class="col5">
                                                @Html.ActionLink("IsDefaultMapping", ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes("IsDefaultMapping", false, null, false), new { @onclick = "SortLinkClick(event,'ImportConfiguration');" })
                                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "IsDefaultMapping")
                                                {<i class="fa fa-sort-desc"></i>}
                                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "IsDefaultMapping")
                                                {<i class="fa fa-sort-asc"></i>}
                                            </th>
                                        }
                                    </tr>
                                    @foreach (var item in Model)
                                    {
                                        <tr ondblclick="DoubleClickRow(@item.Id,'@Url.Action("Details", "ImportConfiguration", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)');">
                                            <td>
                                                <div style="width:60px; margin-top:-2px;">
                                                    <div class="btn-group" style="position:absolute;">
                                                        <button data-toggle="dropdown" class="btn btn-xs dropdown-toggle btn-default">
                                                            Action
                                                            <span class="caret">    </span>
                                                        </button>
                                                        <ul class="dropdown-menu pull-left">
                                                            <li>
                                                                <a href="@Url.Action("Details", "ImportConfiguration", new { id = item.Id }, null)"><i class="glyphicon glyphicon-eye-open"></i>  View</a>
                                                            </li>
                                                            <li>
                                                                @if ( User.CanEdit("ImportConfiguration"))
                                                                {
                                                                    <a href="@Url.Action("Edit","ImportConfiguration", new { id = item.Id,  UrlReferrer = Request.Url, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                                                                }
                                                            </li>
                                                            <li>
                                                                @if ( User.CanEdit("ImportConfiguration"))
                                                                {
                                                                    <a href="@Url.Action("EditWizard","ImportConfiguration", new { id = item.Id,  UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-share"></i>  Wizard</a>
                                                                }
                                                            </li>
                                                            <li>
                                                                @if ( User.CanDelete("ImportConfiguration"))
                                                                {
                                                                    <a href="@Url.Action("Delete", "ImportConfiguration", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                                                                }
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </td>
                                            @if (User.CanView("ImportConfiguration", "TableColumn"))
                                            {
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.TableColumn)
                                                </td>
                                            }
                                            @if (User.CanView("ImportConfiguration", "SheetColumn"))
                                            {
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.SheetColumn)
                                                </td>
                                            }
                                            @if (User.CanView("ImportConfiguration", "UniqueColumn"))
                                            {
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.UniqueColumn)
                                                </td>
                                            }
                                            @if (User.CanView("ImportConfiguration", "Name"))
                                            {
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.Name)
                                                </td>
                                            }
                                            @if (User.CanView("ImportConfiguration", "MappingName"))
                                            {
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.MappingName)
                                                </td>
                                            } @if (User.CanView("ImportConfiguration", "IsDefaultMapping"))
                                            {
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.IsDefaultMapping)
                                                </td>
                                            }
                                        </tr>
                                    }
                            </table>
                        </div>
                        <ul id="Mob_List" class="list-group">
                            @foreach (var item in Model)
                            {
                                <li class="list-group-item">
                                    @if (User.CanView("ImportConfiguration", "TableColumn"))
                                    {
                                        <p>
                                            <span class="text-primary"> Table Column </span> : <span>
                                                @Html.DisplayFor(modelItem => item.TableColumn)
                                            </span>
                                        </p>
                                    }
                                    @if (User.CanView("ImportConfiguration", "SheetColumn"))
                                    {
                                        <p>
                                            <span class="text-primary"> Sheet Column </span> : <span>
                                                @Html.DisplayFor(modelItem => item.SheetColumn)
                                            </span>
                                        </p>
                                    }
                                    @if (User.CanView("ImportConfiguration", "UniqueColumn"))
                                    {
                                        <p>
                                            <span class="text-primary"> Unique Column </span> : <span>
                                                @Html.DisplayFor(modelItem => item.UniqueColumn)
                                            </span>
                                        </p>
                                    }
                                    @if (User.CanView("ImportConfiguration", "Name"))
                                    {
                                        <p>
                                            <span class="text-primary"> Name </span> : <span>
                                                @Html.DisplayFor(modelItem => item.Name)
                                            </span>
                                        </p>
                                    }
                                    @if (User.CanView("ImportConfiguration", "MappingName"))
                                    {
                                        <p>
                                            <span class="text-primary"> Name </span> : <span>
                                                @Html.DisplayFor(modelItem => item.MappingName)
                                            </span>
                                        </p>
                                    }
                                    @if (User.CanView("ImportConfiguration", "IsDefaultMapping"))
                                    {
                                        <p>
                                            <span class="text-primary"> Name </span> : <span>
                                                @Html.DisplayFor(modelItem => item.IsDefaultMapping)
                                            </span>
                                        </p>
                                    }
                                    <span class="label label-primary text-linkwhite">
                                        @Html.ActionLink("View", "Details", "ImportConfiguration", new { id = item.Id }, null)
                                    </span>
                                    <span class="label label-warning text-linkwhite">
                                        @if ( User.CanEdit("ImportConfiguration"))
                                        {
                                            @Html.ActionLink("Edit", "Edit", "ImportConfiguration", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                        }
                                    </span>
                                    <span class="label label-danger text-linkwhite">
                                        @if ( User.CanDelete("ImportConfiguration"))
                                        {
                                            @Html.ActionLink("Delete", "Delete", "ImportConfiguration", new { id = item.Id, UrlReferrer = Request.Url, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                        }
                                    </span>
                                </li>
                            }
                        </ul>
                        @if (Model.Count > 0)
                        {
                            <div id="pagination">
                                @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "ImportConfiguration", getSortHtmlAttributes(null, true, page, false)))
                                <div class="fixPageSize">
                                    Page Size :
                                    @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelistImportConfiguration",
                                @onchange = @Html.Raw("pagesizelistChange(event,'ImportConfiguration','"
                                 + @HttpUtility.JavaScriptStringEncode(HttpContext.Current.User.Identity.Name) + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "ImportConfiguration",
                                getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                                null, false), null))
                            })
                                    <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>
