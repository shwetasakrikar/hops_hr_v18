@model GeneratorBase.MVC.Models.PropertyMapping
@{
    ViewBag.Title = "Create Property Mapping";
    Layout = null;
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
                $('#' + hostingEntityName + 'ID').trigger("change");
            }
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyMappingIsHiddenRule))
    {
        @Html.Raw(ViewBag.PropertyMappingIsHiddenRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
@using (Html.BeginForm("CreateQuick", "PropertyMapping", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken();
                            Html.ValidationSummary(true);
                            Html.EnableClientValidation();
                            <label id="ErrMsgQuickAdd" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
                            <div id="errorContainerQuickAdd" style="display: none">
                                <div id="errorsMsgQuickAdd"></div>
                                <div id="errorsQuickAdd"></div>
                            </div>
                            <div class="row">
                                @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
                                <div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="panel panel-default AppForm">
                                        <div class="panel-body" style="display:none;">
                                            <div class="row">
                                                <div class='col-sm-6' id="dvPropertyName">
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.PropertyName) <span class="text-danger-reg">*</span></label>

                                                        @Html.TextBoxFor(model => model.PropertyName, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.PropertyName)

                                                    </div>
                                                </div>
                                                <div class='col-sm-6' id="dvDataName">
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.DataName) </label>

                                                        @Html.TextBoxFor(model => model.DataName, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.DataName)

                                                    </div>
                                                </div>
                                                <div class='col-sm-6' id="dvEntityPropertyMappingID">
                                                    <div class='form-group'>
                                                        <label>@Html.LabelFor(model => model.EntityPropertyMappingID) </label>
                                                        <div class="input-group" style="width: 100%;">
                                                            @Html.DropDownList("EntityPropertyMappingID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "EntityDataSource", @dataurl = Url.Action("GetAllValue", "EntityDataSource", new { caller = "EntityPropertyMappingID" }) })
                                                            @Html.ValidationMessageFor(model => model.EntityPropertyMappingID)
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="panel panel-default">
                                            <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                                                Define Column Mapping(s)
                                            </div>

                                            <div class="panel-body" style="margin:0px; padding:8px;">
                                                <table class="table table-striped table-bordered table-hover table-condensed">
                                                    <thead>
                                                        <tr>
                                                            <th>Property Name</th>
                                                            <th>JSON Name</th>
                                                        </tr>
                                                        @foreach (var col in ViewBag.ColumnMapping)
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @Html.Label((col.Key as GeneratorBase.MVC.ModelReflector.Property).Name, new { @class = "PropertyName" })
                                                                    @*@Html.Label((col.Key as GeneratorBase.MVC.ModelReflector.Property).DisplayName)*@
                                                                    @if ((col.Key as GeneratorBase.MVC.ModelReflector.Property).IsRequired == true)
                                                                    {
                                                                        <span class="text-danger-reg">*</span>
                                                                    }
                                                                    @*@Html.Hidden("lblColumnDisplayName", (col.Key as GeneratorBase.MVC.ModelReflector.Property).DisplayName)
                                                                        @Html.Hidden("lblColumn", (col.Key as GeneratorBase.MVC.ModelReflector.Property).Name)*@
                                                                </td>
                                                                <td>
                                                                    @Html.TextBox("colList", col.Value as string, new { @class = "DataName" })

                                                                </td>
                                                            </tr>
                                                        }
                                                    </thead>
                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                            <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true">Cancel</button>
    var busineesrule = User.businessrules.Where(p => p.EntityName == "PropertyMapping").ToList();

    <input type="submit" value="Create" class="btn btn-primary btn-sm" onclick="LoadDataBeforeSave();QuickAddFromIndex(event,true,'PropertyMapping','@ViewData["AssociatedType"]','@busineesrule',@busineesrule.Count);" />

}
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/Common3/chosen.jquery.js" type="text/javascript"></script>
<script type="text/javascript">
    function LoadDataBeforeSave()
    {
        var PropNames = "";
        var DataNames = "";
        $(".PropertyName").each(function () {
            PropNames += ($(this).html()) + ",";
        })
        $(".DataName").each(function () {
            DataNames += ($(this).val()) + ",";
        })
        $("#PropertyName").val(PropNames);
        $("#DataName").val(DataNames);
       
    }
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>


