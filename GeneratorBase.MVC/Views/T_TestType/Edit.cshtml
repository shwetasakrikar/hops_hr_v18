@model GeneratorBase.MVC.Models.T_TestType
@using PagedList;
@{
    ViewBag.Title = "Edit Test Type";
	var EditPermission = User.CanEditItem("T_TestType", Model, User);
	var DeletePermission = User.CanDeleteItem("T_TestType", Model, User);
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_TestType");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Test Type";
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("T_TestType", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
             if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
				$('#' + hostingEntityName + 'ID').attr("lock","true");
				// $('#' + hostingEntityName + 'ID').trigger("change");
				  $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
			if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			}
			 
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_TestTypeIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_TestTypeIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_TestTypeIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_TestTypeIsGroupsHiddenRule);
    }
}

@{
    if (!string.IsNullOrEmpty(ViewBag.T_TestTypeIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_TestTypeIsSetValueUIRule);
    }
}
	<div class="row">
    <div class="col-lg-12">
        <h1 class="page-title" >
            <i class="glyphicon glyphicon-edit text-primary"></i> @EntityDisplayName  <i class="glyphicon glyphicon-chevron-right small"></i> <span>Edit</span>

			   <div class="btn-group pull-right" style="margin-top:3px;">
			  


            <a data-toggle="dropdown" class="btn btn-xs dropdown-toggle" alt="Action" title="Action">
                Action
                <span class="caret" style="margin-bottom:2px">    </span>
            </a>
			<ul class="dropdown-menu pull-left">
			
				<li>
                    @if (EditPermission)
                    {
                        <a href="@Url.Action("Edit","T_TestType", new { id = Model.Id,  UrlReferrer = Request.UrlReferrer, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                    }
                </li>             
				<li>
                    @if (EditPermission && User.CanDelete("T_TestType"))
                    {
                        <a href="@Url.Action("Delete", "T_TestType", new {UrlReferrer = Request.UrlReferrer, id = Model.Id, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                    }
                </li>
	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu pull-left" id="AddAssociationdropmenuT_TestType">
	 @{ var dropmenu = false; }
	<a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if (User.CanAdd("T_DrugAlcoholTest"))
				{ dropmenu = true;
					<li>
						<a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_DrugAlcoholTest", 
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_TypeOfTest", 
							HostingEntityName = "T_TestType",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
							<i class="glyphicon glyphicon-plus"></i>  Type Of Test
						</a>
					</li>
				}
			</ul>
</li>
@if(!dropmenu)
{
    <script>
        $("#AddAssociationdropmenuT_TestType").hide();
    </script>
}
			</ul>
		</div>

        </h1>

     <h2 class="text-primary" style="padding:0px 5px 15px 0px">
	  <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
			@if (EditPermission)
			{	
				<div class="pull-right" style="margin-top:-3px">
					<button class="btn btn-default btn-xs pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('T_TestType',event,'hdnNextPrevId')")" alt="Next" title="Next">Next >></button>
					@Html.DropDownList("EntityT_TestTypeDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('T_TestType','frmT_TestType','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 22px;width: 170px; font-size:12px; color:#333;" })
					<button class="btn btn-default btn-xs pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('T_TestType',event,'hdnNextPrevId')")" alt="Prev" title="Prev"><< Prev</button>
				</div>
			}
	 </h2>
		
    </div>
    <!-- /.col-lg-12 -->
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>

<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
 <div class="tabbable responsive">
    <ul class="nav nav-tabs">
	 <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">Details</a></li>
		 <li @(!User.CanView("T_DrugAlcoholTest") ?"style=display:none;":"")>
			<a onclick="LoadTab('T_TypeOfTest','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_DrugAlcoholTest", new {RenderPartial=true, HostingEntity ="T_TestType", HostingEntityID = @Model.Id, AssociatedType = "T_TypeOfTest",TabToken = DateTime.Now.Ticks,}))')" href="#T_TypeOfTest" data-toggle="tab" alt="Type Of Test" title="Type Of Test">Type Of Test
		 <span class="badge bg-blue"><div id="dvcnt_T_TypeOfTest">@ViewBag.T_TypeOfTestCount</div></span>
		 </a></li>
		 <li @(!User.CanView("JournalEntry")?"style=display:none;":"")><a onclick="LoadTab('JournalEntryToT_TestTypeRelation','@User.JavaScriptEncodedName@Model.Id','@Url.Action("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_TestType", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry", TabToken = DateTime.Now.Ticks })')" href="#JournalEntryToT_TestTypeRelation" data-toggle="tab" alt="Test Type Journal" title="Test Type Journal">
		 Test Type Journal
		 </a></li>

    </ul>
		<div class="tab-content">
        <div class="tab-pane fade in active" id="Details">
@using (Html.BeginForm("Edit","T_TestType",new {UrlReferrer =Convert.ToString(ViewData["T_TestTypeParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data",@id="frmT_TestType" }))
{
     Html.ValidationSummary(true);
                Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
                <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                    <div class="panel panel-default AppForm">
						<div class="panel-body">
						
											<div class="row">
				@if(User.CanView("T_TestType","T_Name"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
							<div class='form-group' title="Name">
								<label class="col-sm-5 col-md-5 col-xs-12" >@Html.LabelFor(model => model.T_Name)  <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Name,  getHtmlAttributes("T_Name"))
									@Html.ValidationMessageFor(model => model.T_Name)
								</div>
                             </div>
						</div>
										
} else { @Html.HiddenFor(model => model.T_Name, new { @class = "form-control" })}
       </div>
            </div>
        </div>
		</div>
		 @Html.AntiForgeryToken();
		 <a class="btn btn-default btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index","T_TestType")');" alt="Cancel" title="Cancel">Cancel</a>
		 @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["T_TestTypeParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix", @alt="Cancel", @title="Cancel" })*@
		 if (EditPermission)
         {
 				<input type="submit" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix"  alt="Save" title="Save"/>
				<input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev"/>
				<input type="submit" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay"/>
		}	
				<input type="hidden" name="hdncommand" value="" />
				<input type="hidden" name="hdnNextPrevId" value="" />
}
 @{ var dropmenubottom = false; }
<div class="dropdown pull-left formbuttonfix"  id="AddAssociationdropmenubottomT_TestType">
<button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
            Add Association
            <span class="caret"></span>
        </button>
		 <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1">
			@if (User.CanAdd("T_DrugAlcoholTest"))
            {  dropmenubottom = true;
                <li><a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_DrugAlcoholTest",
						new { UrlReferrer = Request.Url,
								AssociatedType ="T_TypeOfTest", 
						HostingEntityName = "T_TestType",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                   Add  Type Of Test
                </a>
				</li>
            }

			
</ul>
</div>
@if(!dropmenubottom || !EditPermission)
{
    <script>
        $("#AddAssociationdropmenubottomT_TestType").hide();
    </script>
}
<div class="clearfix" style="clear:both; margin-bottom:8px"></div>
</div>
 <div class="tab-pane fade in" id="T_TypeOfTest">
	@if (User.CanView("T_DrugAlcoholTest"))
	{
	  // Html.RenderAction("Index", "T_DrugAlcoholTest", new {RenderPartial=true, HostingEntity = "T_TestType", HostingEntityID = @Model.Id, AssociatedType = "T_TypeOfTest" }); 
	}
  </div>
 <div class="tab-pane fade in" id="JournalEntryToT_TestTypeRelation">
			 @if (User.CanView("JournalEntry"))
			 {
			  // Html.RenderAction("Index", "JournalEntry", new { RenderPartial = true, HostingEntity = "T_TestType", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry" });
			 }
  </div>

</div> <!-- /tab-content --><br />

<br/>
</div>
	<script>
	</script>
	

@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_TestType").ToList();

if ((businessrule != null && businessrule.Count > 0) )
{
var ruleids = businessrule.Select(q => q.Id).ToList();
var typelist  = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());

    <script>
		$(document).ready(function () {
				document.getElementById("ErrMsg").innerHTML = "";
				var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";

 form = $("#frmT_TestType").serialize();
				dataurl = "@Url.Action("businessruletype", "T_TestType", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_TestType", false, "ErrMsg", form);
				//business rules on inline associations

    });
</script>
<script>
    $("form").submit(function (event) {
	if (!$("#frmT_TestType").valid()) return;
			document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
            var dataurl = "";
            var form = "";
            var inlinecount = "0";
 form = $("#frmT_TestType").serialize();
    
				 dataurl = "@Url.Action("businessruletype", "T_TestType", new { ruleType = "OnEdit"})";
                 flag = ApplyBusinessRuleOnSubmit(dataurl, "T_TestType", false, "ErrMsg", form);

  				 //business rules on inline associations
               
			 if (flag)
				{
				                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
					if ($(document.activeElement).attr('id') == "nextEdit" || $(document.activeElement).attr('id') == "prevEdit")
			         $('input:hidden[name="hdncommand"]').val("SaveNextPrev");
					 $("#frmT_TestType").find(':input').removeAttr('disabled');
					}
            return flag;
		});
</script>
}
 else
    {
       <script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmT_TestType").valid()) return;
        var $this = $(this);
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
    });
	</script>
    }
 
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
		focusOnControl('frmT_TestType');
        }
        catch (ex) { }
    });
	 $(document).ready(function () {
		var RecIdEdit = $("#frmT_TestType").find("input:hidden[name='Id']").val();
        $("#EntityT_TestTypeDisplayValueEdit").val(RecIdEdit);

		var textedit = $("option:selected", $("#EntityT_TestTypeDisplayValueEdit")).text();
		$("#EntityT_TestTypeDisplayValueEdit").attr('data-toggle', 'tooltip')
		$("#EntityT_TestTypeDisplayValueEdit").attr('title', textedit);

        var lastOptionValEdit = $('#EntityT_TestTypeDisplayValueEdit option:last-child').val();
        var fristOptionValEdit = $('#EntityT_TestTypeDisplayValueEdit option:first-child').val();
        if (lastOptionValEdit == RecIdEdit) {
            $('#nextEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
        }
        if (fristOptionValEdit == RecIdEdit)
            $('#prevEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
    });
</script>


